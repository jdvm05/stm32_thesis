
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  0800047c  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000474  08000474  0001047c  2**0
                  CONTENTS
  4 .ARM          00000000  08000474  08000474  0001047c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000474  0800047c  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800047c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800047c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001047c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000880  00000000  00000000  000104ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000262  00000000  00000000  00010d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019947  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f86  00000000  00000000  0002a9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9c9  00000000  00000000  0002b965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba32e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000ba380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800045c 	.word	0x0800045c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800045c 	.word	0x0800045c

08000204 <main>:
#define LED_PIN		GPIOA_5

char key;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <main+0x5c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a14      	ldr	r2, [pc, #80]	; (8000260 <main+0x5c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PA5 as output
	GPIOA->MODER |= (1U<<10);
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <main+0x60>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <main+0x60>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <main+0x60>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <main+0x60>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]


	uart2_rxtx_init();
 800022c:	f000 f81e 	bl	800026c <uart2_rxtx_init>

	while(1)
	{
		key = uart2_read();
 8000230:	f000 f88c 	bl	800034c <uart2_read>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <main+0x64>)
 800023a:	701a      	strb	r2, [r3, #0]
		if (key == '1')
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <main+0x64>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b31      	cmp	r3, #49	; 0x31
 8000242:	d106      	bne.n	8000252 <main+0x4e>
		{
			GPIOA->ODR |= LED_PIN;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x60>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a06      	ldr	r2, [pc, #24]	; (8000264 <main+0x60>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]
 8000250:	e7ee      	b.n	8000230 <main+0x2c>
		}
		else
		{
			GPIOA->ODR &= ~LED_PIN;
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <main+0x60>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a03      	ldr	r2, [pc, #12]	; (8000264 <main+0x60>)
 8000258:	f023 0320 	bic.w	r3, r3, #32
 800025c:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 800025e:	e7e7      	b.n	8000230 <main+0x2c>
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000
 8000268:	2000001c 	.word	0x2000001c

0800026c <uart2_rxtx_init>:
	// Enable uart module
	USART2->CR1 |= CR1_UE;
}

void uart2_rxtx_init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	////////////// Configure uart gpio pin
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <uart2_rxtx_init+0xd0>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a31      	ldr	r2, [pc, #196]	; (800033c <uart2_rxtx_init+0xd0>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 to alt func mode
	GPIOA->MODER &= ~(1U<<4);
 800027c:	4b30      	ldr	r3, [pc, #192]	; (8000340 <uart2_rxtx_init+0xd4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a2f      	ldr	r2, [pc, #188]	; (8000340 <uart2_rxtx_init+0xd4>)
 8000282:	f023 0310 	bic.w	r3, r3, #16
 8000286:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000288:	4b2d      	ldr	r3, [pc, #180]	; (8000340 <uart2_rxtx_init+0xd4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a2c      	ldr	r2, [pc, #176]	; (8000340 <uart2_rxtx_init+0xd4>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6013      	str	r3, [r2, #0]

	// Set PA2 alt func type to UART_TX( AF07)
	GPIOA->AFR[0] |= (1U<<8);
 8000294:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <uart2_rxtx_init+0xd4>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a29      	ldr	r2, [pc, #164]	; (8000340 <uart2_rxtx_init+0xd4>)
 800029a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80002a0:	4b27      	ldr	r3, [pc, #156]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a26      	ldr	r2, [pc, #152]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80002ac:	4b24      	ldr	r3, [pc, #144]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002ae:	6a1b      	ldr	r3, [r3, #32]
 80002b0:	4a23      	ldr	r2, [pc, #140]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002b8:	4b21      	ldr	r3, [pc, #132]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a20      	ldr	r2, [pc, #128]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002c2:	6213      	str	r3, [r2, #32]

	// Set PA3 to alt func mode
	GPIOA->MODER &= ~(1U<<6);
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a1a      	ldr	r2, [pc, #104]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002da:	6013      	str	r3, [r2, #0]

	// Set PA3 alt func type to UART_RX( AF07)
	GPIOA->AFR[0] |= (1U<<12);
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002de:	6a1b      	ldr	r3, [r3, #32]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a14      	ldr	r2, [pc, #80]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <uart2_rxtx_init+0xd4>)
 80002fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <uart2_rxtx_init+0xd4>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <uart2_rxtx_init+0xd4>)
 8000306:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800030a:	6213      	str	r3, [r2, #32]

	///////// Configure uart module
	// Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <uart2_rxtx_init+0xd0>)
 800030e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <uart2_rxtx_init+0xd0>)
 8000312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000316:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	4909      	ldr	r1, [pc, #36]	; (8000344 <uart2_rxtx_init+0xd8>)
 800031e:	480a      	ldr	r0, [pc, #40]	; (8000348 <uart2_rxtx_init+0xdc>)
 8000320:	f000 f828 	bl	8000374 <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <uart2_rxtx_init+0xdc>)
 8000326:	220c      	movs	r2, #12
 8000328:	60da      	str	r2, [r3, #12]

	// Enable uart module
	USART2->CR1 |= CR1_UE;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <uart2_rxtx_init+0xdc>)
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	4a06      	ldr	r2, [pc, #24]	; (8000348 <uart2_rxtx_init+0xdc>)
 8000330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000334:	60d3      	str	r3, [r2, #12]
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40020000 	.word	0x40020000
 8000344:	00f42400 	.word	0x00f42400
 8000348:	40004400 	.word	0x40004400

0800034c <uart2_read>:

char uart2_read(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	// Make sure the receive data register is not empty
	while (!(USART2->SR & SR_RXNE)){}
 8000350:	bf00      	nop
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <uart2_read+0x24>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0320 	and.w	r3, r3, #32
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <uart2_read+0x6>

	// Read data
	return USART2->DR;
 800035e:	4b04      	ldr	r3, [pc, #16]	; (8000370 <uart2_read+0x24>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	b2db      	uxtb	r3, r3
}
 8000364:	4618      	mov	r0, r3
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40004400 	.word	0x40004400

08000374 <uart_set_baudrate>:
	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000380:	6879      	ldr	r1, [r7, #4]
 8000382:	68b8      	ldr	r0, [r7, #8]
 8000384:	f000 f808 	bl	8000398 <compute_uart_bd>
 8000388:	4603      	mov	r3, r0
 800038a:	461a      	mov	r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	085a      	lsrs	r2, r3, #1
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	441a      	add	r2, r3
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b0:	b29b      	uxth	r3, r3
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
	...

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 f811 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff07 	bl	8000204 <main>

080003f6 <LoopForever>:

LoopForever:
  b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000404:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 8000408:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800040c:	20000020 	.word	0x20000020

08000410 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	; (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	; (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	; (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	; (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000474 	.word	0x08000474
 8000458:	08000478 	.word	0x08000478

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
