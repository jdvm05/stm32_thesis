
15_InputInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001480  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016fc  080016fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016fc  080016fc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016fc  080016fc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001768  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001768  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019c8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000066a  00000000  00000000  00021a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000220c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00022260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f88  00000000  00000000  000223a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025d8  00000000  00000000  00024328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000907c6  00000000  00000000  00026900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b70c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cc0  00000000  00000000  000b7118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001638 	.word	0x08001638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001638 	.word	0x08001638

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <pc13_exti_init>:

#define GPIOCEN		(1U<<2)
#define SYSCFGEN	(1U<<14)

void pc13_exti_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
	//Disable global interrupts
	__disable_irq();

	//Enable clock access for GPIOC
	RCC->AHB1ENR |= GPIOCEN;
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <pc13_exti_init+0x6c>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <pc13_exti_init+0x6c>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PC13 as input
	GPIOC->MODER &= ~(1U<<26);
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <pc13_exti_init+0x70>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a15      	ldr	r2, [pc, #84]	; (800035c <pc13_exti_init+0x70>)
 8000306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800030a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<27);
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <pc13_exti_init+0x70>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <pc13_exti_init+0x70>)
 8000312:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000316:	6013      	str	r3, [r2, #0]

	//Enable clock access to SYSCFG
	RCC->APB2ENR |= SYSCFGEN;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <pc13_exti_init+0x6c>)
 800031a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <pc13_exti_init+0x6c>)
 800031e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000322:	6453      	str	r3, [r2, #68]	; 0x44

	//Select PORTC for EXTI13
	SYSCFG->EXTICR[3] |= (1U<<5);
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <pc13_exti_init+0x74>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <pc13_exti_init+0x74>)
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	6153      	str	r3, [r2, #20]

	//Unmask EXTI13
	EXTI->IMR |= (1U<<13);
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <pc13_exti_init+0x78>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <pc13_exti_init+0x78>)
 8000336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033a:	6013      	str	r3, [r2, #0]

	//Select falling edge trigger
	EXTI->FTSR |= (1U<<13);
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <pc13_exti_init+0x78>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a08      	ldr	r2, [pc, #32]	; (8000364 <pc13_exti_init+0x78>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000346:	60d3      	str	r3, [r2, #12]

	//Enable EXTI13 line in NVIC
		//The value is 40, for [15:10] interrupts
		//Check declarations of function and parameter
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000348:	2028      	movs	r0, #40	; 0x28
 800034a:	f7ff ffb1 	bl	80002b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800034e:	b662      	cpsie	i
}
 8000350:	bf00      	nop

	//Enable global interrupts
	__enable_irq();
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020800 	.word	0x40020800
 8000360:	40013800 	.word	0x40013800
 8000364:	40013c00 	.word	0x40013c00

08000368 <main>:
#define LED_PIN		PIN5

static void exti_callback(void);

int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0

	//Enable clock access to GPIOA
	RCC->AHB1ENR |=GPIOAEN;
 800036c:	4b0b      	ldr	r3, [pc, #44]	; (800039c <main+0x34>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a0a      	ldr	r2, [pc, #40]	; (800039c <main+0x34>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PA5 as output pin
	GPIOA->MODER |= (1U<<10);
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <main+0x38>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <main+0x38>)
 800037e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <main+0x38>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <main+0x38>)
 800038a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800038e:	6013      	str	r3, [r2, #0]

	pc13_exti_init();
 8000390:	f7ff ffac 	bl	80002ec <pc13_exti_init>
	uart2_tx_init();
 8000394:	f000 f8dc 	bl	8000550 <uart2_tx_init>

	while(1)
 8000398:	e7fe      	b.n	8000398 <main+0x30>
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020000 	.word	0x40020000

080003a4 <exti_callback>:

	}
}

static void exti_callback(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	printf("BTN Pressed...\n\r");
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <exti_callback+0x1c>)
 80003aa:	f000 f9b7 	bl	800071c <iprintf>
	GPIOA->ODR ^= LED_PIN;
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <exti_callback+0x20>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <exti_callback+0x20>)
 80003b4:	f083 0320 	eor.w	r3, r3, #32
 80003b8:	6153      	str	r3, [r2, #20]
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	08001650 	.word	0x08001650
 80003c4:	40020000 	.word	0x40020000

080003c8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE13)!= 0)
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <EXTI15_10_IRQHandler+0x24>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d007      	beq.n	80003e8 <EXTI15_10_IRQHandler+0x20>
	{
		//Clear PR flag
		EXTI->PR |= LINE13;
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <EXTI15_10_IRQHandler+0x24>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <EXTI15_10_IRQHandler+0x24>)
 80003de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003e2:	6153      	str	r3, [r2, #20]

		//Do something...
		exti_callback();
 80003e4:	f7ff ffde 	bl	80003a4 <exti_callback>
	}
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40013c00 	.word	0x40013c00

080003f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e00a      	b.n	8000418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000402:	f3af 8000 	nop.w
 8000406:	4601      	mov	r1, r0
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	b2ca      	uxtb	r2, r1
 8000410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	3301      	adds	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	697a      	ldr	r2, [r7, #20]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	dbf0      	blt.n	8000402 <_read+0x12>
  }

  return len;
 8000420:	687b      	ldr	r3, [r7, #4]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af00      	add	r7, sp, #0
 8000430:	60f8      	str	r0, [r7, #12]
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]
 800043a:	e009      	b.n	8000450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	1c5a      	adds	r2, r3, #1
 8000440:	60ba      	str	r2, [r7, #8]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f877 	bl	8000538 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	3301      	adds	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	697a      	ldr	r2, [r7, #20]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	429a      	cmp	r2, r3
 8000456:	dbf1      	blt.n	800043c <_write+0x12>
  }
  return len;
 8000458:	687b      	ldr	r3, [r7, #4]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <_close>:

int _close(int file)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800048a:	605a      	str	r2, [r3, #4]
  return 0;
 800048c:	2300      	movs	r3, #0
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <_isatty>:

int _isatty(int file)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004a2:	2301      	movs	r3, #1
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <_sbrk+0x5c>)
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <_sbrk+0x60>)
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d102      	bne.n	80004ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <_sbrk+0x64>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <_sbrk+0x68>)
 80004ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <_sbrk+0x64>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d207      	bcs.n	800050c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004fc:	f000 f8dc 	bl	80006b8 <__errno>
 8000500:	4603      	mov	r3, r0
 8000502:	220c      	movs	r2, #12
 8000504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	e009      	b.n	8000520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <_sbrk+0x64>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4413      	add	r3, r2
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <_sbrk+0x64>)
 800051c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20020000 	.word	0x20020000
 800052c:	00000400 	.word	0x00000400
 8000530:	20000080 	.word	0x20000080
 8000534:	20000098 	.word	0x20000098

08000538 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f851 	bl	80005e8 <uart2_write>
	return ch;
 8000546:	687b      	ldr	r3, [r7, #4]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <uart2_tx_init>:

void uart2_tx_init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	////////////// Configure uart gpio pin
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <uart2_tx_init+0x88>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <uart2_tx_init+0x88>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 to alt func mode
	GPIOA->MODER &= ~(1U<<4);
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <uart2_tx_init+0x8c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <uart2_tx_init+0x8c>)
 8000566:	f023 0310 	bic.w	r3, r3, #16
 800056a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <uart2_tx_init+0x8c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <uart2_tx_init+0x8c>)
 8000572:	f043 0320 	orr.w	r3, r3, #32
 8000576:	6013      	str	r3, [r2, #0]

	// Set PA2 alt func type to UART_TX( AF07)
	GPIOA->AFR[0] |= (1U<<8);
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <uart2_tx_init+0x8c>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4a17      	ldr	r2, [pc, #92]	; (80005dc <uart2_tx_init+0x8c>)
 800057e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000582:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <uart2_tx_init+0x8c>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <uart2_tx_init+0x8c>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <uart2_tx_init+0x8c>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a11      	ldr	r2, [pc, #68]	; (80005dc <uart2_tx_init+0x8c>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <uart2_tx_init+0x8c>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <uart2_tx_init+0x8c>)
 80005a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005a6:	6213      	str	r3, [r2, #32]

	///////// Configure uart module
	// Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <uart2_tx_init+0x88>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <uart2_tx_init+0x88>)
 80005ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	4909      	ldr	r1, [pc, #36]	; (80005e0 <uart2_tx_init+0x90>)
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <uart2_tx_init+0x94>)
 80005bc:	f000 f82c 	bl	8000618 <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <uart2_tx_init+0x94>)
 80005c2:	2208      	movs	r2, #8
 80005c4:	60da      	str	r2, [r3, #12]

	// Enable uart module
	USART2->CR1 |= CR1_UE;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <uart2_tx_init+0x94>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <uart2_tx_init+0x94>)
 80005cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d0:	60d3      	str	r3, [r2, #12]
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	00f42400 	.word	0x00f42400
 80005e4:	40004400 	.word	0x40004400

080005e8 <uart2_write>:
	// Read data
	return USART2->DR;
}

void uart2_write(int ch)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	// Make sure transmit data register is empty
	while (!(USART2->SR & SR_TXE)){}
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <uart2_write+0x2c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <uart2_write+0xa>

	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <uart2_write+0x2c>)
 8000602:	b2db      	uxtb	r3, r3
 8000604:	6053      	str	r3, [r2, #4]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40004400 	.word	0x40004400

08000618 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	68b8      	ldr	r0, [r7, #8]
 8000628:	f000 f808 	bl	800063c <compute_uart_bd>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	609a      	str	r2, [r3, #8]
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	085a      	lsrs	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	; (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 f817 	bl	80006c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fe67 	bl	8000368 <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006a8:	08001704 	.word	0x08001704
  ldr r2, =_sbss
 80006ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b0:	20000094 	.word	0x20000094

080006b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>
	...

080006b8 <__errno>:
 80006b8:	4b01      	ldr	r3, [pc, #4]	; (80006c0 <__errno+0x8>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000

080006c4 <__libc_init_array>:
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4d0d      	ldr	r5, [pc, #52]	; (80006fc <__libc_init_array+0x38>)
 80006c8:	4c0d      	ldr	r4, [pc, #52]	; (8000700 <__libc_init_array+0x3c>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	2600      	movs	r6, #0
 80006d0:	42a6      	cmp	r6, r4
 80006d2:	d109      	bne.n	80006e8 <__libc_init_array+0x24>
 80006d4:	4d0b      	ldr	r5, [pc, #44]	; (8000704 <__libc_init_array+0x40>)
 80006d6:	4c0c      	ldr	r4, [pc, #48]	; (8000708 <__libc_init_array+0x44>)
 80006d8:	f000 ffae 	bl	8001638 <_init>
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	10a4      	asrs	r4, r4, #2
 80006e0:	2600      	movs	r6, #0
 80006e2:	42a6      	cmp	r6, r4
 80006e4:	d105      	bne.n	80006f2 <__libc_init_array+0x2e>
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ec:	4798      	blx	r3
 80006ee:	3601      	adds	r6, #1
 80006f0:	e7ee      	b.n	80006d0 <__libc_init_array+0xc>
 80006f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f6:	4798      	blx	r3
 80006f8:	3601      	adds	r6, #1
 80006fa:	e7f2      	b.n	80006e2 <__libc_init_array+0x1e>
 80006fc:	080016fc 	.word	0x080016fc
 8000700:	080016fc 	.word	0x080016fc
 8000704:	080016fc 	.word	0x080016fc
 8000708:	08001700 	.word	0x08001700

0800070c <memset>:
 800070c:	4402      	add	r2, r0
 800070e:	4603      	mov	r3, r0
 8000710:	4293      	cmp	r3, r2
 8000712:	d100      	bne.n	8000716 <memset+0xa>
 8000714:	4770      	bx	lr
 8000716:	f803 1b01 	strb.w	r1, [r3], #1
 800071a:	e7f9      	b.n	8000710 <memset+0x4>

0800071c <iprintf>:
 800071c:	b40f      	push	{r0, r1, r2, r3}
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <iprintf+0x2c>)
 8000720:	b513      	push	{r0, r1, r4, lr}
 8000722:	681c      	ldr	r4, [r3, #0]
 8000724:	b124      	cbz	r4, 8000730 <iprintf+0x14>
 8000726:	69a3      	ldr	r3, [r4, #24]
 8000728:	b913      	cbnz	r3, 8000730 <iprintf+0x14>
 800072a:	4620      	mov	r0, r4
 800072c:	f000 f866 	bl	80007fc <__sinit>
 8000730:	ab05      	add	r3, sp, #20
 8000732:	9a04      	ldr	r2, [sp, #16]
 8000734:	68a1      	ldr	r1, [r4, #8]
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	4620      	mov	r0, r4
 800073a:	f000 f9bd 	bl	8000ab8 <_vfiprintf_r>
 800073e:	b002      	add	sp, #8
 8000740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	20000000 	.word	0x20000000

0800074c <std>:
 800074c:	2300      	movs	r3, #0
 800074e:	b510      	push	{r4, lr}
 8000750:	4604      	mov	r4, r0
 8000752:	e9c0 3300 	strd	r3, r3, [r0]
 8000756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800075a:	6083      	str	r3, [r0, #8]
 800075c:	8181      	strh	r1, [r0, #12]
 800075e:	6643      	str	r3, [r0, #100]	; 0x64
 8000760:	81c2      	strh	r2, [r0, #14]
 8000762:	6183      	str	r3, [r0, #24]
 8000764:	4619      	mov	r1, r3
 8000766:	2208      	movs	r2, #8
 8000768:	305c      	adds	r0, #92	; 0x5c
 800076a:	f7ff ffcf 	bl	800070c <memset>
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <std+0x38>)
 8000770:	6263      	str	r3, [r4, #36]	; 0x24
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <std+0x3c>)
 8000774:	62a3      	str	r3, [r4, #40]	; 0x28
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <std+0x40>)
 8000778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <std+0x44>)
 800077c:	6224      	str	r4, [r4, #32]
 800077e:	6323      	str	r3, [r4, #48]	; 0x30
 8000780:	bd10      	pop	{r4, pc}
 8000782:	bf00      	nop
 8000784:	08001061 	.word	0x08001061
 8000788:	08001083 	.word	0x08001083
 800078c:	080010bb 	.word	0x080010bb
 8000790:	080010df 	.word	0x080010df

08000794 <_cleanup_r>:
 8000794:	4901      	ldr	r1, [pc, #4]	; (800079c <_cleanup_r+0x8>)
 8000796:	f000 b8af 	b.w	80008f8 <_fwalk_reent>
 800079a:	bf00      	nop
 800079c:	080013b9 	.word	0x080013b9

080007a0 <__sfmoreglue>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	2268      	movs	r2, #104	; 0x68
 80007a4:	1e4d      	subs	r5, r1, #1
 80007a6:	4355      	muls	r5, r2
 80007a8:	460e      	mov	r6, r1
 80007aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007ae:	f000 f8e5 	bl	800097c <_malloc_r>
 80007b2:	4604      	mov	r4, r0
 80007b4:	b140      	cbz	r0, 80007c8 <__sfmoreglue+0x28>
 80007b6:	2100      	movs	r1, #0
 80007b8:	e9c0 1600 	strd	r1, r6, [r0]
 80007bc:	300c      	adds	r0, #12
 80007be:	60a0      	str	r0, [r4, #8]
 80007c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80007c4:	f7ff ffa2 	bl	800070c <memset>
 80007c8:	4620      	mov	r0, r4
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__sfp_lock_acquire>:
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <__sfp_lock_acquire+0x8>)
 80007ce:	f000 b8b3 	b.w	8000938 <__retarget_lock_acquire_recursive>
 80007d2:	bf00      	nop
 80007d4:	20000085 	.word	0x20000085

080007d8 <__sfp_lock_release>:
 80007d8:	4801      	ldr	r0, [pc, #4]	; (80007e0 <__sfp_lock_release+0x8>)
 80007da:	f000 b8ae 	b.w	800093a <__retarget_lock_release_recursive>
 80007de:	bf00      	nop
 80007e0:	20000085 	.word	0x20000085

080007e4 <__sinit_lock_acquire>:
 80007e4:	4801      	ldr	r0, [pc, #4]	; (80007ec <__sinit_lock_acquire+0x8>)
 80007e6:	f000 b8a7 	b.w	8000938 <__retarget_lock_acquire_recursive>
 80007ea:	bf00      	nop
 80007ec:	20000086 	.word	0x20000086

080007f0 <__sinit_lock_release>:
 80007f0:	4801      	ldr	r0, [pc, #4]	; (80007f8 <__sinit_lock_release+0x8>)
 80007f2:	f000 b8a2 	b.w	800093a <__retarget_lock_release_recursive>
 80007f6:	bf00      	nop
 80007f8:	20000086 	.word	0x20000086

080007fc <__sinit>:
 80007fc:	b510      	push	{r4, lr}
 80007fe:	4604      	mov	r4, r0
 8000800:	f7ff fff0 	bl	80007e4 <__sinit_lock_acquire>
 8000804:	69a3      	ldr	r3, [r4, #24]
 8000806:	b11b      	cbz	r3, 8000810 <__sinit+0x14>
 8000808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800080c:	f7ff bff0 	b.w	80007f0 <__sinit_lock_release>
 8000810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000814:	6523      	str	r3, [r4, #80]	; 0x50
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <__sinit+0x68>)
 8000818:	4a13      	ldr	r2, [pc, #76]	; (8000868 <__sinit+0x6c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	62a2      	str	r2, [r4, #40]	; 0x28
 800081e:	42a3      	cmp	r3, r4
 8000820:	bf04      	itt	eq
 8000822:	2301      	moveq	r3, #1
 8000824:	61a3      	streq	r3, [r4, #24]
 8000826:	4620      	mov	r0, r4
 8000828:	f000 f820 	bl	800086c <__sfp>
 800082c:	6060      	str	r0, [r4, #4]
 800082e:	4620      	mov	r0, r4
 8000830:	f000 f81c 	bl	800086c <__sfp>
 8000834:	60a0      	str	r0, [r4, #8]
 8000836:	4620      	mov	r0, r4
 8000838:	f000 f818 	bl	800086c <__sfp>
 800083c:	2200      	movs	r2, #0
 800083e:	60e0      	str	r0, [r4, #12]
 8000840:	2104      	movs	r1, #4
 8000842:	6860      	ldr	r0, [r4, #4]
 8000844:	f7ff ff82 	bl	800074c <std>
 8000848:	68a0      	ldr	r0, [r4, #8]
 800084a:	2201      	movs	r2, #1
 800084c:	2109      	movs	r1, #9
 800084e:	f7ff ff7d 	bl	800074c <std>
 8000852:	68e0      	ldr	r0, [r4, #12]
 8000854:	2202      	movs	r2, #2
 8000856:	2112      	movs	r1, #18
 8000858:	f7ff ff78 	bl	800074c <std>
 800085c:	2301      	movs	r3, #1
 800085e:	61a3      	str	r3, [r4, #24]
 8000860:	e7d2      	b.n	8000808 <__sinit+0xc>
 8000862:	bf00      	nop
 8000864:	08001664 	.word	0x08001664
 8000868:	08000795 	.word	0x08000795

0800086c <__sfp>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	4607      	mov	r7, r0
 8000870:	f7ff ffac 	bl	80007cc <__sfp_lock_acquire>
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <__sfp+0x84>)
 8000876:	681e      	ldr	r6, [r3, #0]
 8000878:	69b3      	ldr	r3, [r6, #24]
 800087a:	b913      	cbnz	r3, 8000882 <__sfp+0x16>
 800087c:	4630      	mov	r0, r6
 800087e:	f7ff ffbd 	bl	80007fc <__sinit>
 8000882:	3648      	adds	r6, #72	; 0x48
 8000884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000888:	3b01      	subs	r3, #1
 800088a:	d503      	bpl.n	8000894 <__sfp+0x28>
 800088c:	6833      	ldr	r3, [r6, #0]
 800088e:	b30b      	cbz	r3, 80008d4 <__sfp+0x68>
 8000890:	6836      	ldr	r6, [r6, #0]
 8000892:	e7f7      	b.n	8000884 <__sfp+0x18>
 8000894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000898:	b9d5      	cbnz	r5, 80008d0 <__sfp+0x64>
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <__sfp+0x88>)
 800089c:	60e3      	str	r3, [r4, #12]
 800089e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008a2:	6665      	str	r5, [r4, #100]	; 0x64
 80008a4:	f000 f847 	bl	8000936 <__retarget_lock_init_recursive>
 80008a8:	f7ff ff96 	bl	80007d8 <__sfp_lock_release>
 80008ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008b4:	6025      	str	r5, [r4, #0]
 80008b6:	61a5      	str	r5, [r4, #24]
 80008b8:	2208      	movs	r2, #8
 80008ba:	4629      	mov	r1, r5
 80008bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008c0:	f7ff ff24 	bl	800070c <memset>
 80008c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008cc:	4620      	mov	r0, r4
 80008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d0:	3468      	adds	r4, #104	; 0x68
 80008d2:	e7d9      	b.n	8000888 <__sfp+0x1c>
 80008d4:	2104      	movs	r1, #4
 80008d6:	4638      	mov	r0, r7
 80008d8:	f7ff ff62 	bl	80007a0 <__sfmoreglue>
 80008dc:	4604      	mov	r4, r0
 80008de:	6030      	str	r0, [r6, #0]
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d1d5      	bne.n	8000890 <__sfp+0x24>
 80008e4:	f7ff ff78 	bl	80007d8 <__sfp_lock_release>
 80008e8:	230c      	movs	r3, #12
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	e7ee      	b.n	80008cc <__sfp+0x60>
 80008ee:	bf00      	nop
 80008f0:	08001664 	.word	0x08001664
 80008f4:	ffff0001 	.word	0xffff0001

080008f8 <_fwalk_reent>:
 80008f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008fc:	4606      	mov	r6, r0
 80008fe:	4688      	mov	r8, r1
 8000900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000904:	2700      	movs	r7, #0
 8000906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800090a:	f1b9 0901 	subs.w	r9, r9, #1
 800090e:	d505      	bpl.n	800091c <_fwalk_reent+0x24>
 8000910:	6824      	ldr	r4, [r4, #0]
 8000912:	2c00      	cmp	r4, #0
 8000914:	d1f7      	bne.n	8000906 <_fwalk_reent+0xe>
 8000916:	4638      	mov	r0, r7
 8000918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800091c:	89ab      	ldrh	r3, [r5, #12]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d907      	bls.n	8000932 <_fwalk_reent+0x3a>
 8000922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000926:	3301      	adds	r3, #1
 8000928:	d003      	beq.n	8000932 <_fwalk_reent+0x3a>
 800092a:	4629      	mov	r1, r5
 800092c:	4630      	mov	r0, r6
 800092e:	47c0      	blx	r8
 8000930:	4307      	orrs	r7, r0
 8000932:	3568      	adds	r5, #104	; 0x68
 8000934:	e7e9      	b.n	800090a <_fwalk_reent+0x12>

08000936 <__retarget_lock_init_recursive>:
 8000936:	4770      	bx	lr

08000938 <__retarget_lock_acquire_recursive>:
 8000938:	4770      	bx	lr

0800093a <__retarget_lock_release_recursive>:
 800093a:	4770      	bx	lr

0800093c <sbrk_aligned>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	4e0e      	ldr	r6, [pc, #56]	; (8000978 <sbrk_aligned+0x3c>)
 8000940:	460c      	mov	r4, r1
 8000942:	6831      	ldr	r1, [r6, #0]
 8000944:	4605      	mov	r5, r0
 8000946:	b911      	cbnz	r1, 800094e <sbrk_aligned+0x12>
 8000948:	f000 fb7a 	bl	8001040 <_sbrk_r>
 800094c:	6030      	str	r0, [r6, #0]
 800094e:	4621      	mov	r1, r4
 8000950:	4628      	mov	r0, r5
 8000952:	f000 fb75 	bl	8001040 <_sbrk_r>
 8000956:	1c43      	adds	r3, r0, #1
 8000958:	d00a      	beq.n	8000970 <sbrk_aligned+0x34>
 800095a:	1cc4      	adds	r4, r0, #3
 800095c:	f024 0403 	bic.w	r4, r4, #3
 8000960:	42a0      	cmp	r0, r4
 8000962:	d007      	beq.n	8000974 <sbrk_aligned+0x38>
 8000964:	1a21      	subs	r1, r4, r0
 8000966:	4628      	mov	r0, r5
 8000968:	f000 fb6a 	bl	8001040 <_sbrk_r>
 800096c:	3001      	adds	r0, #1
 800096e:	d101      	bne.n	8000974 <sbrk_aligned+0x38>
 8000970:	f04f 34ff 	mov.w	r4, #4294967295
 8000974:	4620      	mov	r0, r4
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	2000008c 	.word	0x2000008c

0800097c <_malloc_r>:
 800097c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000980:	1ccd      	adds	r5, r1, #3
 8000982:	f025 0503 	bic.w	r5, r5, #3
 8000986:	3508      	adds	r5, #8
 8000988:	2d0c      	cmp	r5, #12
 800098a:	bf38      	it	cc
 800098c:	250c      	movcc	r5, #12
 800098e:	2d00      	cmp	r5, #0
 8000990:	4607      	mov	r7, r0
 8000992:	db01      	blt.n	8000998 <_malloc_r+0x1c>
 8000994:	42a9      	cmp	r1, r5
 8000996:	d905      	bls.n	80009a4 <_malloc_r+0x28>
 8000998:	230c      	movs	r3, #12
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	2600      	movs	r6, #0
 800099e:	4630      	mov	r0, r6
 80009a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a4:	4e2e      	ldr	r6, [pc, #184]	; (8000a60 <_malloc_r+0xe4>)
 80009a6:	f000 fdbb 	bl	8001520 <__malloc_lock>
 80009aa:	6833      	ldr	r3, [r6, #0]
 80009ac:	461c      	mov	r4, r3
 80009ae:	bb34      	cbnz	r4, 80009fe <_malloc_r+0x82>
 80009b0:	4629      	mov	r1, r5
 80009b2:	4638      	mov	r0, r7
 80009b4:	f7ff ffc2 	bl	800093c <sbrk_aligned>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	4604      	mov	r4, r0
 80009bc:	d14d      	bne.n	8000a5a <_malloc_r+0xde>
 80009be:	6834      	ldr	r4, [r6, #0]
 80009c0:	4626      	mov	r6, r4
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d140      	bne.n	8000a48 <_malloc_r+0xcc>
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	4631      	mov	r1, r6
 80009ca:	4638      	mov	r0, r7
 80009cc:	eb04 0803 	add.w	r8, r4, r3
 80009d0:	f000 fb36 	bl	8001040 <_sbrk_r>
 80009d4:	4580      	cmp	r8, r0
 80009d6:	d13a      	bne.n	8000a4e <_malloc_r+0xd2>
 80009d8:	6821      	ldr	r1, [r4, #0]
 80009da:	3503      	adds	r5, #3
 80009dc:	1a6d      	subs	r5, r5, r1
 80009de:	f025 0503 	bic.w	r5, r5, #3
 80009e2:	3508      	adds	r5, #8
 80009e4:	2d0c      	cmp	r5, #12
 80009e6:	bf38      	it	cc
 80009e8:	250c      	movcc	r5, #12
 80009ea:	4629      	mov	r1, r5
 80009ec:	4638      	mov	r0, r7
 80009ee:	f7ff ffa5 	bl	800093c <sbrk_aligned>
 80009f2:	3001      	adds	r0, #1
 80009f4:	d02b      	beq.n	8000a4e <_malloc_r+0xd2>
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	442b      	add	r3, r5
 80009fa:	6023      	str	r3, [r4, #0]
 80009fc:	e00e      	b.n	8000a1c <_malloc_r+0xa0>
 80009fe:	6822      	ldr	r2, [r4, #0]
 8000a00:	1b52      	subs	r2, r2, r5
 8000a02:	d41e      	bmi.n	8000a42 <_malloc_r+0xc6>
 8000a04:	2a0b      	cmp	r2, #11
 8000a06:	d916      	bls.n	8000a36 <_malloc_r+0xba>
 8000a08:	1961      	adds	r1, r4, r5
 8000a0a:	42a3      	cmp	r3, r4
 8000a0c:	6025      	str	r5, [r4, #0]
 8000a0e:	bf18      	it	ne
 8000a10:	6059      	strne	r1, [r3, #4]
 8000a12:	6863      	ldr	r3, [r4, #4]
 8000a14:	bf08      	it	eq
 8000a16:	6031      	streq	r1, [r6, #0]
 8000a18:	5162      	str	r2, [r4, r5]
 8000a1a:	604b      	str	r3, [r1, #4]
 8000a1c:	4638      	mov	r0, r7
 8000a1e:	f104 060b 	add.w	r6, r4, #11
 8000a22:	f000 fd83 	bl	800152c <__malloc_unlock>
 8000a26:	f026 0607 	bic.w	r6, r6, #7
 8000a2a:	1d23      	adds	r3, r4, #4
 8000a2c:	1af2      	subs	r2, r6, r3
 8000a2e:	d0b6      	beq.n	800099e <_malloc_r+0x22>
 8000a30:	1b9b      	subs	r3, r3, r6
 8000a32:	50a3      	str	r3, [r4, r2]
 8000a34:	e7b3      	b.n	800099e <_malloc_r+0x22>
 8000a36:	6862      	ldr	r2, [r4, #4]
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	bf0c      	ite	eq
 8000a3c:	6032      	streq	r2, [r6, #0]
 8000a3e:	605a      	strne	r2, [r3, #4]
 8000a40:	e7ec      	b.n	8000a1c <_malloc_r+0xa0>
 8000a42:	4623      	mov	r3, r4
 8000a44:	6864      	ldr	r4, [r4, #4]
 8000a46:	e7b2      	b.n	80009ae <_malloc_r+0x32>
 8000a48:	4634      	mov	r4, r6
 8000a4a:	6876      	ldr	r6, [r6, #4]
 8000a4c:	e7b9      	b.n	80009c2 <_malloc_r+0x46>
 8000a4e:	230c      	movs	r3, #12
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4638      	mov	r0, r7
 8000a54:	f000 fd6a 	bl	800152c <__malloc_unlock>
 8000a58:	e7a1      	b.n	800099e <_malloc_r+0x22>
 8000a5a:	6025      	str	r5, [r4, #0]
 8000a5c:	e7de      	b.n	8000a1c <_malloc_r+0xa0>
 8000a5e:	bf00      	nop
 8000a60:	20000088 	.word	0x20000088

08000a64 <__sfputc_r>:
 8000a64:	6893      	ldr	r3, [r2, #8]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	b410      	push	{r4}
 8000a6c:	6093      	str	r3, [r2, #8]
 8000a6e:	da08      	bge.n	8000a82 <__sfputc_r+0x1e>
 8000a70:	6994      	ldr	r4, [r2, #24]
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	db01      	blt.n	8000a7a <__sfputc_r+0x16>
 8000a76:	290a      	cmp	r1, #10
 8000a78:	d103      	bne.n	8000a82 <__sfputc_r+0x1e>
 8000a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a7e:	f000 bb33 	b.w	80010e8 <__swbuf_r>
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	1c58      	adds	r0, r3, #1
 8000a86:	6010      	str	r0, [r2, #0]
 8000a88:	7019      	strb	r1, [r3, #0]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <__sfputs_r>:
 8000a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a94:	4606      	mov	r6, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	4614      	mov	r4, r2
 8000a9a:	18d5      	adds	r5, r2, r3
 8000a9c:	42ac      	cmp	r4, r5
 8000a9e:	d101      	bne.n	8000aa4 <__sfputs_r+0x12>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e007      	b.n	8000ab4 <__sfputs_r+0x22>
 8000aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aa8:	463a      	mov	r2, r7
 8000aaa:	4630      	mov	r0, r6
 8000aac:	f7ff ffda 	bl	8000a64 <__sfputc_r>
 8000ab0:	1c43      	adds	r3, r0, #1
 8000ab2:	d1f3      	bne.n	8000a9c <__sfputs_r+0xa>
 8000ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ab8 <_vfiprintf_r>:
 8000ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000abc:	460d      	mov	r5, r1
 8000abe:	b09d      	sub	sp, #116	; 0x74
 8000ac0:	4614      	mov	r4, r2
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	b118      	cbz	r0, 8000ad0 <_vfiprintf_r+0x18>
 8000ac8:	6983      	ldr	r3, [r0, #24]
 8000aca:	b90b      	cbnz	r3, 8000ad0 <_vfiprintf_r+0x18>
 8000acc:	f7ff fe96 	bl	80007fc <__sinit>
 8000ad0:	4b89      	ldr	r3, [pc, #548]	; (8000cf8 <_vfiprintf_r+0x240>)
 8000ad2:	429d      	cmp	r5, r3
 8000ad4:	d11b      	bne.n	8000b0e <_vfiprintf_r+0x56>
 8000ad6:	6875      	ldr	r5, [r6, #4]
 8000ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ada:	07d9      	lsls	r1, r3, #31
 8000adc:	d405      	bmi.n	8000aea <_vfiprintf_r+0x32>
 8000ade:	89ab      	ldrh	r3, [r5, #12]
 8000ae0:	059a      	lsls	r2, r3, #22
 8000ae2:	d402      	bmi.n	8000aea <_vfiprintf_r+0x32>
 8000ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ae6:	f7ff ff27 	bl	8000938 <__retarget_lock_acquire_recursive>
 8000aea:	89ab      	ldrh	r3, [r5, #12]
 8000aec:	071b      	lsls	r3, r3, #28
 8000aee:	d501      	bpl.n	8000af4 <_vfiprintf_r+0x3c>
 8000af0:	692b      	ldr	r3, [r5, #16]
 8000af2:	b9eb      	cbnz	r3, 8000b30 <_vfiprintf_r+0x78>
 8000af4:	4629      	mov	r1, r5
 8000af6:	4630      	mov	r0, r6
 8000af8:	f000 fb5a 	bl	80011b0 <__swsetup_r>
 8000afc:	b1c0      	cbz	r0, 8000b30 <_vfiprintf_r+0x78>
 8000afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b00:	07dc      	lsls	r4, r3, #31
 8000b02:	d50e      	bpl.n	8000b22 <_vfiprintf_r+0x6a>
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	b01d      	add	sp, #116	; 0x74
 8000b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0e:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <_vfiprintf_r+0x244>)
 8000b10:	429d      	cmp	r5, r3
 8000b12:	d101      	bne.n	8000b18 <_vfiprintf_r+0x60>
 8000b14:	68b5      	ldr	r5, [r6, #8]
 8000b16:	e7df      	b.n	8000ad8 <_vfiprintf_r+0x20>
 8000b18:	4b79      	ldr	r3, [pc, #484]	; (8000d00 <_vfiprintf_r+0x248>)
 8000b1a:	429d      	cmp	r5, r3
 8000b1c:	bf08      	it	eq
 8000b1e:	68f5      	ldreq	r5, [r6, #12]
 8000b20:	e7da      	b.n	8000ad8 <_vfiprintf_r+0x20>
 8000b22:	89ab      	ldrh	r3, [r5, #12]
 8000b24:	0598      	lsls	r0, r3, #22
 8000b26:	d4ed      	bmi.n	8000b04 <_vfiprintf_r+0x4c>
 8000b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b2a:	f7ff ff06 	bl	800093a <__retarget_lock_release_recursive>
 8000b2e:	e7e9      	b.n	8000b04 <_vfiprintf_r+0x4c>
 8000b30:	2300      	movs	r3, #0
 8000b32:	9309      	str	r3, [sp, #36]	; 0x24
 8000b34:	2320      	movs	r3, #32
 8000b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b3e:	2330      	movs	r3, #48	; 0x30
 8000b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d04 <_vfiprintf_r+0x24c>
 8000b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b48:	f04f 0901 	mov.w	r9, #1
 8000b4c:	4623      	mov	r3, r4
 8000b4e:	469a      	mov	sl, r3
 8000b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b54:	b10a      	cbz	r2, 8000b5a <_vfiprintf_r+0xa2>
 8000b56:	2a25      	cmp	r2, #37	; 0x25
 8000b58:	d1f9      	bne.n	8000b4e <_vfiprintf_r+0x96>
 8000b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8000b5e:	d00b      	beq.n	8000b78 <_vfiprintf_r+0xc0>
 8000b60:	465b      	mov	r3, fp
 8000b62:	4622      	mov	r2, r4
 8000b64:	4629      	mov	r1, r5
 8000b66:	4630      	mov	r0, r6
 8000b68:	f7ff ff93 	bl	8000a92 <__sfputs_r>
 8000b6c:	3001      	adds	r0, #1
 8000b6e:	f000 80aa 	beq.w	8000cc6 <_vfiprintf_r+0x20e>
 8000b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b74:	445a      	add	r2, fp
 8000b76:	9209      	str	r2, [sp, #36]	; 0x24
 8000b78:	f89a 3000 	ldrb.w	r3, [sl]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 80a2 	beq.w	8000cc6 <_vfiprintf_r+0x20e>
 8000b82:	2300      	movs	r3, #0
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b8c:	f10a 0a01 	add.w	sl, sl, #1
 8000b90:	9304      	str	r3, [sp, #16]
 8000b92:	9307      	str	r3, [sp, #28]
 8000b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b98:	931a      	str	r3, [sp, #104]	; 0x68
 8000b9a:	4654      	mov	r4, sl
 8000b9c:	2205      	movs	r2, #5
 8000b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba2:	4858      	ldr	r0, [pc, #352]	; (8000d04 <_vfiprintf_r+0x24c>)
 8000ba4:	f7ff fb34 	bl	8000210 <memchr>
 8000ba8:	9a04      	ldr	r2, [sp, #16]
 8000baa:	b9d8      	cbnz	r0, 8000be4 <_vfiprintf_r+0x12c>
 8000bac:	06d1      	lsls	r1, r2, #27
 8000bae:	bf44      	itt	mi
 8000bb0:	2320      	movmi	r3, #32
 8000bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bb6:	0713      	lsls	r3, r2, #28
 8000bb8:	bf44      	itt	mi
 8000bba:	232b      	movmi	r3, #43	; 0x2b
 8000bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8000bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8000bc6:	d015      	beq.n	8000bf4 <_vfiprintf_r+0x13c>
 8000bc8:	9a07      	ldr	r2, [sp, #28]
 8000bca:	4654      	mov	r4, sl
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f04f 0c0a 	mov.w	ip, #10
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bd8:	3b30      	subs	r3, #48	; 0x30
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	d94e      	bls.n	8000c7c <_vfiprintf_r+0x1c4>
 8000bde:	b1b0      	cbz	r0, 8000c0e <_vfiprintf_r+0x156>
 8000be0:	9207      	str	r2, [sp, #28]
 8000be2:	e014      	b.n	8000c0e <_vfiprintf_r+0x156>
 8000be4:	eba0 0308 	sub.w	r3, r0, r8
 8000be8:	fa09 f303 	lsl.w	r3, r9, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	9304      	str	r3, [sp, #16]
 8000bf0:	46a2      	mov	sl, r4
 8000bf2:	e7d2      	b.n	8000b9a <_vfiprintf_r+0xe2>
 8000bf4:	9b03      	ldr	r3, [sp, #12]
 8000bf6:	1d19      	adds	r1, r3, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	9103      	str	r1, [sp, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bfbb      	ittet	lt
 8000c00:	425b      	neglt	r3, r3
 8000c02:	f042 0202 	orrlt.w	r2, r2, #2
 8000c06:	9307      	strge	r3, [sp, #28]
 8000c08:	9307      	strlt	r3, [sp, #28]
 8000c0a:	bfb8      	it	lt
 8000c0c:	9204      	strlt	r2, [sp, #16]
 8000c0e:	7823      	ldrb	r3, [r4, #0]
 8000c10:	2b2e      	cmp	r3, #46	; 0x2e
 8000c12:	d10c      	bne.n	8000c2e <_vfiprintf_r+0x176>
 8000c14:	7863      	ldrb	r3, [r4, #1]
 8000c16:	2b2a      	cmp	r3, #42	; 0x2a
 8000c18:	d135      	bne.n	8000c86 <_vfiprintf_r+0x1ce>
 8000c1a:	9b03      	ldr	r3, [sp, #12]
 8000c1c:	1d1a      	adds	r2, r3, #4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	9203      	str	r2, [sp, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bfb8      	it	lt
 8000c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c2a:	3402      	adds	r4, #2
 8000c2c:	9305      	str	r3, [sp, #20]
 8000c2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d14 <_vfiprintf_r+0x25c>
 8000c32:	7821      	ldrb	r1, [r4, #0]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4650      	mov	r0, sl
 8000c38:	f7ff faea 	bl	8000210 <memchr>
 8000c3c:	b140      	cbz	r0, 8000c50 <_vfiprintf_r+0x198>
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	eba0 000a 	sub.w	r0, r0, sl
 8000c44:	fa03 f000 	lsl.w	r0, r3, r0
 8000c48:	9b04      	ldr	r3, [sp, #16]
 8000c4a:	4303      	orrs	r3, r0
 8000c4c:	3401      	adds	r4, #1
 8000c4e:	9304      	str	r3, [sp, #16]
 8000c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c54:	482c      	ldr	r0, [pc, #176]	; (8000d08 <_vfiprintf_r+0x250>)
 8000c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	f7ff fad8 	bl	8000210 <memchr>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d03f      	beq.n	8000ce4 <_vfiprintf_r+0x22c>
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <_vfiprintf_r+0x254>)
 8000c66:	bb1b      	cbnz	r3, 8000cb0 <_vfiprintf_r+0x1f8>
 8000c68:	9b03      	ldr	r3, [sp, #12]
 8000c6a:	3307      	adds	r3, #7
 8000c6c:	f023 0307 	bic.w	r3, r3, #7
 8000c70:	3308      	adds	r3, #8
 8000c72:	9303      	str	r3, [sp, #12]
 8000c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c76:	443b      	add	r3, r7
 8000c78:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7a:	e767      	b.n	8000b4c <_vfiprintf_r+0x94>
 8000c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c80:	460c      	mov	r4, r1
 8000c82:	2001      	movs	r0, #1
 8000c84:	e7a5      	b.n	8000bd2 <_vfiprintf_r+0x11a>
 8000c86:	2300      	movs	r3, #0
 8000c88:	3401      	adds	r4, #1
 8000c8a:	9305      	str	r3, [sp, #20]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 0c0a 	mov.w	ip, #10
 8000c92:	4620      	mov	r0, r4
 8000c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c98:	3a30      	subs	r2, #48	; 0x30
 8000c9a:	2a09      	cmp	r2, #9
 8000c9c:	d903      	bls.n	8000ca6 <_vfiprintf_r+0x1ee>
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0c5      	beq.n	8000c2e <_vfiprintf_r+0x176>
 8000ca2:	9105      	str	r1, [sp, #20]
 8000ca4:	e7c3      	b.n	8000c2e <_vfiprintf_r+0x176>
 8000ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000caa:	4604      	mov	r4, r0
 8000cac:	2301      	movs	r3, #1
 8000cae:	e7f0      	b.n	8000c92 <_vfiprintf_r+0x1da>
 8000cb0:	ab03      	add	r3, sp, #12
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	462a      	mov	r2, r5
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <_vfiprintf_r+0x258>)
 8000cb8:	a904      	add	r1, sp, #16
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f3af 8000 	nop.w
 8000cc0:	4607      	mov	r7, r0
 8000cc2:	1c78      	adds	r0, r7, #1
 8000cc4:	d1d6      	bne.n	8000c74 <_vfiprintf_r+0x1bc>
 8000cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cc8:	07d9      	lsls	r1, r3, #31
 8000cca:	d405      	bmi.n	8000cd8 <_vfiprintf_r+0x220>
 8000ccc:	89ab      	ldrh	r3, [r5, #12]
 8000cce:	059a      	lsls	r2, r3, #22
 8000cd0:	d402      	bmi.n	8000cd8 <_vfiprintf_r+0x220>
 8000cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cd4:	f7ff fe31 	bl	800093a <__retarget_lock_release_recursive>
 8000cd8:	89ab      	ldrh	r3, [r5, #12]
 8000cda:	065b      	lsls	r3, r3, #25
 8000cdc:	f53f af12 	bmi.w	8000b04 <_vfiprintf_r+0x4c>
 8000ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ce2:	e711      	b.n	8000b08 <_vfiprintf_r+0x50>
 8000ce4:	ab03      	add	r3, sp, #12
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	462a      	mov	r2, r5
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <_vfiprintf_r+0x258>)
 8000cec:	a904      	add	r1, sp, #16
 8000cee:	4630      	mov	r0, r6
 8000cf0:	f000 f880 	bl	8000df4 <_printf_i>
 8000cf4:	e7e4      	b.n	8000cc0 <_vfiprintf_r+0x208>
 8000cf6:	bf00      	nop
 8000cf8:	08001688 	.word	0x08001688
 8000cfc:	080016a8 	.word	0x080016a8
 8000d00:	08001668 	.word	0x08001668
 8000d04:	080016c8 	.word	0x080016c8
 8000d08:	080016d2 	.word	0x080016d2
 8000d0c:	00000000 	.word	0x00000000
 8000d10:	08000a93 	.word	0x08000a93
 8000d14:	080016ce 	.word	0x080016ce

08000d18 <_printf_common>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	4616      	mov	r6, r2
 8000d1e:	4699      	mov	r9, r3
 8000d20:	688a      	ldr	r2, [r1, #8]
 8000d22:	690b      	ldr	r3, [r1, #16]
 8000d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	bfb8      	it	lt
 8000d2c:	4613      	movlt	r3, r2
 8000d2e:	6033      	str	r3, [r6, #0]
 8000d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d34:	4607      	mov	r7, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	b10a      	cbz	r2, 8000d3e <_printf_common+0x26>
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	6033      	str	r3, [r6, #0]
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	0699      	lsls	r1, r3, #26
 8000d42:	bf42      	ittt	mi
 8000d44:	6833      	ldrmi	r3, [r6, #0]
 8000d46:	3302      	addmi	r3, #2
 8000d48:	6033      	strmi	r3, [r6, #0]
 8000d4a:	6825      	ldr	r5, [r4, #0]
 8000d4c:	f015 0506 	ands.w	r5, r5, #6
 8000d50:	d106      	bne.n	8000d60 <_printf_common+0x48>
 8000d52:	f104 0a19 	add.w	sl, r4, #25
 8000d56:	68e3      	ldr	r3, [r4, #12]
 8000d58:	6832      	ldr	r2, [r6, #0]
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	dc26      	bgt.n	8000dae <_printf_common+0x96>
 8000d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d64:	1e13      	subs	r3, r2, #0
 8000d66:	6822      	ldr	r2, [r4, #0]
 8000d68:	bf18      	it	ne
 8000d6a:	2301      	movne	r3, #1
 8000d6c:	0692      	lsls	r2, r2, #26
 8000d6e:	d42b      	bmi.n	8000dc8 <_printf_common+0xb0>
 8000d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d74:	4649      	mov	r1, r9
 8000d76:	4638      	mov	r0, r7
 8000d78:	47c0      	blx	r8
 8000d7a:	3001      	adds	r0, #1
 8000d7c:	d01e      	beq.n	8000dbc <_printf_common+0xa4>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	68e5      	ldr	r5, [r4, #12]
 8000d82:	6832      	ldr	r2, [r6, #0]
 8000d84:	f003 0306 	and.w	r3, r3, #6
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	bf08      	it	eq
 8000d8c:	1aad      	subeq	r5, r5, r2
 8000d8e:	68a3      	ldr	r3, [r4, #8]
 8000d90:	6922      	ldr	r2, [r4, #16]
 8000d92:	bf0c      	ite	eq
 8000d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d98:	2500      	movne	r5, #0
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	bfc4      	itt	gt
 8000d9e:	1a9b      	subgt	r3, r3, r2
 8000da0:	18ed      	addgt	r5, r5, r3
 8000da2:	2600      	movs	r6, #0
 8000da4:	341a      	adds	r4, #26
 8000da6:	42b5      	cmp	r5, r6
 8000da8:	d11a      	bne.n	8000de0 <_printf_common+0xc8>
 8000daa:	2000      	movs	r0, #0
 8000dac:	e008      	b.n	8000dc0 <_printf_common+0xa8>
 8000dae:	2301      	movs	r3, #1
 8000db0:	4652      	mov	r2, sl
 8000db2:	4649      	mov	r1, r9
 8000db4:	4638      	mov	r0, r7
 8000db6:	47c0      	blx	r8
 8000db8:	3001      	adds	r0, #1
 8000dba:	d103      	bne.n	8000dc4 <_printf_common+0xac>
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	3501      	adds	r5, #1
 8000dc6:	e7c6      	b.n	8000d56 <_printf_common+0x3e>
 8000dc8:	18e1      	adds	r1, r4, r3
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	2030      	movs	r0, #48	; 0x30
 8000dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dd2:	4422      	add	r2, r4
 8000dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ddc:	3302      	adds	r3, #2
 8000dde:	e7c7      	b.n	8000d70 <_printf_common+0x58>
 8000de0:	2301      	movs	r3, #1
 8000de2:	4622      	mov	r2, r4
 8000de4:	4649      	mov	r1, r9
 8000de6:	4638      	mov	r0, r7
 8000de8:	47c0      	blx	r8
 8000dea:	3001      	adds	r0, #1
 8000dec:	d0e6      	beq.n	8000dbc <_printf_common+0xa4>
 8000dee:	3601      	adds	r6, #1
 8000df0:	e7d9      	b.n	8000da6 <_printf_common+0x8e>
	...

08000df4 <_printf_i>:
 8000df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	7e0f      	ldrb	r7, [r1, #24]
 8000dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dfc:	2f78      	cmp	r7, #120	; 0x78
 8000dfe:	4691      	mov	r9, r2
 8000e00:	4680      	mov	r8, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	469a      	mov	sl, r3
 8000e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e0a:	d807      	bhi.n	8000e1c <_printf_i+0x28>
 8000e0c:	2f62      	cmp	r7, #98	; 0x62
 8000e0e:	d80a      	bhi.n	8000e26 <_printf_i+0x32>
 8000e10:	2f00      	cmp	r7, #0
 8000e12:	f000 80d8 	beq.w	8000fc6 <_printf_i+0x1d2>
 8000e16:	2f58      	cmp	r7, #88	; 0x58
 8000e18:	f000 80a3 	beq.w	8000f62 <_printf_i+0x16e>
 8000e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e24:	e03a      	b.n	8000e9c <_printf_i+0xa8>
 8000e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e2a:	2b15      	cmp	r3, #21
 8000e2c:	d8f6      	bhi.n	8000e1c <_printf_i+0x28>
 8000e2e:	a101      	add	r1, pc, #4	; (adr r1, 8000e34 <_printf_i+0x40>)
 8000e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e34:	08000e8d 	.word	0x08000e8d
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000e1d 	.word	0x08000e1d
 8000e40:	08000e1d 	.word	0x08000e1d
 8000e44:	08000e1d 	.word	0x08000e1d
 8000e48:	08000e1d 	.word	0x08000e1d
 8000e4c:	08000ea1 	.word	0x08000ea1
 8000e50:	08000e1d 	.word	0x08000e1d
 8000e54:	08000e1d 	.word	0x08000e1d
 8000e58:	08000e1d 	.word	0x08000e1d
 8000e5c:	08000e1d 	.word	0x08000e1d
 8000e60:	08000fad 	.word	0x08000fad
 8000e64:	08000ed1 	.word	0x08000ed1
 8000e68:	08000f8f 	.word	0x08000f8f
 8000e6c:	08000e1d 	.word	0x08000e1d
 8000e70:	08000e1d 	.word	0x08000e1d
 8000e74:	08000fcf 	.word	0x08000fcf
 8000e78:	08000e1d 	.word	0x08000e1d
 8000e7c:	08000ed1 	.word	0x08000ed1
 8000e80:	08000e1d 	.word	0x08000e1d
 8000e84:	08000e1d 	.word	0x08000e1d
 8000e88:	08000f97 	.word	0x08000f97
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	602a      	str	r2, [r5, #0]
 8000e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e0a3      	b.n	8000fe8 <_printf_i+0x1f4>
 8000ea0:	6820      	ldr	r0, [r4, #0]
 8000ea2:	6829      	ldr	r1, [r5, #0]
 8000ea4:	0606      	lsls	r6, r0, #24
 8000ea6:	f101 0304 	add.w	r3, r1, #4
 8000eaa:	d50a      	bpl.n	8000ec2 <_printf_i+0xce>
 8000eac:	680e      	ldr	r6, [r1, #0]
 8000eae:	602b      	str	r3, [r5, #0]
 8000eb0:	2e00      	cmp	r6, #0
 8000eb2:	da03      	bge.n	8000ebc <_printf_i+0xc8>
 8000eb4:	232d      	movs	r3, #45	; 0x2d
 8000eb6:	4276      	negs	r6, r6
 8000eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ebc:	485e      	ldr	r0, [pc, #376]	; (8001038 <_printf_i+0x244>)
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	e019      	b.n	8000ef6 <_printf_i+0x102>
 8000ec2:	680e      	ldr	r6, [r1, #0]
 8000ec4:	602b      	str	r3, [r5, #0]
 8000ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000eca:	bf18      	it	ne
 8000ecc:	b236      	sxthne	r6, r6
 8000ece:	e7ef      	b.n	8000eb0 <_printf_i+0xbc>
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	6820      	ldr	r0, [r4, #0]
 8000ed4:	1d19      	adds	r1, r3, #4
 8000ed6:	6029      	str	r1, [r5, #0]
 8000ed8:	0601      	lsls	r1, r0, #24
 8000eda:	d501      	bpl.n	8000ee0 <_printf_i+0xec>
 8000edc:	681e      	ldr	r6, [r3, #0]
 8000ede:	e002      	b.n	8000ee6 <_printf_i+0xf2>
 8000ee0:	0646      	lsls	r6, r0, #25
 8000ee2:	d5fb      	bpl.n	8000edc <_printf_i+0xe8>
 8000ee4:	881e      	ldrh	r6, [r3, #0]
 8000ee6:	4854      	ldr	r0, [pc, #336]	; (8001038 <_printf_i+0x244>)
 8000ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8000eea:	bf0c      	ite	eq
 8000eec:	2308      	moveq	r3, #8
 8000eee:	230a      	movne	r3, #10
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ef6:	6865      	ldr	r5, [r4, #4]
 8000ef8:	60a5      	str	r5, [r4, #8]
 8000efa:	2d00      	cmp	r5, #0
 8000efc:	bfa2      	ittt	ge
 8000efe:	6821      	ldrge	r1, [r4, #0]
 8000f00:	f021 0104 	bicge.w	r1, r1, #4
 8000f04:	6021      	strge	r1, [r4, #0]
 8000f06:	b90e      	cbnz	r6, 8000f0c <_printf_i+0x118>
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d04d      	beq.n	8000fa8 <_printf_i+0x1b4>
 8000f0c:	4615      	mov	r5, r2
 8000f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f12:	fb03 6711 	mls	r7, r3, r1, r6
 8000f16:	5dc7      	ldrb	r7, [r0, r7]
 8000f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f1c:	4637      	mov	r7, r6
 8000f1e:	42bb      	cmp	r3, r7
 8000f20:	460e      	mov	r6, r1
 8000f22:	d9f4      	bls.n	8000f0e <_printf_i+0x11a>
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d10b      	bne.n	8000f40 <_printf_i+0x14c>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	07de      	lsls	r6, r3, #31
 8000f2c:	d508      	bpl.n	8000f40 <_printf_i+0x14c>
 8000f2e:	6923      	ldr	r3, [r4, #16]
 8000f30:	6861      	ldr	r1, [r4, #4]
 8000f32:	4299      	cmp	r1, r3
 8000f34:	bfde      	ittt	le
 8000f36:	2330      	movle	r3, #48	; 0x30
 8000f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f40:	1b52      	subs	r2, r2, r5
 8000f42:	6122      	str	r2, [r4, #16]
 8000f44:	f8cd a000 	str.w	sl, [sp]
 8000f48:	464b      	mov	r3, r9
 8000f4a:	aa03      	add	r2, sp, #12
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	4640      	mov	r0, r8
 8000f50:	f7ff fee2 	bl	8000d18 <_printf_common>
 8000f54:	3001      	adds	r0, #1
 8000f56:	d14c      	bne.n	8000ff2 <_printf_i+0x1fe>
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	b004      	add	sp, #16
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4835      	ldr	r0, [pc, #212]	; (8001038 <_printf_i+0x244>)
 8000f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f68:	6829      	ldr	r1, [r5, #0]
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f70:	6029      	str	r1, [r5, #0]
 8000f72:	061d      	lsls	r5, r3, #24
 8000f74:	d514      	bpl.n	8000fa0 <_printf_i+0x1ac>
 8000f76:	07df      	lsls	r7, r3, #31
 8000f78:	bf44      	itt	mi
 8000f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8000f7e:	6023      	strmi	r3, [r4, #0]
 8000f80:	b91e      	cbnz	r6, 8000f8a <_printf_i+0x196>
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	f023 0320 	bic.w	r3, r3, #32
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	e7b0      	b.n	8000ef0 <_printf_i+0xfc>
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	2378      	movs	r3, #120	; 0x78
 8000f98:	4828      	ldr	r0, [pc, #160]	; (800103c <_printf_i+0x248>)
 8000f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f9e:	e7e3      	b.n	8000f68 <_printf_i+0x174>
 8000fa0:	0659      	lsls	r1, r3, #25
 8000fa2:	bf48      	it	mi
 8000fa4:	b2b6      	uxthmi	r6, r6
 8000fa6:	e7e6      	b.n	8000f76 <_printf_i+0x182>
 8000fa8:	4615      	mov	r5, r2
 8000faa:	e7bb      	b.n	8000f24 <_printf_i+0x130>
 8000fac:	682b      	ldr	r3, [r5, #0]
 8000fae:	6826      	ldr	r6, [r4, #0]
 8000fb0:	6961      	ldr	r1, [r4, #20]
 8000fb2:	1d18      	adds	r0, r3, #4
 8000fb4:	6028      	str	r0, [r5, #0]
 8000fb6:	0635      	lsls	r5, r6, #24
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	d501      	bpl.n	8000fc0 <_printf_i+0x1cc>
 8000fbc:	6019      	str	r1, [r3, #0]
 8000fbe:	e002      	b.n	8000fc6 <_printf_i+0x1d2>
 8000fc0:	0670      	lsls	r0, r6, #25
 8000fc2:	d5fb      	bpl.n	8000fbc <_printf_i+0x1c8>
 8000fc4:	8019      	strh	r1, [r3, #0]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	6123      	str	r3, [r4, #16]
 8000fca:	4615      	mov	r5, r2
 8000fcc:	e7ba      	b.n	8000f44 <_printf_i+0x150>
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	1d1a      	adds	r2, r3, #4
 8000fd2:	602a      	str	r2, [r5, #0]
 8000fd4:	681d      	ldr	r5, [r3, #0]
 8000fd6:	6862      	ldr	r2, [r4, #4]
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff f918 	bl	8000210 <memchr>
 8000fe0:	b108      	cbz	r0, 8000fe6 <_printf_i+0x1f2>
 8000fe2:	1b40      	subs	r0, r0, r5
 8000fe4:	6060      	str	r0, [r4, #4]
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	6123      	str	r3, [r4, #16]
 8000fea:	2300      	movs	r3, #0
 8000fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ff0:	e7a8      	b.n	8000f44 <_printf_i+0x150>
 8000ff2:	6923      	ldr	r3, [r4, #16]
 8000ff4:	462a      	mov	r2, r5
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	47d0      	blx	sl
 8000ffc:	3001      	adds	r0, #1
 8000ffe:	d0ab      	beq.n	8000f58 <_printf_i+0x164>
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	079b      	lsls	r3, r3, #30
 8001004:	d413      	bmi.n	800102e <_printf_i+0x23a>
 8001006:	68e0      	ldr	r0, [r4, #12]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	4298      	cmp	r0, r3
 800100c:	bfb8      	it	lt
 800100e:	4618      	movlt	r0, r3
 8001010:	e7a4      	b.n	8000f5c <_printf_i+0x168>
 8001012:	2301      	movs	r3, #1
 8001014:	4632      	mov	r2, r6
 8001016:	4649      	mov	r1, r9
 8001018:	4640      	mov	r0, r8
 800101a:	47d0      	blx	sl
 800101c:	3001      	adds	r0, #1
 800101e:	d09b      	beq.n	8000f58 <_printf_i+0x164>
 8001020:	3501      	adds	r5, #1
 8001022:	68e3      	ldr	r3, [r4, #12]
 8001024:	9903      	ldr	r1, [sp, #12]
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	42ab      	cmp	r3, r5
 800102a:	dcf2      	bgt.n	8001012 <_printf_i+0x21e>
 800102c:	e7eb      	b.n	8001006 <_printf_i+0x212>
 800102e:	2500      	movs	r5, #0
 8001030:	f104 0619 	add.w	r6, r4, #25
 8001034:	e7f5      	b.n	8001022 <_printf_i+0x22e>
 8001036:	bf00      	nop
 8001038:	080016d9 	.word	0x080016d9
 800103c:	080016ea 	.word	0x080016ea

08001040 <_sbrk_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d06      	ldr	r5, [pc, #24]	; (800105c <_sbrk_r+0x1c>)
 8001044:	2300      	movs	r3, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	f7ff fa3e 	bl	80004cc <_sbrk>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_sbrk_r+0x1a>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_sbrk_r+0x1a>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	20000090 	.word	0x20000090

08001060 <__sread>:
 8001060:	b510      	push	{r4, lr}
 8001062:	460c      	mov	r4, r1
 8001064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001068:	f000 fab2 	bl	80015d0 <_read_r>
 800106c:	2800      	cmp	r0, #0
 800106e:	bfab      	itete	ge
 8001070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001072:	89a3      	ldrhlt	r3, [r4, #12]
 8001074:	181b      	addge	r3, r3, r0
 8001076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800107a:	bfac      	ite	ge
 800107c:	6563      	strge	r3, [r4, #84]	; 0x54
 800107e:	81a3      	strhlt	r3, [r4, #12]
 8001080:	bd10      	pop	{r4, pc}

08001082 <__swrite>:
 8001082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001086:	461f      	mov	r7, r3
 8001088:	898b      	ldrh	r3, [r1, #12]
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	4605      	mov	r5, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4616      	mov	r6, r2
 8001092:	d505      	bpl.n	80010a0 <__swrite+0x1e>
 8001094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001098:	2302      	movs	r3, #2
 800109a:	2200      	movs	r2, #0
 800109c:	f000 f9c8 	bl	8001430 <_lseek_r>
 80010a0:	89a3      	ldrh	r3, [r4, #12]
 80010a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010aa:	81a3      	strh	r3, [r4, #12]
 80010ac:	4632      	mov	r2, r6
 80010ae:	463b      	mov	r3, r7
 80010b0:	4628      	mov	r0, r5
 80010b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b6:	f000 b869 	b.w	800118c <_write_r>

080010ba <__sseek>:
 80010ba:	b510      	push	{r4, lr}
 80010bc:	460c      	mov	r4, r1
 80010be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c2:	f000 f9b5 	bl	8001430 <_lseek_r>
 80010c6:	1c43      	adds	r3, r0, #1
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	bf15      	itete	ne
 80010cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80010ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010d6:	81a3      	strheq	r3, [r4, #12]
 80010d8:	bf18      	it	ne
 80010da:	81a3      	strhne	r3, [r4, #12]
 80010dc:	bd10      	pop	{r4, pc}

080010de <__sclose>:
 80010de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e2:	f000 b8d3 	b.w	800128c <_close_r>
	...

080010e8 <__swbuf_r>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	460e      	mov	r6, r1
 80010ec:	4614      	mov	r4, r2
 80010ee:	4605      	mov	r5, r0
 80010f0:	b118      	cbz	r0, 80010fa <__swbuf_r+0x12>
 80010f2:	6983      	ldr	r3, [r0, #24]
 80010f4:	b90b      	cbnz	r3, 80010fa <__swbuf_r+0x12>
 80010f6:	f7ff fb81 	bl	80007fc <__sinit>
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <__swbuf_r+0x98>)
 80010fc:	429c      	cmp	r4, r3
 80010fe:	d12b      	bne.n	8001158 <__swbuf_r+0x70>
 8001100:	686c      	ldr	r4, [r5, #4]
 8001102:	69a3      	ldr	r3, [r4, #24]
 8001104:	60a3      	str	r3, [r4, #8]
 8001106:	89a3      	ldrh	r3, [r4, #12]
 8001108:	071a      	lsls	r2, r3, #28
 800110a:	d52f      	bpl.n	800116c <__swbuf_r+0x84>
 800110c:	6923      	ldr	r3, [r4, #16]
 800110e:	b36b      	cbz	r3, 800116c <__swbuf_r+0x84>
 8001110:	6923      	ldr	r3, [r4, #16]
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	1ac0      	subs	r0, r0, r3
 8001116:	6963      	ldr	r3, [r4, #20]
 8001118:	b2f6      	uxtb	r6, r6
 800111a:	4283      	cmp	r3, r0
 800111c:	4637      	mov	r7, r6
 800111e:	dc04      	bgt.n	800112a <__swbuf_r+0x42>
 8001120:	4621      	mov	r1, r4
 8001122:	4628      	mov	r0, r5
 8001124:	f000 f948 	bl	80013b8 <_fflush_r>
 8001128:	bb30      	cbnz	r0, 8001178 <__swbuf_r+0x90>
 800112a:	68a3      	ldr	r3, [r4, #8]
 800112c:	3b01      	subs	r3, #1
 800112e:	60a3      	str	r3, [r4, #8]
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	6022      	str	r2, [r4, #0]
 8001136:	701e      	strb	r6, [r3, #0]
 8001138:	6963      	ldr	r3, [r4, #20]
 800113a:	3001      	adds	r0, #1
 800113c:	4283      	cmp	r3, r0
 800113e:	d004      	beq.n	800114a <__swbuf_r+0x62>
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	07db      	lsls	r3, r3, #31
 8001144:	d506      	bpl.n	8001154 <__swbuf_r+0x6c>
 8001146:	2e0a      	cmp	r6, #10
 8001148:	d104      	bne.n	8001154 <__swbuf_r+0x6c>
 800114a:	4621      	mov	r1, r4
 800114c:	4628      	mov	r0, r5
 800114e:	f000 f933 	bl	80013b8 <_fflush_r>
 8001152:	b988      	cbnz	r0, 8001178 <__swbuf_r+0x90>
 8001154:	4638      	mov	r0, r7
 8001156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <__swbuf_r+0x9c>)
 800115a:	429c      	cmp	r4, r3
 800115c:	d101      	bne.n	8001162 <__swbuf_r+0x7a>
 800115e:	68ac      	ldr	r4, [r5, #8]
 8001160:	e7cf      	b.n	8001102 <__swbuf_r+0x1a>
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <__swbuf_r+0xa0>)
 8001164:	429c      	cmp	r4, r3
 8001166:	bf08      	it	eq
 8001168:	68ec      	ldreq	r4, [r5, #12]
 800116a:	e7ca      	b.n	8001102 <__swbuf_r+0x1a>
 800116c:	4621      	mov	r1, r4
 800116e:	4628      	mov	r0, r5
 8001170:	f000 f81e 	bl	80011b0 <__swsetup_r>
 8001174:	2800      	cmp	r0, #0
 8001176:	d0cb      	beq.n	8001110 <__swbuf_r+0x28>
 8001178:	f04f 37ff 	mov.w	r7, #4294967295
 800117c:	e7ea      	b.n	8001154 <__swbuf_r+0x6c>
 800117e:	bf00      	nop
 8001180:	08001688 	.word	0x08001688
 8001184:	080016a8 	.word	0x080016a8
 8001188:	08001668 	.word	0x08001668

0800118c <_write_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4d07      	ldr	r5, [pc, #28]	; (80011ac <_write_r+0x20>)
 8001190:	4604      	mov	r4, r0
 8001192:	4608      	mov	r0, r1
 8001194:	4611      	mov	r1, r2
 8001196:	2200      	movs	r2, #0
 8001198:	602a      	str	r2, [r5, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f7ff f945 	bl	800042a <_write>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_write_r+0x1e>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_write_r+0x1e>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	20000090 	.word	0x20000090

080011b0 <__swsetup_r>:
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <__swsetup_r+0xcc>)
 80011b2:	b570      	push	{r4, r5, r6, lr}
 80011b4:	681d      	ldr	r5, [r3, #0]
 80011b6:	4606      	mov	r6, r0
 80011b8:	460c      	mov	r4, r1
 80011ba:	b125      	cbz	r5, 80011c6 <__swsetup_r+0x16>
 80011bc:	69ab      	ldr	r3, [r5, #24]
 80011be:	b913      	cbnz	r3, 80011c6 <__swsetup_r+0x16>
 80011c0:	4628      	mov	r0, r5
 80011c2:	f7ff fb1b 	bl	80007fc <__sinit>
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <__swsetup_r+0xd0>)
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d10f      	bne.n	80011ec <__swsetup_r+0x3c>
 80011cc:	686c      	ldr	r4, [r5, #4]
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011d4:	0719      	lsls	r1, r3, #28
 80011d6:	d42c      	bmi.n	8001232 <__swsetup_r+0x82>
 80011d8:	06dd      	lsls	r5, r3, #27
 80011da:	d411      	bmi.n	8001200 <__swsetup_r+0x50>
 80011dc:	2309      	movs	r3, #9
 80011de:	6033      	str	r3, [r6, #0]
 80011e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011e4:	81a3      	strh	r3, [r4, #12]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	e03e      	b.n	800126a <__swsetup_r+0xba>
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <__swsetup_r+0xd4>)
 80011ee:	429c      	cmp	r4, r3
 80011f0:	d101      	bne.n	80011f6 <__swsetup_r+0x46>
 80011f2:	68ac      	ldr	r4, [r5, #8]
 80011f4:	e7eb      	b.n	80011ce <__swsetup_r+0x1e>
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <__swsetup_r+0xd8>)
 80011f8:	429c      	cmp	r4, r3
 80011fa:	bf08      	it	eq
 80011fc:	68ec      	ldreq	r4, [r5, #12]
 80011fe:	e7e6      	b.n	80011ce <__swsetup_r+0x1e>
 8001200:	0758      	lsls	r0, r3, #29
 8001202:	d512      	bpl.n	800122a <__swsetup_r+0x7a>
 8001204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001206:	b141      	cbz	r1, 800121a <__swsetup_r+0x6a>
 8001208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800120c:	4299      	cmp	r1, r3
 800120e:	d002      	beq.n	8001216 <__swsetup_r+0x66>
 8001210:	4630      	mov	r0, r6
 8001212:	f000 f991 	bl	8001538 <_free_r>
 8001216:	2300      	movs	r3, #0
 8001218:	6363      	str	r3, [r4, #52]	; 0x34
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001220:	81a3      	strh	r3, [r4, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	6063      	str	r3, [r4, #4]
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	89a3      	ldrh	r3, [r4, #12]
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	b94b      	cbnz	r3, 800124a <__swsetup_r+0x9a>
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800123c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001240:	d003      	beq.n	800124a <__swsetup_r+0x9a>
 8001242:	4621      	mov	r1, r4
 8001244:	4630      	mov	r0, r6
 8001246:	f000 f92b 	bl	80014a0 <__smakebuf_r>
 800124a:	89a0      	ldrh	r0, [r4, #12]
 800124c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001250:	f010 0301 	ands.w	r3, r0, #1
 8001254:	d00a      	beq.n	800126c <__swsetup_r+0xbc>
 8001256:	2300      	movs	r3, #0
 8001258:	60a3      	str	r3, [r4, #8]
 800125a:	6963      	ldr	r3, [r4, #20]
 800125c:	425b      	negs	r3, r3
 800125e:	61a3      	str	r3, [r4, #24]
 8001260:	6923      	ldr	r3, [r4, #16]
 8001262:	b943      	cbnz	r3, 8001276 <__swsetup_r+0xc6>
 8001264:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001268:	d1ba      	bne.n	80011e0 <__swsetup_r+0x30>
 800126a:	bd70      	pop	{r4, r5, r6, pc}
 800126c:	0781      	lsls	r1, r0, #30
 800126e:	bf58      	it	pl
 8001270:	6963      	ldrpl	r3, [r4, #20]
 8001272:	60a3      	str	r3, [r4, #8]
 8001274:	e7f4      	b.n	8001260 <__swsetup_r+0xb0>
 8001276:	2000      	movs	r0, #0
 8001278:	e7f7      	b.n	800126a <__swsetup_r+0xba>
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000
 8001280:	08001688 	.word	0x08001688
 8001284:	080016a8 	.word	0x080016a8
 8001288:	08001668 	.word	0x08001668

0800128c <_close_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4d06      	ldr	r5, [pc, #24]	; (80012a8 <_close_r+0x1c>)
 8001290:	2300      	movs	r3, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	602b      	str	r3, [r5, #0]
 8001298:	f7ff f8e3 	bl	8000462 <_close>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	d102      	bne.n	80012a6 <_close_r+0x1a>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	b103      	cbz	r3, 80012a6 <_close_r+0x1a>
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	bd38      	pop	{r3, r4, r5, pc}
 80012a8:	20000090 	.word	0x20000090

080012ac <__sflush_r>:
 80012ac:	898a      	ldrh	r2, [r1, #12]
 80012ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b2:	4605      	mov	r5, r0
 80012b4:	0710      	lsls	r0, r2, #28
 80012b6:	460c      	mov	r4, r1
 80012b8:	d458      	bmi.n	800136c <__sflush_r+0xc0>
 80012ba:	684b      	ldr	r3, [r1, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	dc05      	bgt.n	80012cc <__sflush_r+0x20>
 80012c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dc02      	bgt.n	80012cc <__sflush_r+0x20>
 80012c6:	2000      	movs	r0, #0
 80012c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	d0f9      	beq.n	80012c6 <__sflush_r+0x1a>
 80012d2:	2300      	movs	r3, #0
 80012d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012d8:	682f      	ldr	r7, [r5, #0]
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	d032      	beq.n	8001344 <__sflush_r+0x98>
 80012de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012e0:	89a3      	ldrh	r3, [r4, #12]
 80012e2:	075a      	lsls	r2, r3, #29
 80012e4:	d505      	bpl.n	80012f2 <__sflush_r+0x46>
 80012e6:	6863      	ldr	r3, [r4, #4]
 80012e8:	1ac0      	subs	r0, r0, r3
 80012ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012ec:	b10b      	cbz	r3, 80012f2 <__sflush_r+0x46>
 80012ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f0:	1ac0      	subs	r0, r0, r3
 80012f2:	2300      	movs	r3, #0
 80012f4:	4602      	mov	r2, r0
 80012f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012f8:	6a21      	ldr	r1, [r4, #32]
 80012fa:	4628      	mov	r0, r5
 80012fc:	47b0      	blx	r6
 80012fe:	1c43      	adds	r3, r0, #1
 8001300:	89a3      	ldrh	r3, [r4, #12]
 8001302:	d106      	bne.n	8001312 <__sflush_r+0x66>
 8001304:	6829      	ldr	r1, [r5, #0]
 8001306:	291d      	cmp	r1, #29
 8001308:	d82c      	bhi.n	8001364 <__sflush_r+0xb8>
 800130a:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <__sflush_r+0x108>)
 800130c:	40ca      	lsrs	r2, r1
 800130e:	07d6      	lsls	r6, r2, #31
 8001310:	d528      	bpl.n	8001364 <__sflush_r+0xb8>
 8001312:	2200      	movs	r2, #0
 8001314:	6062      	str	r2, [r4, #4]
 8001316:	04d9      	lsls	r1, r3, #19
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	6022      	str	r2, [r4, #0]
 800131c:	d504      	bpl.n	8001328 <__sflush_r+0x7c>
 800131e:	1c42      	adds	r2, r0, #1
 8001320:	d101      	bne.n	8001326 <__sflush_r+0x7a>
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	b903      	cbnz	r3, 8001328 <__sflush_r+0x7c>
 8001326:	6560      	str	r0, [r4, #84]	; 0x54
 8001328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800132a:	602f      	str	r7, [r5, #0]
 800132c:	2900      	cmp	r1, #0
 800132e:	d0ca      	beq.n	80012c6 <__sflush_r+0x1a>
 8001330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001334:	4299      	cmp	r1, r3
 8001336:	d002      	beq.n	800133e <__sflush_r+0x92>
 8001338:	4628      	mov	r0, r5
 800133a:	f000 f8fd 	bl	8001538 <_free_r>
 800133e:	2000      	movs	r0, #0
 8001340:	6360      	str	r0, [r4, #52]	; 0x34
 8001342:	e7c1      	b.n	80012c8 <__sflush_r+0x1c>
 8001344:	6a21      	ldr	r1, [r4, #32]
 8001346:	2301      	movs	r3, #1
 8001348:	4628      	mov	r0, r5
 800134a:	47b0      	blx	r6
 800134c:	1c41      	adds	r1, r0, #1
 800134e:	d1c7      	bne.n	80012e0 <__sflush_r+0x34>
 8001350:	682b      	ldr	r3, [r5, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0c4      	beq.n	80012e0 <__sflush_r+0x34>
 8001356:	2b1d      	cmp	r3, #29
 8001358:	d001      	beq.n	800135e <__sflush_r+0xb2>
 800135a:	2b16      	cmp	r3, #22
 800135c:	d101      	bne.n	8001362 <__sflush_r+0xb6>
 800135e:	602f      	str	r7, [r5, #0]
 8001360:	e7b1      	b.n	80012c6 <__sflush_r+0x1a>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001368:	81a3      	strh	r3, [r4, #12]
 800136a:	e7ad      	b.n	80012c8 <__sflush_r+0x1c>
 800136c:	690f      	ldr	r7, [r1, #16]
 800136e:	2f00      	cmp	r7, #0
 8001370:	d0a9      	beq.n	80012c6 <__sflush_r+0x1a>
 8001372:	0793      	lsls	r3, r2, #30
 8001374:	680e      	ldr	r6, [r1, #0]
 8001376:	bf08      	it	eq
 8001378:	694b      	ldreq	r3, [r1, #20]
 800137a:	600f      	str	r7, [r1, #0]
 800137c:	bf18      	it	ne
 800137e:	2300      	movne	r3, #0
 8001380:	eba6 0807 	sub.w	r8, r6, r7
 8001384:	608b      	str	r3, [r1, #8]
 8001386:	f1b8 0f00 	cmp.w	r8, #0
 800138a:	dd9c      	ble.n	80012c6 <__sflush_r+0x1a>
 800138c:	6a21      	ldr	r1, [r4, #32]
 800138e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001390:	4643      	mov	r3, r8
 8001392:	463a      	mov	r2, r7
 8001394:	4628      	mov	r0, r5
 8001396:	47b0      	blx	r6
 8001398:	2800      	cmp	r0, #0
 800139a:	dc06      	bgt.n	80013aa <__sflush_r+0xfe>
 800139c:	89a3      	ldrh	r3, [r4, #12]
 800139e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	e78e      	b.n	80012c8 <__sflush_r+0x1c>
 80013aa:	4407      	add	r7, r0
 80013ac:	eba8 0800 	sub.w	r8, r8, r0
 80013b0:	e7e9      	b.n	8001386 <__sflush_r+0xda>
 80013b2:	bf00      	nop
 80013b4:	20400001 	.word	0x20400001

080013b8 <_fflush_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	690b      	ldr	r3, [r1, #16]
 80013bc:	4605      	mov	r5, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	b913      	cbnz	r3, 80013c8 <_fflush_r+0x10>
 80013c2:	2500      	movs	r5, #0
 80013c4:	4628      	mov	r0, r5
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	b118      	cbz	r0, 80013d2 <_fflush_r+0x1a>
 80013ca:	6983      	ldr	r3, [r0, #24]
 80013cc:	b90b      	cbnz	r3, 80013d2 <_fflush_r+0x1a>
 80013ce:	f7ff fa15 	bl	80007fc <__sinit>
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <_fflush_r+0x6c>)
 80013d4:	429c      	cmp	r4, r3
 80013d6:	d11b      	bne.n	8001410 <_fflush_r+0x58>
 80013d8:	686c      	ldr	r4, [r5, #4]
 80013da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0ef      	beq.n	80013c2 <_fflush_r+0xa>
 80013e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013e4:	07d0      	lsls	r0, r2, #31
 80013e6:	d404      	bmi.n	80013f2 <_fflush_r+0x3a>
 80013e8:	0599      	lsls	r1, r3, #22
 80013ea:	d402      	bmi.n	80013f2 <_fflush_r+0x3a>
 80013ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ee:	f7ff faa3 	bl	8000938 <__retarget_lock_acquire_recursive>
 80013f2:	4628      	mov	r0, r5
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff ff59 	bl	80012ac <__sflush_r>
 80013fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013fc:	07da      	lsls	r2, r3, #31
 80013fe:	4605      	mov	r5, r0
 8001400:	d4e0      	bmi.n	80013c4 <_fflush_r+0xc>
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	059b      	lsls	r3, r3, #22
 8001406:	d4dd      	bmi.n	80013c4 <_fflush_r+0xc>
 8001408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800140a:	f7ff fa96 	bl	800093a <__retarget_lock_release_recursive>
 800140e:	e7d9      	b.n	80013c4 <_fflush_r+0xc>
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <_fflush_r+0x70>)
 8001412:	429c      	cmp	r4, r3
 8001414:	d101      	bne.n	800141a <_fflush_r+0x62>
 8001416:	68ac      	ldr	r4, [r5, #8]
 8001418:	e7df      	b.n	80013da <_fflush_r+0x22>
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <_fflush_r+0x74>)
 800141c:	429c      	cmp	r4, r3
 800141e:	bf08      	it	eq
 8001420:	68ec      	ldreq	r4, [r5, #12]
 8001422:	e7da      	b.n	80013da <_fflush_r+0x22>
 8001424:	08001688 	.word	0x08001688
 8001428:	080016a8 	.word	0x080016a8
 800142c:	08001668 	.word	0x08001668

08001430 <_lseek_r>:
 8001430:	b538      	push	{r3, r4, r5, lr}
 8001432:	4d07      	ldr	r5, [pc, #28]	; (8001450 <_lseek_r+0x20>)
 8001434:	4604      	mov	r4, r0
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	2200      	movs	r2, #0
 800143c:	602a      	str	r2, [r5, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	f7ff f836 	bl	80004b0 <_lseek>
 8001444:	1c43      	adds	r3, r0, #1
 8001446:	d102      	bne.n	800144e <_lseek_r+0x1e>
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	b103      	cbz	r3, 800144e <_lseek_r+0x1e>
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	20000090 	.word	0x20000090

08001454 <__swhatbuf_r>:
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	460e      	mov	r6, r1
 8001458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145c:	2900      	cmp	r1, #0
 800145e:	b096      	sub	sp, #88	; 0x58
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	da08      	bge.n	8001478 <__swhatbuf_r+0x24>
 8001466:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	602a      	str	r2, [r5, #0]
 800146e:	061a      	lsls	r2, r3, #24
 8001470:	d410      	bmi.n	8001494 <__swhatbuf_r+0x40>
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	e00e      	b.n	8001496 <__swhatbuf_r+0x42>
 8001478:	466a      	mov	r2, sp
 800147a:	f000 f8bb 	bl	80015f4 <_fstat_r>
 800147e:	2800      	cmp	r0, #0
 8001480:	dbf1      	blt.n	8001466 <__swhatbuf_r+0x12>
 8001482:	9a01      	ldr	r2, [sp, #4]
 8001484:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001488:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800148c:	425a      	negs	r2, r3
 800148e:	415a      	adcs	r2, r3
 8001490:	602a      	str	r2, [r5, #0]
 8001492:	e7ee      	b.n	8001472 <__swhatbuf_r+0x1e>
 8001494:	2340      	movs	r3, #64	; 0x40
 8001496:	2000      	movs	r0, #0
 8001498:	6023      	str	r3, [r4, #0]
 800149a:	b016      	add	sp, #88	; 0x58
 800149c:	bd70      	pop	{r4, r5, r6, pc}
	...

080014a0 <__smakebuf_r>:
 80014a0:	898b      	ldrh	r3, [r1, #12]
 80014a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014a4:	079d      	lsls	r5, r3, #30
 80014a6:	4606      	mov	r6, r0
 80014a8:	460c      	mov	r4, r1
 80014aa:	d507      	bpl.n	80014bc <__smakebuf_r+0x1c>
 80014ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014b0:	6023      	str	r3, [r4, #0]
 80014b2:	6123      	str	r3, [r4, #16]
 80014b4:	2301      	movs	r3, #1
 80014b6:	6163      	str	r3, [r4, #20]
 80014b8:	b002      	add	sp, #8
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	ab01      	add	r3, sp, #4
 80014be:	466a      	mov	r2, sp
 80014c0:	f7ff ffc8 	bl	8001454 <__swhatbuf_r>
 80014c4:	9900      	ldr	r1, [sp, #0]
 80014c6:	4605      	mov	r5, r0
 80014c8:	4630      	mov	r0, r6
 80014ca:	f7ff fa57 	bl	800097c <_malloc_r>
 80014ce:	b948      	cbnz	r0, 80014e4 <__smakebuf_r+0x44>
 80014d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d4:	059a      	lsls	r2, r3, #22
 80014d6:	d4ef      	bmi.n	80014b8 <__smakebuf_r+0x18>
 80014d8:	f023 0303 	bic.w	r3, r3, #3
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	81a3      	strh	r3, [r4, #12]
 80014e2:	e7e3      	b.n	80014ac <__smakebuf_r+0xc>
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <__smakebuf_r+0x7c>)
 80014e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	6020      	str	r0, [r4, #0]
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	81a3      	strh	r3, [r4, #12]
 80014f2:	9b00      	ldr	r3, [sp, #0]
 80014f4:	6163      	str	r3, [r4, #20]
 80014f6:	9b01      	ldr	r3, [sp, #4]
 80014f8:	6120      	str	r0, [r4, #16]
 80014fa:	b15b      	cbz	r3, 8001514 <__smakebuf_r+0x74>
 80014fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001500:	4630      	mov	r0, r6
 8001502:	f000 f889 	bl	8001618 <_isatty_r>
 8001506:	b128      	cbz	r0, 8001514 <__smakebuf_r+0x74>
 8001508:	89a3      	ldrh	r3, [r4, #12]
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	81a3      	strh	r3, [r4, #12]
 8001514:	89a0      	ldrh	r0, [r4, #12]
 8001516:	4305      	orrs	r5, r0
 8001518:	81a5      	strh	r5, [r4, #12]
 800151a:	e7cd      	b.n	80014b8 <__smakebuf_r+0x18>
 800151c:	08000795 	.word	0x08000795

08001520 <__malloc_lock>:
 8001520:	4801      	ldr	r0, [pc, #4]	; (8001528 <__malloc_lock+0x8>)
 8001522:	f7ff ba09 	b.w	8000938 <__retarget_lock_acquire_recursive>
 8001526:	bf00      	nop
 8001528:	20000084 	.word	0x20000084

0800152c <__malloc_unlock>:
 800152c:	4801      	ldr	r0, [pc, #4]	; (8001534 <__malloc_unlock+0x8>)
 800152e:	f7ff ba04 	b.w	800093a <__retarget_lock_release_recursive>
 8001532:	bf00      	nop
 8001534:	20000084 	.word	0x20000084

08001538 <_free_r>:
 8001538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800153a:	2900      	cmp	r1, #0
 800153c:	d044      	beq.n	80015c8 <_free_r+0x90>
 800153e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001542:	9001      	str	r0, [sp, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f1a1 0404 	sub.w	r4, r1, #4
 800154a:	bfb8      	it	lt
 800154c:	18e4      	addlt	r4, r4, r3
 800154e:	f7ff ffe7 	bl	8001520 <__malloc_lock>
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <_free_r+0x94>)
 8001554:	9801      	ldr	r0, [sp, #4]
 8001556:	6813      	ldr	r3, [r2, #0]
 8001558:	b933      	cbnz	r3, 8001568 <_free_r+0x30>
 800155a:	6063      	str	r3, [r4, #4]
 800155c:	6014      	str	r4, [r2, #0]
 800155e:	b003      	add	sp, #12
 8001560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001564:	f7ff bfe2 	b.w	800152c <__malloc_unlock>
 8001568:	42a3      	cmp	r3, r4
 800156a:	d908      	bls.n	800157e <_free_r+0x46>
 800156c:	6825      	ldr	r5, [r4, #0]
 800156e:	1961      	adds	r1, r4, r5
 8001570:	428b      	cmp	r3, r1
 8001572:	bf01      	itttt	eq
 8001574:	6819      	ldreq	r1, [r3, #0]
 8001576:	685b      	ldreq	r3, [r3, #4]
 8001578:	1949      	addeq	r1, r1, r5
 800157a:	6021      	streq	r1, [r4, #0]
 800157c:	e7ed      	b.n	800155a <_free_r+0x22>
 800157e:	461a      	mov	r2, r3
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	b10b      	cbz	r3, 8001588 <_free_r+0x50>
 8001584:	42a3      	cmp	r3, r4
 8001586:	d9fa      	bls.n	800157e <_free_r+0x46>
 8001588:	6811      	ldr	r1, [r2, #0]
 800158a:	1855      	adds	r5, r2, r1
 800158c:	42a5      	cmp	r5, r4
 800158e:	d10b      	bne.n	80015a8 <_free_r+0x70>
 8001590:	6824      	ldr	r4, [r4, #0]
 8001592:	4421      	add	r1, r4
 8001594:	1854      	adds	r4, r2, r1
 8001596:	42a3      	cmp	r3, r4
 8001598:	6011      	str	r1, [r2, #0]
 800159a:	d1e0      	bne.n	800155e <_free_r+0x26>
 800159c:	681c      	ldr	r4, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	6053      	str	r3, [r2, #4]
 80015a2:	4421      	add	r1, r4
 80015a4:	6011      	str	r1, [r2, #0]
 80015a6:	e7da      	b.n	800155e <_free_r+0x26>
 80015a8:	d902      	bls.n	80015b0 <_free_r+0x78>
 80015aa:	230c      	movs	r3, #12
 80015ac:	6003      	str	r3, [r0, #0]
 80015ae:	e7d6      	b.n	800155e <_free_r+0x26>
 80015b0:	6825      	ldr	r5, [r4, #0]
 80015b2:	1961      	adds	r1, r4, r5
 80015b4:	428b      	cmp	r3, r1
 80015b6:	bf04      	itt	eq
 80015b8:	6819      	ldreq	r1, [r3, #0]
 80015ba:	685b      	ldreq	r3, [r3, #4]
 80015bc:	6063      	str	r3, [r4, #4]
 80015be:	bf04      	itt	eq
 80015c0:	1949      	addeq	r1, r1, r5
 80015c2:	6021      	streq	r1, [r4, #0]
 80015c4:	6054      	str	r4, [r2, #4]
 80015c6:	e7ca      	b.n	800155e <_free_r+0x26>
 80015c8:	b003      	add	sp, #12
 80015ca:	bd30      	pop	{r4, r5, pc}
 80015cc:	20000088 	.word	0x20000088

080015d0 <_read_r>:
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4d07      	ldr	r5, [pc, #28]	; (80015f0 <_read_r+0x20>)
 80015d4:	4604      	mov	r4, r0
 80015d6:	4608      	mov	r0, r1
 80015d8:	4611      	mov	r1, r2
 80015da:	2200      	movs	r2, #0
 80015dc:	602a      	str	r2, [r5, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	f7fe ff06 	bl	80003f0 <_read>
 80015e4:	1c43      	adds	r3, r0, #1
 80015e6:	d102      	bne.n	80015ee <_read_r+0x1e>
 80015e8:	682b      	ldr	r3, [r5, #0]
 80015ea:	b103      	cbz	r3, 80015ee <_read_r+0x1e>
 80015ec:	6023      	str	r3, [r4, #0]
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	20000090 	.word	0x20000090

080015f4 <_fstat_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4d07      	ldr	r5, [pc, #28]	; (8001614 <_fstat_r+0x20>)
 80015f8:	2300      	movs	r3, #0
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	602b      	str	r3, [r5, #0]
 8001602:	f7fe ff3a 	bl	800047a <_fstat>
 8001606:	1c43      	adds	r3, r0, #1
 8001608:	d102      	bne.n	8001610 <_fstat_r+0x1c>
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	b103      	cbz	r3, 8001610 <_fstat_r+0x1c>
 800160e:	6023      	str	r3, [r4, #0]
 8001610:	bd38      	pop	{r3, r4, r5, pc}
 8001612:	bf00      	nop
 8001614:	20000090 	.word	0x20000090

08001618 <_isatty_r>:
 8001618:	b538      	push	{r3, r4, r5, lr}
 800161a:	4d06      	ldr	r5, [pc, #24]	; (8001634 <_isatty_r+0x1c>)
 800161c:	2300      	movs	r3, #0
 800161e:	4604      	mov	r4, r0
 8001620:	4608      	mov	r0, r1
 8001622:	602b      	str	r3, [r5, #0]
 8001624:	f7fe ff39 	bl	800049a <_isatty>
 8001628:	1c43      	adds	r3, r0, #1
 800162a:	d102      	bne.n	8001632 <_isatty_r+0x1a>
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	b103      	cbz	r3, 8001632 <_isatty_r+0x1a>
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	bd38      	pop	{r3, r4, r5, pc}
 8001634:	20000090 	.word	0x20000090

08001638 <_init>:
 8001638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163a:	bf00      	nop
 800163c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163e:	bc08      	pop	{r3}
 8001640:	469e      	mov	lr, r3
 8001642:	4770      	bx	lr

08001644 <_fini>:
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001646:	bf00      	nop
 8001648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164a:	bc08      	pop	{r3}
 800164c:	469e      	mov	lr, r3
 800164e:	4770      	bx	lr
