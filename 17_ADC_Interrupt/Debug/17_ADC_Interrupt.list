
17_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800164c  0800164c  0001164c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016fc  080016fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016fc  080016fc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016fc  080016fc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  08001768  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001768  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017fe  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000069d  00000000  00000000  00021892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000220e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a854  00000000  00000000  00022238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002618  00000000  00000000  0003ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090829  00000000  00000000  0003f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf8cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d20  00000000  00000000  000cf920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001634 	.word	0x08001634

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001634 	.word	0x08001634

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <pa1_adc_interrupt_init>:
#define CR2_CONT	(1U<<1)
#define CR1_EOCIE	(1U<<5)


void pa1_adc_interrupt_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	///////Configure the ADC GPIO pin

	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <pa1_adc_interrupt_init+0x64>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <pa1_adc_interrupt_init+0x64>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30

	//Set the mode of PA1 to analog mode
	GPIOA->MODER |= (1U<<2);
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <pa1_adc_interrupt_init+0x68>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <pa1_adc_interrupt_init+0x68>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <pa1_adc_interrupt_init+0x68>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <pa1_adc_interrupt_init+0x68>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6013      	str	r3, [r2, #0]

	///////Configure the ADC module
	//Enable clock access to ADC
	RCC->APB2ENR |= ADC1EN;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <pa1_adc_interrupt_init+0x64>)
 8000316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <pa1_adc_interrupt_init+0x64>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031e:	6453      	str	r3, [r2, #68]	; 0x44

	//Enable ADC end-of-conversion interrupt
	ADC1->CR1 |= CR1_EOCIE;
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a0c      	ldr	r2, [pc, #48]	; (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6053      	str	r3, [r2, #4]

	//Enable ADC interrupt in NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 800032c:	2012      	movs	r0, #18
 800032e:	f7ff ffbf 	bl	80002b0 <__NVIC_EnableIRQ>

	//Conversion sequence start
	ADC1->SQR3 = ADC_CH1;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000334:	2201      	movs	r2, #1
 8000336:	635a      	str	r2, [r3, #52]	; 0x34

	//Conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <pa1_adc_interrupt_init+0x6c>)
 800033a:	2200      	movs	r2, #0
 800033c:	62da      	str	r2, [r3, #44]	; 0x2c

	//Enable ADC module
	ADC1->CR2 |= CR2_ADON;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6093      	str	r3, [r2, #8]

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000
 8000358:	40012000 	.word	0x40012000

0800035c <start_conversion>:
	ADC1->CR2 |= CR2_ADON;

}

void start_conversion(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	//Enable continuous conversion
	ADC1->CR2 |= CR2_CONT;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <start_conversion+0x28>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a07      	ldr	r2, [pc, #28]	; (8000384 <start_conversion+0x28>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6093      	str	r3, [r2, #8]
	//Start ADC conversion
	ADC1->CR2 |= CR2_SWSTART;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <start_conversion+0x28>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <start_conversion+0x28>)
 8000372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000376:	6093      	str	r3, [r2, #8]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40012000 	.word	0x40012000

08000388 <main>:
uint32_t sensor_value;

static void adc_callback(void);

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	uart2_tx_init();
 800038c:	f000 f8de 	bl	800054c <uart2_tx_init>
	pa1_adc_interrupt_init();
 8000390:	f7ff ffac 	bl	80002ec <pa1_adc_interrupt_init>
	start_conversion();
 8000394:	f7ff ffe2 	bl	800035c <start_conversion>


	while(1)
 8000398:	e7fe      	b.n	8000398 <main+0x10>
	...

0800039c <adc_callback>:

	}
}

static void adc_callback(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <adc_callback+0x1c>)
 80003a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a4:	4a05      	ldr	r2, [pc, #20]	; (80003bc <adc_callback+0x20>)
 80003a6:	6013      	str	r3, [r2, #0]
	printf("Sensor value : %d \n\r", (int)sensor_value);
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <adc_callback+0x20>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4804      	ldr	r0, [pc, #16]	; (80003c0 <adc_callback+0x24>)
 80003b0:	f000 f9b2 	bl	8000718 <iprintf>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40012000 	.word	0x40012000
 80003bc:	20000080 	.word	0x20000080
 80003c0:	0800164c 	.word	0x0800164c

080003c4 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	//Check for EOC in SR
	if ((ADC1->SR & SR_EOC) != 0)
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <ADC_IRQHandler+0x24>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d007      	beq.n	80003e4 <ADC_IRQHandler+0x20>
	{
		//CLEAR EOC
		ADC1->SR &= ~SR_EOC;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <ADC_IRQHandler+0x24>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <ADC_IRQHandler+0x24>)
 80003da:	f023 0302 	bic.w	r3, r3, #2
 80003de:	6013      	str	r3, [r2, #0]

		//Do something
		adc_callback();
 80003e0:	f7ff ffdc 	bl	800039c <adc_callback>
	}
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40012000 	.word	0x40012000

080003ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	e00a      	b.n	8000414 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003fe:	f3af 8000 	nop.w
 8000402:	4601      	mov	r1, r0
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	1c5a      	adds	r2, r3, #1
 8000408:	60ba      	str	r2, [r7, #8]
 800040a:	b2ca      	uxtb	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3301      	adds	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	697a      	ldr	r2, [r7, #20]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	429a      	cmp	r2, r3
 800041a:	dbf0      	blt.n	80003fe <_read+0x12>
  }

  return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	60f8      	str	r0, [r7, #12]
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	e009      	b.n	800044c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	60ba      	str	r2, [r7, #8]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f877 	bl	8000534 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbf1      	blt.n	8000438 <_write+0x12>
  }
  return len;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <_close>:

int _close(int file)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800046a:	4618      	mov	r0, r3
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000486:	605a      	str	r2, [r3, #4]
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <_isatty>:

int _isatty(int file)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800049e:	2301      	movs	r3, #1
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f000 f8dc 	bl	80006b4 <__errno>
 80004fc:	4603      	mov	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <_sbrk+0x64>)
 8000518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20020000 	.word	0x20020000
 8000528:	00000400 	.word	0x00000400
 800052c:	20000084 	.word	0x20000084
 8000530:	20000098 	.word	0x20000098

08000534 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f851 	bl	80005e4 <uart2_write>
	return ch;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <uart2_tx_init>:

void uart2_tx_init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	////////////// Configure uart gpio pin
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <uart2_tx_init+0x88>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	4a1f      	ldr	r2, [pc, #124]	; (80005d4 <uart2_tx_init+0x88>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 to alt func mode
	GPIOA->MODER &= ~(1U<<4);
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <uart2_tx_init+0x8c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <uart2_tx_init+0x8c>)
 8000562:	f023 0310 	bic.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <uart2_tx_init+0x8c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <uart2_tx_init+0x8c>)
 800056e:	f043 0320 	orr.w	r3, r3, #32
 8000572:	6013      	str	r3, [r2, #0]

	// Set PA2 alt func type to UART_TX( AF07)
	GPIOA->AFR[0] |= (1U<<8);
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <uart2_tx_init+0x8c>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <uart2_tx_init+0x8c>)
 800057a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <uart2_tx_init+0x8c>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <uart2_tx_init+0x8c>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <uart2_tx_init+0x8c>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <uart2_tx_init+0x8c>)
 8000592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000596:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <uart2_tx_init+0x8c>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <uart2_tx_init+0x8c>)
 800059e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005a2:	6213      	str	r3, [r2, #32]

	///////// Configure uart module
	// Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <uart2_tx_init+0x88>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <uart2_tx_init+0x88>)
 80005aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b4:	4909      	ldr	r1, [pc, #36]	; (80005dc <uart2_tx_init+0x90>)
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <uart2_tx_init+0x94>)
 80005b8:	f000 f82c 	bl	8000614 <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <uart2_tx_init+0x94>)
 80005be:	2208      	movs	r2, #8
 80005c0:	60da      	str	r2, [r3, #12]

	// Enable uart module
	USART2->CR1 |= CR1_UE;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <uart2_tx_init+0x94>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <uart2_tx_init+0x94>)
 80005c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005cc:	60d3      	str	r3, [r2, #12]
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	00f42400 	.word	0x00f42400
 80005e0:	40004400 	.word	0x40004400

080005e4 <uart2_write>:
	// Read data
	return USART2->DR;
}

void uart2_write(int ch)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	// Make sure transmit data register is empty
	while (!(USART2->SR & SR_TXE)){}
 80005ec:	bf00      	nop
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <uart2_write+0x2c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f9      	beq.n	80005ee <uart2_write+0xa>

	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <uart2_write+0x2c>)
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	6053      	str	r3, [r2, #4]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40004400 	.word	0x40004400

08000614 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f000 f808 	bl	8000638 <compute_uart_bd>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	609a      	str	r2, [r3, #8]
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	085a      	lsrs	r2, r3, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	441a      	add	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f000 f817 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fe79 	bl	8000388 <main>

08000696 <LoopForever>:

LoopForever:
  b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006a4:	08001704 	.word	0x08001704
  ldr r2, =_sbss
 80006a8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006ac:	20000098 	.word	0x20000098

080006b0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <BusFault_Handler>
	...

080006b4 <__errno>:
 80006b4:	4b01      	ldr	r3, [pc, #4]	; (80006bc <__errno+0x8>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	; (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	; (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 ffae 	bl	8001634 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	080016fc 	.word	0x080016fc
 80006fc:	080016fc 	.word	0x080016fc
 8000700:	080016fc 	.word	0x080016fc
 8000704:	08001700 	.word	0x08001700

08000708 <memset>:
 8000708:	4402      	add	r2, r0
 800070a:	4603      	mov	r3, r0
 800070c:	4293      	cmp	r3, r2
 800070e:	d100      	bne.n	8000712 <memset+0xa>
 8000710:	4770      	bx	lr
 8000712:	f803 1b01 	strb.w	r1, [r3], #1
 8000716:	e7f9      	b.n	800070c <memset+0x4>

08000718 <iprintf>:
 8000718:	b40f      	push	{r0, r1, r2, r3}
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <iprintf+0x2c>)
 800071c:	b513      	push	{r0, r1, r4, lr}
 800071e:	681c      	ldr	r4, [r3, #0]
 8000720:	b124      	cbz	r4, 800072c <iprintf+0x14>
 8000722:	69a3      	ldr	r3, [r4, #24]
 8000724:	b913      	cbnz	r3, 800072c <iprintf+0x14>
 8000726:	4620      	mov	r0, r4
 8000728:	f000 f866 	bl	80007f8 <__sinit>
 800072c:	ab05      	add	r3, sp, #20
 800072e:	9a04      	ldr	r2, [sp, #16]
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	4620      	mov	r0, r4
 8000736:	f000 f9bd 	bl	8000ab4 <_vfiprintf_r>
 800073a:	b002      	add	sp, #8
 800073c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000740:	b004      	add	sp, #16
 8000742:	4770      	bx	lr
 8000744:	20000000 	.word	0x20000000

08000748 <std>:
 8000748:	2300      	movs	r3, #0
 800074a:	b510      	push	{r4, lr}
 800074c:	4604      	mov	r4, r0
 800074e:	e9c0 3300 	strd	r3, r3, [r0]
 8000752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000756:	6083      	str	r3, [r0, #8]
 8000758:	8181      	strh	r1, [r0, #12]
 800075a:	6643      	str	r3, [r0, #100]	; 0x64
 800075c:	81c2      	strh	r2, [r0, #14]
 800075e:	6183      	str	r3, [r0, #24]
 8000760:	4619      	mov	r1, r3
 8000762:	2208      	movs	r2, #8
 8000764:	305c      	adds	r0, #92	; 0x5c
 8000766:	f7ff ffcf 	bl	8000708 <memset>
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <std+0x38>)
 800076c:	6263      	str	r3, [r4, #36]	; 0x24
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <std+0x3c>)
 8000770:	62a3      	str	r3, [r4, #40]	; 0x28
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <std+0x40>)
 8000774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <std+0x44>)
 8000778:	6224      	str	r4, [r4, #32]
 800077a:	6323      	str	r3, [r4, #48]	; 0x30
 800077c:	bd10      	pop	{r4, pc}
 800077e:	bf00      	nop
 8000780:	0800105d 	.word	0x0800105d
 8000784:	0800107f 	.word	0x0800107f
 8000788:	080010b7 	.word	0x080010b7
 800078c:	080010db 	.word	0x080010db

08000790 <_cleanup_r>:
 8000790:	4901      	ldr	r1, [pc, #4]	; (8000798 <_cleanup_r+0x8>)
 8000792:	f000 b8af 	b.w	80008f4 <_fwalk_reent>
 8000796:	bf00      	nop
 8000798:	080013b5 	.word	0x080013b5

0800079c <__sfmoreglue>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	2268      	movs	r2, #104	; 0x68
 80007a0:	1e4d      	subs	r5, r1, #1
 80007a2:	4355      	muls	r5, r2
 80007a4:	460e      	mov	r6, r1
 80007a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007aa:	f000 f8e5 	bl	8000978 <_malloc_r>
 80007ae:	4604      	mov	r4, r0
 80007b0:	b140      	cbz	r0, 80007c4 <__sfmoreglue+0x28>
 80007b2:	2100      	movs	r1, #0
 80007b4:	e9c0 1600 	strd	r1, r6, [r0]
 80007b8:	300c      	adds	r0, #12
 80007ba:	60a0      	str	r0, [r4, #8]
 80007bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80007c0:	f7ff ffa2 	bl	8000708 <memset>
 80007c4:	4620      	mov	r0, r4
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__sfp_lock_acquire>:
 80007c8:	4801      	ldr	r0, [pc, #4]	; (80007d0 <__sfp_lock_acquire+0x8>)
 80007ca:	f000 b8b3 	b.w	8000934 <__retarget_lock_acquire_recursive>
 80007ce:	bf00      	nop
 80007d0:	20000089 	.word	0x20000089

080007d4 <__sfp_lock_release>:
 80007d4:	4801      	ldr	r0, [pc, #4]	; (80007dc <__sfp_lock_release+0x8>)
 80007d6:	f000 b8ae 	b.w	8000936 <__retarget_lock_release_recursive>
 80007da:	bf00      	nop
 80007dc:	20000089 	.word	0x20000089

080007e0 <__sinit_lock_acquire>:
 80007e0:	4801      	ldr	r0, [pc, #4]	; (80007e8 <__sinit_lock_acquire+0x8>)
 80007e2:	f000 b8a7 	b.w	8000934 <__retarget_lock_acquire_recursive>
 80007e6:	bf00      	nop
 80007e8:	2000008a 	.word	0x2000008a

080007ec <__sinit_lock_release>:
 80007ec:	4801      	ldr	r0, [pc, #4]	; (80007f4 <__sinit_lock_release+0x8>)
 80007ee:	f000 b8a2 	b.w	8000936 <__retarget_lock_release_recursive>
 80007f2:	bf00      	nop
 80007f4:	2000008a 	.word	0x2000008a

080007f8 <__sinit>:
 80007f8:	b510      	push	{r4, lr}
 80007fa:	4604      	mov	r4, r0
 80007fc:	f7ff fff0 	bl	80007e0 <__sinit_lock_acquire>
 8000800:	69a3      	ldr	r3, [r4, #24]
 8000802:	b11b      	cbz	r3, 800080c <__sinit+0x14>
 8000804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000808:	f7ff bff0 	b.w	80007ec <__sinit_lock_release>
 800080c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000810:	6523      	str	r3, [r4, #80]	; 0x50
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <__sinit+0x68>)
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <__sinit+0x6c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	62a2      	str	r2, [r4, #40]	; 0x28
 800081a:	42a3      	cmp	r3, r4
 800081c:	bf04      	itt	eq
 800081e:	2301      	moveq	r3, #1
 8000820:	61a3      	streq	r3, [r4, #24]
 8000822:	4620      	mov	r0, r4
 8000824:	f000 f820 	bl	8000868 <__sfp>
 8000828:	6060      	str	r0, [r4, #4]
 800082a:	4620      	mov	r0, r4
 800082c:	f000 f81c 	bl	8000868 <__sfp>
 8000830:	60a0      	str	r0, [r4, #8]
 8000832:	4620      	mov	r0, r4
 8000834:	f000 f818 	bl	8000868 <__sfp>
 8000838:	2200      	movs	r2, #0
 800083a:	60e0      	str	r0, [r4, #12]
 800083c:	2104      	movs	r1, #4
 800083e:	6860      	ldr	r0, [r4, #4]
 8000840:	f7ff ff82 	bl	8000748 <std>
 8000844:	68a0      	ldr	r0, [r4, #8]
 8000846:	2201      	movs	r2, #1
 8000848:	2109      	movs	r1, #9
 800084a:	f7ff ff7d 	bl	8000748 <std>
 800084e:	68e0      	ldr	r0, [r4, #12]
 8000850:	2202      	movs	r2, #2
 8000852:	2112      	movs	r1, #18
 8000854:	f7ff ff78 	bl	8000748 <std>
 8000858:	2301      	movs	r3, #1
 800085a:	61a3      	str	r3, [r4, #24]
 800085c:	e7d2      	b.n	8000804 <__sinit+0xc>
 800085e:	bf00      	nop
 8000860:	08001664 	.word	0x08001664
 8000864:	08000791 	.word	0x08000791

08000868 <__sfp>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	4607      	mov	r7, r0
 800086c:	f7ff ffac 	bl	80007c8 <__sfp_lock_acquire>
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <__sfp+0x84>)
 8000872:	681e      	ldr	r6, [r3, #0]
 8000874:	69b3      	ldr	r3, [r6, #24]
 8000876:	b913      	cbnz	r3, 800087e <__sfp+0x16>
 8000878:	4630      	mov	r0, r6
 800087a:	f7ff ffbd 	bl	80007f8 <__sinit>
 800087e:	3648      	adds	r6, #72	; 0x48
 8000880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	d503      	bpl.n	8000890 <__sfp+0x28>
 8000888:	6833      	ldr	r3, [r6, #0]
 800088a:	b30b      	cbz	r3, 80008d0 <__sfp+0x68>
 800088c:	6836      	ldr	r6, [r6, #0]
 800088e:	e7f7      	b.n	8000880 <__sfp+0x18>
 8000890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000894:	b9d5      	cbnz	r5, 80008cc <__sfp+0x64>
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <__sfp+0x88>)
 8000898:	60e3      	str	r3, [r4, #12]
 800089a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800089e:	6665      	str	r5, [r4, #100]	; 0x64
 80008a0:	f000 f847 	bl	8000932 <__retarget_lock_init_recursive>
 80008a4:	f7ff ff96 	bl	80007d4 <__sfp_lock_release>
 80008a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008b0:	6025      	str	r5, [r4, #0]
 80008b2:	61a5      	str	r5, [r4, #24]
 80008b4:	2208      	movs	r2, #8
 80008b6:	4629      	mov	r1, r5
 80008b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008bc:	f7ff ff24 	bl	8000708 <memset>
 80008c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008c8:	4620      	mov	r0, r4
 80008ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008cc:	3468      	adds	r4, #104	; 0x68
 80008ce:	e7d9      	b.n	8000884 <__sfp+0x1c>
 80008d0:	2104      	movs	r1, #4
 80008d2:	4638      	mov	r0, r7
 80008d4:	f7ff ff62 	bl	800079c <__sfmoreglue>
 80008d8:	4604      	mov	r4, r0
 80008da:	6030      	str	r0, [r6, #0]
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1d5      	bne.n	800088c <__sfp+0x24>
 80008e0:	f7ff ff78 	bl	80007d4 <__sfp_lock_release>
 80008e4:	230c      	movs	r3, #12
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	e7ee      	b.n	80008c8 <__sfp+0x60>
 80008ea:	bf00      	nop
 80008ec:	08001664 	.word	0x08001664
 80008f0:	ffff0001 	.word	0xffff0001

080008f4 <_fwalk_reent>:
 80008f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008f8:	4606      	mov	r6, r0
 80008fa:	4688      	mov	r8, r1
 80008fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000900:	2700      	movs	r7, #0
 8000902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000906:	f1b9 0901 	subs.w	r9, r9, #1
 800090a:	d505      	bpl.n	8000918 <_fwalk_reent+0x24>
 800090c:	6824      	ldr	r4, [r4, #0]
 800090e:	2c00      	cmp	r4, #0
 8000910:	d1f7      	bne.n	8000902 <_fwalk_reent+0xe>
 8000912:	4638      	mov	r0, r7
 8000914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000918:	89ab      	ldrh	r3, [r5, #12]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d907      	bls.n	800092e <_fwalk_reent+0x3a>
 800091e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000922:	3301      	adds	r3, #1
 8000924:	d003      	beq.n	800092e <_fwalk_reent+0x3a>
 8000926:	4629      	mov	r1, r5
 8000928:	4630      	mov	r0, r6
 800092a:	47c0      	blx	r8
 800092c:	4307      	orrs	r7, r0
 800092e:	3568      	adds	r5, #104	; 0x68
 8000930:	e7e9      	b.n	8000906 <_fwalk_reent+0x12>

08000932 <__retarget_lock_init_recursive>:
 8000932:	4770      	bx	lr

08000934 <__retarget_lock_acquire_recursive>:
 8000934:	4770      	bx	lr

08000936 <__retarget_lock_release_recursive>:
 8000936:	4770      	bx	lr

08000938 <sbrk_aligned>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	4e0e      	ldr	r6, [pc, #56]	; (8000974 <sbrk_aligned+0x3c>)
 800093c:	460c      	mov	r4, r1
 800093e:	6831      	ldr	r1, [r6, #0]
 8000940:	4605      	mov	r5, r0
 8000942:	b911      	cbnz	r1, 800094a <sbrk_aligned+0x12>
 8000944:	f000 fb7a 	bl	800103c <_sbrk_r>
 8000948:	6030      	str	r0, [r6, #0]
 800094a:	4621      	mov	r1, r4
 800094c:	4628      	mov	r0, r5
 800094e:	f000 fb75 	bl	800103c <_sbrk_r>
 8000952:	1c43      	adds	r3, r0, #1
 8000954:	d00a      	beq.n	800096c <sbrk_aligned+0x34>
 8000956:	1cc4      	adds	r4, r0, #3
 8000958:	f024 0403 	bic.w	r4, r4, #3
 800095c:	42a0      	cmp	r0, r4
 800095e:	d007      	beq.n	8000970 <sbrk_aligned+0x38>
 8000960:	1a21      	subs	r1, r4, r0
 8000962:	4628      	mov	r0, r5
 8000964:	f000 fb6a 	bl	800103c <_sbrk_r>
 8000968:	3001      	adds	r0, #1
 800096a:	d101      	bne.n	8000970 <sbrk_aligned+0x38>
 800096c:	f04f 34ff 	mov.w	r4, #4294967295
 8000970:	4620      	mov	r0, r4
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	20000090 	.word	0x20000090

08000978 <_malloc_r>:
 8000978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800097c:	1ccd      	adds	r5, r1, #3
 800097e:	f025 0503 	bic.w	r5, r5, #3
 8000982:	3508      	adds	r5, #8
 8000984:	2d0c      	cmp	r5, #12
 8000986:	bf38      	it	cc
 8000988:	250c      	movcc	r5, #12
 800098a:	2d00      	cmp	r5, #0
 800098c:	4607      	mov	r7, r0
 800098e:	db01      	blt.n	8000994 <_malloc_r+0x1c>
 8000990:	42a9      	cmp	r1, r5
 8000992:	d905      	bls.n	80009a0 <_malloc_r+0x28>
 8000994:	230c      	movs	r3, #12
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	2600      	movs	r6, #0
 800099a:	4630      	mov	r0, r6
 800099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a0:	4e2e      	ldr	r6, [pc, #184]	; (8000a5c <_malloc_r+0xe4>)
 80009a2:	f000 fdbb 	bl	800151c <__malloc_lock>
 80009a6:	6833      	ldr	r3, [r6, #0]
 80009a8:	461c      	mov	r4, r3
 80009aa:	bb34      	cbnz	r4, 80009fa <_malloc_r+0x82>
 80009ac:	4629      	mov	r1, r5
 80009ae:	4638      	mov	r0, r7
 80009b0:	f7ff ffc2 	bl	8000938 <sbrk_aligned>
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	4604      	mov	r4, r0
 80009b8:	d14d      	bne.n	8000a56 <_malloc_r+0xde>
 80009ba:	6834      	ldr	r4, [r6, #0]
 80009bc:	4626      	mov	r6, r4
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d140      	bne.n	8000a44 <_malloc_r+0xcc>
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	4631      	mov	r1, r6
 80009c6:	4638      	mov	r0, r7
 80009c8:	eb04 0803 	add.w	r8, r4, r3
 80009cc:	f000 fb36 	bl	800103c <_sbrk_r>
 80009d0:	4580      	cmp	r8, r0
 80009d2:	d13a      	bne.n	8000a4a <_malloc_r+0xd2>
 80009d4:	6821      	ldr	r1, [r4, #0]
 80009d6:	3503      	adds	r5, #3
 80009d8:	1a6d      	subs	r5, r5, r1
 80009da:	f025 0503 	bic.w	r5, r5, #3
 80009de:	3508      	adds	r5, #8
 80009e0:	2d0c      	cmp	r5, #12
 80009e2:	bf38      	it	cc
 80009e4:	250c      	movcc	r5, #12
 80009e6:	4629      	mov	r1, r5
 80009e8:	4638      	mov	r0, r7
 80009ea:	f7ff ffa5 	bl	8000938 <sbrk_aligned>
 80009ee:	3001      	adds	r0, #1
 80009f0:	d02b      	beq.n	8000a4a <_malloc_r+0xd2>
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	442b      	add	r3, r5
 80009f6:	6023      	str	r3, [r4, #0]
 80009f8:	e00e      	b.n	8000a18 <_malloc_r+0xa0>
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	1b52      	subs	r2, r2, r5
 80009fe:	d41e      	bmi.n	8000a3e <_malloc_r+0xc6>
 8000a00:	2a0b      	cmp	r2, #11
 8000a02:	d916      	bls.n	8000a32 <_malloc_r+0xba>
 8000a04:	1961      	adds	r1, r4, r5
 8000a06:	42a3      	cmp	r3, r4
 8000a08:	6025      	str	r5, [r4, #0]
 8000a0a:	bf18      	it	ne
 8000a0c:	6059      	strne	r1, [r3, #4]
 8000a0e:	6863      	ldr	r3, [r4, #4]
 8000a10:	bf08      	it	eq
 8000a12:	6031      	streq	r1, [r6, #0]
 8000a14:	5162      	str	r2, [r4, r5]
 8000a16:	604b      	str	r3, [r1, #4]
 8000a18:	4638      	mov	r0, r7
 8000a1a:	f104 060b 	add.w	r6, r4, #11
 8000a1e:	f000 fd83 	bl	8001528 <__malloc_unlock>
 8000a22:	f026 0607 	bic.w	r6, r6, #7
 8000a26:	1d23      	adds	r3, r4, #4
 8000a28:	1af2      	subs	r2, r6, r3
 8000a2a:	d0b6      	beq.n	800099a <_malloc_r+0x22>
 8000a2c:	1b9b      	subs	r3, r3, r6
 8000a2e:	50a3      	str	r3, [r4, r2]
 8000a30:	e7b3      	b.n	800099a <_malloc_r+0x22>
 8000a32:	6862      	ldr	r2, [r4, #4]
 8000a34:	42a3      	cmp	r3, r4
 8000a36:	bf0c      	ite	eq
 8000a38:	6032      	streq	r2, [r6, #0]
 8000a3a:	605a      	strne	r2, [r3, #4]
 8000a3c:	e7ec      	b.n	8000a18 <_malloc_r+0xa0>
 8000a3e:	4623      	mov	r3, r4
 8000a40:	6864      	ldr	r4, [r4, #4]
 8000a42:	e7b2      	b.n	80009aa <_malloc_r+0x32>
 8000a44:	4634      	mov	r4, r6
 8000a46:	6876      	ldr	r6, [r6, #4]
 8000a48:	e7b9      	b.n	80009be <_malloc_r+0x46>
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4638      	mov	r0, r7
 8000a50:	f000 fd6a 	bl	8001528 <__malloc_unlock>
 8000a54:	e7a1      	b.n	800099a <_malloc_r+0x22>
 8000a56:	6025      	str	r5, [r4, #0]
 8000a58:	e7de      	b.n	8000a18 <_malloc_r+0xa0>
 8000a5a:	bf00      	nop
 8000a5c:	2000008c 	.word	0x2000008c

08000a60 <__sfputc_r>:
 8000a60:	6893      	ldr	r3, [r2, #8]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	b410      	push	{r4}
 8000a68:	6093      	str	r3, [r2, #8]
 8000a6a:	da08      	bge.n	8000a7e <__sfputc_r+0x1e>
 8000a6c:	6994      	ldr	r4, [r2, #24]
 8000a6e:	42a3      	cmp	r3, r4
 8000a70:	db01      	blt.n	8000a76 <__sfputc_r+0x16>
 8000a72:	290a      	cmp	r1, #10
 8000a74:	d103      	bne.n	8000a7e <__sfputc_r+0x1e>
 8000a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a7a:	f000 bb33 	b.w	80010e4 <__swbuf_r>
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	1c58      	adds	r0, r3, #1
 8000a82:	6010      	str	r0, [r2, #0]
 8000a84:	7019      	strb	r1, [r3, #0]
 8000a86:	4608      	mov	r0, r1
 8000a88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <__sfputs_r>:
 8000a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a90:	4606      	mov	r6, r0
 8000a92:	460f      	mov	r7, r1
 8000a94:	4614      	mov	r4, r2
 8000a96:	18d5      	adds	r5, r2, r3
 8000a98:	42ac      	cmp	r4, r5
 8000a9a:	d101      	bne.n	8000aa0 <__sfputs_r+0x12>
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	e007      	b.n	8000ab0 <__sfputs_r+0x22>
 8000aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aa4:	463a      	mov	r2, r7
 8000aa6:	4630      	mov	r0, r6
 8000aa8:	f7ff ffda 	bl	8000a60 <__sfputc_r>
 8000aac:	1c43      	adds	r3, r0, #1
 8000aae:	d1f3      	bne.n	8000a98 <__sfputs_r+0xa>
 8000ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ab4 <_vfiprintf_r>:
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	460d      	mov	r5, r1
 8000aba:	b09d      	sub	sp, #116	; 0x74
 8000abc:	4614      	mov	r4, r2
 8000abe:	4698      	mov	r8, r3
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	b118      	cbz	r0, 8000acc <_vfiprintf_r+0x18>
 8000ac4:	6983      	ldr	r3, [r0, #24]
 8000ac6:	b90b      	cbnz	r3, 8000acc <_vfiprintf_r+0x18>
 8000ac8:	f7ff fe96 	bl	80007f8 <__sinit>
 8000acc:	4b89      	ldr	r3, [pc, #548]	; (8000cf4 <_vfiprintf_r+0x240>)
 8000ace:	429d      	cmp	r5, r3
 8000ad0:	d11b      	bne.n	8000b0a <_vfiprintf_r+0x56>
 8000ad2:	6875      	ldr	r5, [r6, #4]
 8000ad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ad6:	07d9      	lsls	r1, r3, #31
 8000ad8:	d405      	bmi.n	8000ae6 <_vfiprintf_r+0x32>
 8000ada:	89ab      	ldrh	r3, [r5, #12]
 8000adc:	059a      	lsls	r2, r3, #22
 8000ade:	d402      	bmi.n	8000ae6 <_vfiprintf_r+0x32>
 8000ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ae2:	f7ff ff27 	bl	8000934 <__retarget_lock_acquire_recursive>
 8000ae6:	89ab      	ldrh	r3, [r5, #12]
 8000ae8:	071b      	lsls	r3, r3, #28
 8000aea:	d501      	bpl.n	8000af0 <_vfiprintf_r+0x3c>
 8000aec:	692b      	ldr	r3, [r5, #16]
 8000aee:	b9eb      	cbnz	r3, 8000b2c <_vfiprintf_r+0x78>
 8000af0:	4629      	mov	r1, r5
 8000af2:	4630      	mov	r0, r6
 8000af4:	f000 fb5a 	bl	80011ac <__swsetup_r>
 8000af8:	b1c0      	cbz	r0, 8000b2c <_vfiprintf_r+0x78>
 8000afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000afc:	07dc      	lsls	r4, r3, #31
 8000afe:	d50e      	bpl.n	8000b1e <_vfiprintf_r+0x6a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	b01d      	add	sp, #116	; 0x74
 8000b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0a:	4b7b      	ldr	r3, [pc, #492]	; (8000cf8 <_vfiprintf_r+0x244>)
 8000b0c:	429d      	cmp	r5, r3
 8000b0e:	d101      	bne.n	8000b14 <_vfiprintf_r+0x60>
 8000b10:	68b5      	ldr	r5, [r6, #8]
 8000b12:	e7df      	b.n	8000ad4 <_vfiprintf_r+0x20>
 8000b14:	4b79      	ldr	r3, [pc, #484]	; (8000cfc <_vfiprintf_r+0x248>)
 8000b16:	429d      	cmp	r5, r3
 8000b18:	bf08      	it	eq
 8000b1a:	68f5      	ldreq	r5, [r6, #12]
 8000b1c:	e7da      	b.n	8000ad4 <_vfiprintf_r+0x20>
 8000b1e:	89ab      	ldrh	r3, [r5, #12]
 8000b20:	0598      	lsls	r0, r3, #22
 8000b22:	d4ed      	bmi.n	8000b00 <_vfiprintf_r+0x4c>
 8000b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b26:	f7ff ff06 	bl	8000936 <__retarget_lock_release_recursive>
 8000b2a:	e7e9      	b.n	8000b00 <_vfiprintf_r+0x4c>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000b30:	2320      	movs	r3, #32
 8000b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b3a:	2330      	movs	r3, #48	; 0x30
 8000b3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d00 <_vfiprintf_r+0x24c>
 8000b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b44:	f04f 0901 	mov.w	r9, #1
 8000b48:	4623      	mov	r3, r4
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b50:	b10a      	cbz	r2, 8000b56 <_vfiprintf_r+0xa2>
 8000b52:	2a25      	cmp	r2, #37	; 0x25
 8000b54:	d1f9      	bne.n	8000b4a <_vfiprintf_r+0x96>
 8000b56:	ebba 0b04 	subs.w	fp, sl, r4
 8000b5a:	d00b      	beq.n	8000b74 <_vfiprintf_r+0xc0>
 8000b5c:	465b      	mov	r3, fp
 8000b5e:	4622      	mov	r2, r4
 8000b60:	4629      	mov	r1, r5
 8000b62:	4630      	mov	r0, r6
 8000b64:	f7ff ff93 	bl	8000a8e <__sfputs_r>
 8000b68:	3001      	adds	r0, #1
 8000b6a:	f000 80aa 	beq.w	8000cc2 <_vfiprintf_r+0x20e>
 8000b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b70:	445a      	add	r2, fp
 8000b72:	9209      	str	r2, [sp, #36]	; 0x24
 8000b74:	f89a 3000 	ldrb.w	r3, [sl]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 80a2 	beq.w	8000cc2 <_vfiprintf_r+0x20e>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b88:	f10a 0a01 	add.w	sl, sl, #1
 8000b8c:	9304      	str	r3, [sp, #16]
 8000b8e:	9307      	str	r3, [sp, #28]
 8000b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b94:	931a      	str	r3, [sp, #104]	; 0x68
 8000b96:	4654      	mov	r4, sl
 8000b98:	2205      	movs	r2, #5
 8000b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b9e:	4858      	ldr	r0, [pc, #352]	; (8000d00 <_vfiprintf_r+0x24c>)
 8000ba0:	f7ff fb36 	bl	8000210 <memchr>
 8000ba4:	9a04      	ldr	r2, [sp, #16]
 8000ba6:	b9d8      	cbnz	r0, 8000be0 <_vfiprintf_r+0x12c>
 8000ba8:	06d1      	lsls	r1, r2, #27
 8000baa:	bf44      	itt	mi
 8000bac:	2320      	movmi	r3, #32
 8000bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bb2:	0713      	lsls	r3, r2, #28
 8000bb4:	bf44      	itt	mi
 8000bb6:	232b      	movmi	r3, #43	; 0x2b
 8000bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8000bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8000bc2:	d015      	beq.n	8000bf0 <_vfiprintf_r+0x13c>
 8000bc4:	9a07      	ldr	r2, [sp, #28]
 8000bc6:	4654      	mov	r4, sl
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f04f 0c0a 	mov.w	ip, #10
 8000bce:	4621      	mov	r1, r4
 8000bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bd4:	3b30      	subs	r3, #48	; 0x30
 8000bd6:	2b09      	cmp	r3, #9
 8000bd8:	d94e      	bls.n	8000c78 <_vfiprintf_r+0x1c4>
 8000bda:	b1b0      	cbz	r0, 8000c0a <_vfiprintf_r+0x156>
 8000bdc:	9207      	str	r2, [sp, #28]
 8000bde:	e014      	b.n	8000c0a <_vfiprintf_r+0x156>
 8000be0:	eba0 0308 	sub.w	r3, r0, r8
 8000be4:	fa09 f303 	lsl.w	r3, r9, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	46a2      	mov	sl, r4
 8000bee:	e7d2      	b.n	8000b96 <_vfiprintf_r+0xe2>
 8000bf0:	9b03      	ldr	r3, [sp, #12]
 8000bf2:	1d19      	adds	r1, r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	9103      	str	r1, [sp, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	bfbb      	ittet	lt
 8000bfc:	425b      	neglt	r3, r3
 8000bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8000c02:	9307      	strge	r3, [sp, #28]
 8000c04:	9307      	strlt	r3, [sp, #28]
 8000c06:	bfb8      	it	lt
 8000c08:	9204      	strlt	r2, [sp, #16]
 8000c0a:	7823      	ldrb	r3, [r4, #0]
 8000c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8000c0e:	d10c      	bne.n	8000c2a <_vfiprintf_r+0x176>
 8000c10:	7863      	ldrb	r3, [r4, #1]
 8000c12:	2b2a      	cmp	r3, #42	; 0x2a
 8000c14:	d135      	bne.n	8000c82 <_vfiprintf_r+0x1ce>
 8000c16:	9b03      	ldr	r3, [sp, #12]
 8000c18:	1d1a      	adds	r2, r3, #4
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	9203      	str	r2, [sp, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bfb8      	it	lt
 8000c22:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c26:	3402      	adds	r4, #2
 8000c28:	9305      	str	r3, [sp, #20]
 8000c2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d10 <_vfiprintf_r+0x25c>
 8000c2e:	7821      	ldrb	r1, [r4, #0]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4650      	mov	r0, sl
 8000c34:	f7ff faec 	bl	8000210 <memchr>
 8000c38:	b140      	cbz	r0, 8000c4c <_vfiprintf_r+0x198>
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	eba0 000a 	sub.w	r0, r0, sl
 8000c40:	fa03 f000 	lsl.w	r0, r3, r0
 8000c44:	9b04      	ldr	r3, [sp, #16]
 8000c46:	4303      	orrs	r3, r0
 8000c48:	3401      	adds	r4, #1
 8000c4a:	9304      	str	r3, [sp, #16]
 8000c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c50:	482c      	ldr	r0, [pc, #176]	; (8000d04 <_vfiprintf_r+0x250>)
 8000c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c56:	2206      	movs	r2, #6
 8000c58:	f7ff fada 	bl	8000210 <memchr>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d03f      	beq.n	8000ce0 <_vfiprintf_r+0x22c>
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <_vfiprintf_r+0x254>)
 8000c62:	bb1b      	cbnz	r3, 8000cac <_vfiprintf_r+0x1f8>
 8000c64:	9b03      	ldr	r3, [sp, #12]
 8000c66:	3307      	adds	r3, #7
 8000c68:	f023 0307 	bic.w	r3, r3, #7
 8000c6c:	3308      	adds	r3, #8
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c72:	443b      	add	r3, r7
 8000c74:	9309      	str	r3, [sp, #36]	; 0x24
 8000c76:	e767      	b.n	8000b48 <_vfiprintf_r+0x94>
 8000c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c7c:	460c      	mov	r4, r1
 8000c7e:	2001      	movs	r0, #1
 8000c80:	e7a5      	b.n	8000bce <_vfiprintf_r+0x11a>
 8000c82:	2300      	movs	r3, #0
 8000c84:	3401      	adds	r4, #1
 8000c86:	9305      	str	r3, [sp, #20]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 0c0a 	mov.w	ip, #10
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c94:	3a30      	subs	r2, #48	; 0x30
 8000c96:	2a09      	cmp	r2, #9
 8000c98:	d903      	bls.n	8000ca2 <_vfiprintf_r+0x1ee>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0c5      	beq.n	8000c2a <_vfiprintf_r+0x176>
 8000c9e:	9105      	str	r1, [sp, #20]
 8000ca0:	e7c3      	b.n	8000c2a <_vfiprintf_r+0x176>
 8000ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e7f0      	b.n	8000c8e <_vfiprintf_r+0x1da>
 8000cac:	ab03      	add	r3, sp, #12
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	462a      	mov	r2, r5
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <_vfiprintf_r+0x258>)
 8000cb4:	a904      	add	r1, sp, #16
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	4607      	mov	r7, r0
 8000cbe:	1c78      	adds	r0, r7, #1
 8000cc0:	d1d6      	bne.n	8000c70 <_vfiprintf_r+0x1bc>
 8000cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cc4:	07d9      	lsls	r1, r3, #31
 8000cc6:	d405      	bmi.n	8000cd4 <_vfiprintf_r+0x220>
 8000cc8:	89ab      	ldrh	r3, [r5, #12]
 8000cca:	059a      	lsls	r2, r3, #22
 8000ccc:	d402      	bmi.n	8000cd4 <_vfiprintf_r+0x220>
 8000cce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cd0:	f7ff fe31 	bl	8000936 <__retarget_lock_release_recursive>
 8000cd4:	89ab      	ldrh	r3, [r5, #12]
 8000cd6:	065b      	lsls	r3, r3, #25
 8000cd8:	f53f af12 	bmi.w	8000b00 <_vfiprintf_r+0x4c>
 8000cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cde:	e711      	b.n	8000b04 <_vfiprintf_r+0x50>
 8000ce0:	ab03      	add	r3, sp, #12
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	462a      	mov	r2, r5
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <_vfiprintf_r+0x258>)
 8000ce8:	a904      	add	r1, sp, #16
 8000cea:	4630      	mov	r0, r6
 8000cec:	f000 f880 	bl	8000df0 <_printf_i>
 8000cf0:	e7e4      	b.n	8000cbc <_vfiprintf_r+0x208>
 8000cf2:	bf00      	nop
 8000cf4:	08001688 	.word	0x08001688
 8000cf8:	080016a8 	.word	0x080016a8
 8000cfc:	08001668 	.word	0x08001668
 8000d00:	080016c8 	.word	0x080016c8
 8000d04:	080016d2 	.word	0x080016d2
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	08000a8f 	.word	0x08000a8f
 8000d10:	080016ce 	.word	0x080016ce

08000d14 <_printf_common>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	4616      	mov	r6, r2
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	688a      	ldr	r2, [r1, #8]
 8000d1e:	690b      	ldr	r3, [r1, #16]
 8000d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bfb8      	it	lt
 8000d28:	4613      	movlt	r3, r2
 8000d2a:	6033      	str	r3, [r6, #0]
 8000d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d30:	4607      	mov	r7, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	b10a      	cbz	r2, 8000d3a <_printf_common+0x26>
 8000d36:	3301      	adds	r3, #1
 8000d38:	6033      	str	r3, [r6, #0]
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	0699      	lsls	r1, r3, #26
 8000d3e:	bf42      	ittt	mi
 8000d40:	6833      	ldrmi	r3, [r6, #0]
 8000d42:	3302      	addmi	r3, #2
 8000d44:	6033      	strmi	r3, [r6, #0]
 8000d46:	6825      	ldr	r5, [r4, #0]
 8000d48:	f015 0506 	ands.w	r5, r5, #6
 8000d4c:	d106      	bne.n	8000d5c <_printf_common+0x48>
 8000d4e:	f104 0a19 	add.w	sl, r4, #25
 8000d52:	68e3      	ldr	r3, [r4, #12]
 8000d54:	6832      	ldr	r2, [r6, #0]
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	42ab      	cmp	r3, r5
 8000d5a:	dc26      	bgt.n	8000daa <_printf_common+0x96>
 8000d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d60:	1e13      	subs	r3, r2, #0
 8000d62:	6822      	ldr	r2, [r4, #0]
 8000d64:	bf18      	it	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	0692      	lsls	r2, r2, #26
 8000d6a:	d42b      	bmi.n	8000dc4 <_printf_common+0xb0>
 8000d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d70:	4649      	mov	r1, r9
 8000d72:	4638      	mov	r0, r7
 8000d74:	47c0      	blx	r8
 8000d76:	3001      	adds	r0, #1
 8000d78:	d01e      	beq.n	8000db8 <_printf_common+0xa4>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	68e5      	ldr	r5, [r4, #12]
 8000d7e:	6832      	ldr	r2, [r6, #0]
 8000d80:	f003 0306 	and.w	r3, r3, #6
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	bf08      	it	eq
 8000d88:	1aad      	subeq	r5, r5, r2
 8000d8a:	68a3      	ldr	r3, [r4, #8]
 8000d8c:	6922      	ldr	r2, [r4, #16]
 8000d8e:	bf0c      	ite	eq
 8000d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d94:	2500      	movne	r5, #0
 8000d96:	4293      	cmp	r3, r2
 8000d98:	bfc4      	itt	gt
 8000d9a:	1a9b      	subgt	r3, r3, r2
 8000d9c:	18ed      	addgt	r5, r5, r3
 8000d9e:	2600      	movs	r6, #0
 8000da0:	341a      	adds	r4, #26
 8000da2:	42b5      	cmp	r5, r6
 8000da4:	d11a      	bne.n	8000ddc <_printf_common+0xc8>
 8000da6:	2000      	movs	r0, #0
 8000da8:	e008      	b.n	8000dbc <_printf_common+0xa8>
 8000daa:	2301      	movs	r3, #1
 8000dac:	4652      	mov	r2, sl
 8000dae:	4649      	mov	r1, r9
 8000db0:	4638      	mov	r0, r7
 8000db2:	47c0      	blx	r8
 8000db4:	3001      	adds	r0, #1
 8000db6:	d103      	bne.n	8000dc0 <_printf_common+0xac>
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	e7c6      	b.n	8000d52 <_printf_common+0x3e>
 8000dc4:	18e1      	adds	r1, r4, r3
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	2030      	movs	r0, #48	; 0x30
 8000dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dce:	4422      	add	r2, r4
 8000dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dd8:	3302      	adds	r3, #2
 8000dda:	e7c7      	b.n	8000d6c <_printf_common+0x58>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	4622      	mov	r2, r4
 8000de0:	4649      	mov	r1, r9
 8000de2:	4638      	mov	r0, r7
 8000de4:	47c0      	blx	r8
 8000de6:	3001      	adds	r0, #1
 8000de8:	d0e6      	beq.n	8000db8 <_printf_common+0xa4>
 8000dea:	3601      	adds	r6, #1
 8000dec:	e7d9      	b.n	8000da2 <_printf_common+0x8e>
	...

08000df0 <_printf_i>:
 8000df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	7e0f      	ldrb	r7, [r1, #24]
 8000df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000df8:	2f78      	cmp	r7, #120	; 0x78
 8000dfa:	4691      	mov	r9, r2
 8000dfc:	4680      	mov	r8, r0
 8000dfe:	460c      	mov	r4, r1
 8000e00:	469a      	mov	sl, r3
 8000e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e06:	d807      	bhi.n	8000e18 <_printf_i+0x28>
 8000e08:	2f62      	cmp	r7, #98	; 0x62
 8000e0a:	d80a      	bhi.n	8000e22 <_printf_i+0x32>
 8000e0c:	2f00      	cmp	r7, #0
 8000e0e:	f000 80d8 	beq.w	8000fc2 <_printf_i+0x1d2>
 8000e12:	2f58      	cmp	r7, #88	; 0x58
 8000e14:	f000 80a3 	beq.w	8000f5e <_printf_i+0x16e>
 8000e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e20:	e03a      	b.n	8000e98 <_printf_i+0xa8>
 8000e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e26:	2b15      	cmp	r3, #21
 8000e28:	d8f6      	bhi.n	8000e18 <_printf_i+0x28>
 8000e2a:	a101      	add	r1, pc, #4	; (adr r1, 8000e30 <_printf_i+0x40>)
 8000e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e30:	08000e89 	.word	0x08000e89
 8000e34:	08000e9d 	.word	0x08000e9d
 8000e38:	08000e19 	.word	0x08000e19
 8000e3c:	08000e19 	.word	0x08000e19
 8000e40:	08000e19 	.word	0x08000e19
 8000e44:	08000e19 	.word	0x08000e19
 8000e48:	08000e9d 	.word	0x08000e9d
 8000e4c:	08000e19 	.word	0x08000e19
 8000e50:	08000e19 	.word	0x08000e19
 8000e54:	08000e19 	.word	0x08000e19
 8000e58:	08000e19 	.word	0x08000e19
 8000e5c:	08000fa9 	.word	0x08000fa9
 8000e60:	08000ecd 	.word	0x08000ecd
 8000e64:	08000f8b 	.word	0x08000f8b
 8000e68:	08000e19 	.word	0x08000e19
 8000e6c:	08000e19 	.word	0x08000e19
 8000e70:	08000fcb 	.word	0x08000fcb
 8000e74:	08000e19 	.word	0x08000e19
 8000e78:	08000ecd 	.word	0x08000ecd
 8000e7c:	08000e19 	.word	0x08000e19
 8000e80:	08000e19 	.word	0x08000e19
 8000e84:	08000f93 	.word	0x08000f93
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	602a      	str	r2, [r5, #0]
 8000e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0a3      	b.n	8000fe4 <_printf_i+0x1f4>
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	6829      	ldr	r1, [r5, #0]
 8000ea0:	0606      	lsls	r6, r0, #24
 8000ea2:	f101 0304 	add.w	r3, r1, #4
 8000ea6:	d50a      	bpl.n	8000ebe <_printf_i+0xce>
 8000ea8:	680e      	ldr	r6, [r1, #0]
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	da03      	bge.n	8000eb8 <_printf_i+0xc8>
 8000eb0:	232d      	movs	r3, #45	; 0x2d
 8000eb2:	4276      	negs	r6, r6
 8000eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000eb8:	485e      	ldr	r0, [pc, #376]	; (8001034 <_printf_i+0x244>)
 8000eba:	230a      	movs	r3, #10
 8000ebc:	e019      	b.n	8000ef2 <_printf_i+0x102>
 8000ebe:	680e      	ldr	r6, [r1, #0]
 8000ec0:	602b      	str	r3, [r5, #0]
 8000ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000ec6:	bf18      	it	ne
 8000ec8:	b236      	sxthne	r6, r6
 8000eca:	e7ef      	b.n	8000eac <_printf_i+0xbc>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	1d19      	adds	r1, r3, #4
 8000ed2:	6029      	str	r1, [r5, #0]
 8000ed4:	0601      	lsls	r1, r0, #24
 8000ed6:	d501      	bpl.n	8000edc <_printf_i+0xec>
 8000ed8:	681e      	ldr	r6, [r3, #0]
 8000eda:	e002      	b.n	8000ee2 <_printf_i+0xf2>
 8000edc:	0646      	lsls	r6, r0, #25
 8000ede:	d5fb      	bpl.n	8000ed8 <_printf_i+0xe8>
 8000ee0:	881e      	ldrh	r6, [r3, #0]
 8000ee2:	4854      	ldr	r0, [pc, #336]	; (8001034 <_printf_i+0x244>)
 8000ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8000ee6:	bf0c      	ite	eq
 8000ee8:	2308      	moveq	r3, #8
 8000eea:	230a      	movne	r3, #10
 8000eec:	2100      	movs	r1, #0
 8000eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ef2:	6865      	ldr	r5, [r4, #4]
 8000ef4:	60a5      	str	r5, [r4, #8]
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	bfa2      	ittt	ge
 8000efa:	6821      	ldrge	r1, [r4, #0]
 8000efc:	f021 0104 	bicge.w	r1, r1, #4
 8000f00:	6021      	strge	r1, [r4, #0]
 8000f02:	b90e      	cbnz	r6, 8000f08 <_printf_i+0x118>
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d04d      	beq.n	8000fa4 <_printf_i+0x1b4>
 8000f08:	4615      	mov	r5, r2
 8000f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8000f12:	5dc7      	ldrb	r7, [r0, r7]
 8000f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f18:	4637      	mov	r7, r6
 8000f1a:	42bb      	cmp	r3, r7
 8000f1c:	460e      	mov	r6, r1
 8000f1e:	d9f4      	bls.n	8000f0a <_printf_i+0x11a>
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d10b      	bne.n	8000f3c <_printf_i+0x14c>
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	07de      	lsls	r6, r3, #31
 8000f28:	d508      	bpl.n	8000f3c <_printf_i+0x14c>
 8000f2a:	6923      	ldr	r3, [r4, #16]
 8000f2c:	6861      	ldr	r1, [r4, #4]
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	bfde      	ittt	le
 8000f32:	2330      	movle	r3, #48	; 0x30
 8000f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f3c:	1b52      	subs	r2, r2, r5
 8000f3e:	6122      	str	r2, [r4, #16]
 8000f40:	f8cd a000 	str.w	sl, [sp]
 8000f44:	464b      	mov	r3, r9
 8000f46:	aa03      	add	r2, sp, #12
 8000f48:	4621      	mov	r1, r4
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	f7ff fee2 	bl	8000d14 <_printf_common>
 8000f50:	3001      	adds	r0, #1
 8000f52:	d14c      	bne.n	8000fee <_printf_i+0x1fe>
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	b004      	add	sp, #16
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	4835      	ldr	r0, [pc, #212]	; (8001034 <_printf_i+0x244>)
 8000f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f64:	6829      	ldr	r1, [r5, #0]
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f6c:	6029      	str	r1, [r5, #0]
 8000f6e:	061d      	lsls	r5, r3, #24
 8000f70:	d514      	bpl.n	8000f9c <_printf_i+0x1ac>
 8000f72:	07df      	lsls	r7, r3, #31
 8000f74:	bf44      	itt	mi
 8000f76:	f043 0320 	orrmi.w	r3, r3, #32
 8000f7a:	6023      	strmi	r3, [r4, #0]
 8000f7c:	b91e      	cbnz	r6, 8000f86 <_printf_i+0x196>
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f023 0320 	bic.w	r3, r3, #32
 8000f84:	6023      	str	r3, [r4, #0]
 8000f86:	2310      	movs	r3, #16
 8000f88:	e7b0      	b.n	8000eec <_printf_i+0xfc>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	2378      	movs	r3, #120	; 0x78
 8000f94:	4828      	ldr	r0, [pc, #160]	; (8001038 <_printf_i+0x248>)
 8000f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f9a:	e7e3      	b.n	8000f64 <_printf_i+0x174>
 8000f9c:	0659      	lsls	r1, r3, #25
 8000f9e:	bf48      	it	mi
 8000fa0:	b2b6      	uxthmi	r6, r6
 8000fa2:	e7e6      	b.n	8000f72 <_printf_i+0x182>
 8000fa4:	4615      	mov	r5, r2
 8000fa6:	e7bb      	b.n	8000f20 <_printf_i+0x130>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	6826      	ldr	r6, [r4, #0]
 8000fac:	6961      	ldr	r1, [r4, #20]
 8000fae:	1d18      	adds	r0, r3, #4
 8000fb0:	6028      	str	r0, [r5, #0]
 8000fb2:	0635      	lsls	r5, r6, #24
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	d501      	bpl.n	8000fbc <_printf_i+0x1cc>
 8000fb8:	6019      	str	r1, [r3, #0]
 8000fba:	e002      	b.n	8000fc2 <_printf_i+0x1d2>
 8000fbc:	0670      	lsls	r0, r6, #25
 8000fbe:	d5fb      	bpl.n	8000fb8 <_printf_i+0x1c8>
 8000fc0:	8019      	strh	r1, [r3, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	6123      	str	r3, [r4, #16]
 8000fc6:	4615      	mov	r5, r2
 8000fc8:	e7ba      	b.n	8000f40 <_printf_i+0x150>
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	1d1a      	adds	r2, r3, #4
 8000fce:	602a      	str	r2, [r5, #0]
 8000fd0:	681d      	ldr	r5, [r3, #0]
 8000fd2:	6862      	ldr	r2, [r4, #4]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f7ff f91a 	bl	8000210 <memchr>
 8000fdc:	b108      	cbz	r0, 8000fe2 <_printf_i+0x1f2>
 8000fde:	1b40      	subs	r0, r0, r5
 8000fe0:	6060      	str	r0, [r4, #4]
 8000fe2:	6863      	ldr	r3, [r4, #4]
 8000fe4:	6123      	str	r3, [r4, #16]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fec:	e7a8      	b.n	8000f40 <_printf_i+0x150>
 8000fee:	6923      	ldr	r3, [r4, #16]
 8000ff0:	462a      	mov	r2, r5
 8000ff2:	4649      	mov	r1, r9
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	47d0      	blx	sl
 8000ff8:	3001      	adds	r0, #1
 8000ffa:	d0ab      	beq.n	8000f54 <_printf_i+0x164>
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	079b      	lsls	r3, r3, #30
 8001000:	d413      	bmi.n	800102a <_printf_i+0x23a>
 8001002:	68e0      	ldr	r0, [r4, #12]
 8001004:	9b03      	ldr	r3, [sp, #12]
 8001006:	4298      	cmp	r0, r3
 8001008:	bfb8      	it	lt
 800100a:	4618      	movlt	r0, r3
 800100c:	e7a4      	b.n	8000f58 <_printf_i+0x168>
 800100e:	2301      	movs	r3, #1
 8001010:	4632      	mov	r2, r6
 8001012:	4649      	mov	r1, r9
 8001014:	4640      	mov	r0, r8
 8001016:	47d0      	blx	sl
 8001018:	3001      	adds	r0, #1
 800101a:	d09b      	beq.n	8000f54 <_printf_i+0x164>
 800101c:	3501      	adds	r5, #1
 800101e:	68e3      	ldr	r3, [r4, #12]
 8001020:	9903      	ldr	r1, [sp, #12]
 8001022:	1a5b      	subs	r3, r3, r1
 8001024:	42ab      	cmp	r3, r5
 8001026:	dcf2      	bgt.n	800100e <_printf_i+0x21e>
 8001028:	e7eb      	b.n	8001002 <_printf_i+0x212>
 800102a:	2500      	movs	r5, #0
 800102c:	f104 0619 	add.w	r6, r4, #25
 8001030:	e7f5      	b.n	800101e <_printf_i+0x22e>
 8001032:	bf00      	nop
 8001034:	080016d9 	.word	0x080016d9
 8001038:	080016ea 	.word	0x080016ea

0800103c <_sbrk_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	4d06      	ldr	r5, [pc, #24]	; (8001058 <_sbrk_r+0x1c>)
 8001040:	2300      	movs	r3, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	602b      	str	r3, [r5, #0]
 8001048:	f7ff fa3e 	bl	80004c8 <_sbrk>
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	d102      	bne.n	8001056 <_sbrk_r+0x1a>
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	b103      	cbz	r3, 8001056 <_sbrk_r+0x1a>
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000094 	.word	0x20000094

0800105c <__sread>:
 800105c:	b510      	push	{r4, lr}
 800105e:	460c      	mov	r4, r1
 8001060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001064:	f000 fab2 	bl	80015cc <_read_r>
 8001068:	2800      	cmp	r0, #0
 800106a:	bfab      	itete	ge
 800106c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800106e:	89a3      	ldrhlt	r3, [r4, #12]
 8001070:	181b      	addge	r3, r3, r0
 8001072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001076:	bfac      	ite	ge
 8001078:	6563      	strge	r3, [r4, #84]	; 0x54
 800107a:	81a3      	strhlt	r3, [r4, #12]
 800107c:	bd10      	pop	{r4, pc}

0800107e <__swrite>:
 800107e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	461f      	mov	r7, r3
 8001084:	898b      	ldrh	r3, [r1, #12]
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	4605      	mov	r5, r0
 800108a:	460c      	mov	r4, r1
 800108c:	4616      	mov	r6, r2
 800108e:	d505      	bpl.n	800109c <__swrite+0x1e>
 8001090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001094:	2302      	movs	r3, #2
 8001096:	2200      	movs	r2, #0
 8001098:	f000 f9c8 	bl	800142c <_lseek_r>
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010a6:	81a3      	strh	r3, [r4, #12]
 80010a8:	4632      	mov	r2, r6
 80010aa:	463b      	mov	r3, r7
 80010ac:	4628      	mov	r0, r5
 80010ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b2:	f000 b869 	b.w	8001188 <_write_r>

080010b6 <__sseek>:
 80010b6:	b510      	push	{r4, lr}
 80010b8:	460c      	mov	r4, r1
 80010ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010be:	f000 f9b5 	bl	800142c <_lseek_r>
 80010c2:	1c43      	adds	r3, r0, #1
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	bf15      	itete	ne
 80010c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010d2:	81a3      	strheq	r3, [r4, #12]
 80010d4:	bf18      	it	ne
 80010d6:	81a3      	strhne	r3, [r4, #12]
 80010d8:	bd10      	pop	{r4, pc}

080010da <__sclose>:
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 b8d3 	b.w	8001288 <_close_r>
	...

080010e4 <__swbuf_r>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	460e      	mov	r6, r1
 80010e8:	4614      	mov	r4, r2
 80010ea:	4605      	mov	r5, r0
 80010ec:	b118      	cbz	r0, 80010f6 <__swbuf_r+0x12>
 80010ee:	6983      	ldr	r3, [r0, #24]
 80010f0:	b90b      	cbnz	r3, 80010f6 <__swbuf_r+0x12>
 80010f2:	f7ff fb81 	bl	80007f8 <__sinit>
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <__swbuf_r+0x98>)
 80010f8:	429c      	cmp	r4, r3
 80010fa:	d12b      	bne.n	8001154 <__swbuf_r+0x70>
 80010fc:	686c      	ldr	r4, [r5, #4]
 80010fe:	69a3      	ldr	r3, [r4, #24]
 8001100:	60a3      	str	r3, [r4, #8]
 8001102:	89a3      	ldrh	r3, [r4, #12]
 8001104:	071a      	lsls	r2, r3, #28
 8001106:	d52f      	bpl.n	8001168 <__swbuf_r+0x84>
 8001108:	6923      	ldr	r3, [r4, #16]
 800110a:	b36b      	cbz	r3, 8001168 <__swbuf_r+0x84>
 800110c:	6923      	ldr	r3, [r4, #16]
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	1ac0      	subs	r0, r0, r3
 8001112:	6963      	ldr	r3, [r4, #20]
 8001114:	b2f6      	uxtb	r6, r6
 8001116:	4283      	cmp	r3, r0
 8001118:	4637      	mov	r7, r6
 800111a:	dc04      	bgt.n	8001126 <__swbuf_r+0x42>
 800111c:	4621      	mov	r1, r4
 800111e:	4628      	mov	r0, r5
 8001120:	f000 f948 	bl	80013b4 <_fflush_r>
 8001124:	bb30      	cbnz	r0, 8001174 <__swbuf_r+0x90>
 8001126:	68a3      	ldr	r3, [r4, #8]
 8001128:	3b01      	subs	r3, #1
 800112a:	60a3      	str	r3, [r4, #8]
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	6022      	str	r2, [r4, #0]
 8001132:	701e      	strb	r6, [r3, #0]
 8001134:	6963      	ldr	r3, [r4, #20]
 8001136:	3001      	adds	r0, #1
 8001138:	4283      	cmp	r3, r0
 800113a:	d004      	beq.n	8001146 <__swbuf_r+0x62>
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	07db      	lsls	r3, r3, #31
 8001140:	d506      	bpl.n	8001150 <__swbuf_r+0x6c>
 8001142:	2e0a      	cmp	r6, #10
 8001144:	d104      	bne.n	8001150 <__swbuf_r+0x6c>
 8001146:	4621      	mov	r1, r4
 8001148:	4628      	mov	r0, r5
 800114a:	f000 f933 	bl	80013b4 <_fflush_r>
 800114e:	b988      	cbnz	r0, 8001174 <__swbuf_r+0x90>
 8001150:	4638      	mov	r0, r7
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <__swbuf_r+0x9c>)
 8001156:	429c      	cmp	r4, r3
 8001158:	d101      	bne.n	800115e <__swbuf_r+0x7a>
 800115a:	68ac      	ldr	r4, [r5, #8]
 800115c:	e7cf      	b.n	80010fe <__swbuf_r+0x1a>
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <__swbuf_r+0xa0>)
 8001160:	429c      	cmp	r4, r3
 8001162:	bf08      	it	eq
 8001164:	68ec      	ldreq	r4, [r5, #12]
 8001166:	e7ca      	b.n	80010fe <__swbuf_r+0x1a>
 8001168:	4621      	mov	r1, r4
 800116a:	4628      	mov	r0, r5
 800116c:	f000 f81e 	bl	80011ac <__swsetup_r>
 8001170:	2800      	cmp	r0, #0
 8001172:	d0cb      	beq.n	800110c <__swbuf_r+0x28>
 8001174:	f04f 37ff 	mov.w	r7, #4294967295
 8001178:	e7ea      	b.n	8001150 <__swbuf_r+0x6c>
 800117a:	bf00      	nop
 800117c:	08001688 	.word	0x08001688
 8001180:	080016a8 	.word	0x080016a8
 8001184:	08001668 	.word	0x08001668

08001188 <_write_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4d07      	ldr	r5, [pc, #28]	; (80011a8 <_write_r+0x20>)
 800118c:	4604      	mov	r4, r0
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	2200      	movs	r2, #0
 8001194:	602a      	str	r2, [r5, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	f7ff f945 	bl	8000426 <_write>
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	d102      	bne.n	80011a6 <_write_r+0x1e>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	b103      	cbz	r3, 80011a6 <_write_r+0x1e>
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
 80011a8:	20000094 	.word	0x20000094

080011ac <__swsetup_r>:
 80011ac:	4b32      	ldr	r3, [pc, #200]	; (8001278 <__swsetup_r+0xcc>)
 80011ae:	b570      	push	{r4, r5, r6, lr}
 80011b0:	681d      	ldr	r5, [r3, #0]
 80011b2:	4606      	mov	r6, r0
 80011b4:	460c      	mov	r4, r1
 80011b6:	b125      	cbz	r5, 80011c2 <__swsetup_r+0x16>
 80011b8:	69ab      	ldr	r3, [r5, #24]
 80011ba:	b913      	cbnz	r3, 80011c2 <__swsetup_r+0x16>
 80011bc:	4628      	mov	r0, r5
 80011be:	f7ff fb1b 	bl	80007f8 <__sinit>
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <__swsetup_r+0xd0>)
 80011c4:	429c      	cmp	r4, r3
 80011c6:	d10f      	bne.n	80011e8 <__swsetup_r+0x3c>
 80011c8:	686c      	ldr	r4, [r5, #4]
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011d0:	0719      	lsls	r1, r3, #28
 80011d2:	d42c      	bmi.n	800122e <__swsetup_r+0x82>
 80011d4:	06dd      	lsls	r5, r3, #27
 80011d6:	d411      	bmi.n	80011fc <__swsetup_r+0x50>
 80011d8:	2309      	movs	r3, #9
 80011da:	6033      	str	r3, [r6, #0]
 80011dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011e0:	81a3      	strh	r3, [r4, #12]
 80011e2:	f04f 30ff 	mov.w	r0, #4294967295
 80011e6:	e03e      	b.n	8001266 <__swsetup_r+0xba>
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <__swsetup_r+0xd4>)
 80011ea:	429c      	cmp	r4, r3
 80011ec:	d101      	bne.n	80011f2 <__swsetup_r+0x46>
 80011ee:	68ac      	ldr	r4, [r5, #8]
 80011f0:	e7eb      	b.n	80011ca <__swsetup_r+0x1e>
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <__swsetup_r+0xd8>)
 80011f4:	429c      	cmp	r4, r3
 80011f6:	bf08      	it	eq
 80011f8:	68ec      	ldreq	r4, [r5, #12]
 80011fa:	e7e6      	b.n	80011ca <__swsetup_r+0x1e>
 80011fc:	0758      	lsls	r0, r3, #29
 80011fe:	d512      	bpl.n	8001226 <__swsetup_r+0x7a>
 8001200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001202:	b141      	cbz	r1, 8001216 <__swsetup_r+0x6a>
 8001204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001208:	4299      	cmp	r1, r3
 800120a:	d002      	beq.n	8001212 <__swsetup_r+0x66>
 800120c:	4630      	mov	r0, r6
 800120e:	f000 f991 	bl	8001534 <_free_r>
 8001212:	2300      	movs	r3, #0
 8001214:	6363      	str	r3, [r4, #52]	; 0x34
 8001216:	89a3      	ldrh	r3, [r4, #12]
 8001218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800121c:	81a3      	strh	r3, [r4, #12]
 800121e:	2300      	movs	r3, #0
 8001220:	6063      	str	r3, [r4, #4]
 8001222:	6923      	ldr	r3, [r4, #16]
 8001224:	6023      	str	r3, [r4, #0]
 8001226:	89a3      	ldrh	r3, [r4, #12]
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	81a3      	strh	r3, [r4, #12]
 800122e:	6923      	ldr	r3, [r4, #16]
 8001230:	b94b      	cbnz	r3, 8001246 <__swsetup_r+0x9a>
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123c:	d003      	beq.n	8001246 <__swsetup_r+0x9a>
 800123e:	4621      	mov	r1, r4
 8001240:	4630      	mov	r0, r6
 8001242:	f000 f92b 	bl	800149c <__smakebuf_r>
 8001246:	89a0      	ldrh	r0, [r4, #12]
 8001248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800124c:	f010 0301 	ands.w	r3, r0, #1
 8001250:	d00a      	beq.n	8001268 <__swsetup_r+0xbc>
 8001252:	2300      	movs	r3, #0
 8001254:	60a3      	str	r3, [r4, #8]
 8001256:	6963      	ldr	r3, [r4, #20]
 8001258:	425b      	negs	r3, r3
 800125a:	61a3      	str	r3, [r4, #24]
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	b943      	cbnz	r3, 8001272 <__swsetup_r+0xc6>
 8001260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001264:	d1ba      	bne.n	80011dc <__swsetup_r+0x30>
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	0781      	lsls	r1, r0, #30
 800126a:	bf58      	it	pl
 800126c:	6963      	ldrpl	r3, [r4, #20]
 800126e:	60a3      	str	r3, [r4, #8]
 8001270:	e7f4      	b.n	800125c <__swsetup_r+0xb0>
 8001272:	2000      	movs	r0, #0
 8001274:	e7f7      	b.n	8001266 <__swsetup_r+0xba>
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000
 800127c:	08001688 	.word	0x08001688
 8001280:	080016a8 	.word	0x080016a8
 8001284:	08001668 	.word	0x08001668

08001288 <_close_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d06      	ldr	r5, [pc, #24]	; (80012a4 <_close_r+0x1c>)
 800128c:	2300      	movs	r3, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	f7ff f8e3 	bl	800045e <_close>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_close_r+0x1a>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_close_r+0x1a>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	20000094 	.word	0x20000094

080012a8 <__sflush_r>:
 80012a8:	898a      	ldrh	r2, [r1, #12]
 80012aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ae:	4605      	mov	r5, r0
 80012b0:	0710      	lsls	r0, r2, #28
 80012b2:	460c      	mov	r4, r1
 80012b4:	d458      	bmi.n	8001368 <__sflush_r+0xc0>
 80012b6:	684b      	ldr	r3, [r1, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dc05      	bgt.n	80012c8 <__sflush_r+0x20>
 80012bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc02      	bgt.n	80012c8 <__sflush_r+0x20>
 80012c2:	2000      	movs	r0, #0
 80012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	d0f9      	beq.n	80012c2 <__sflush_r+0x1a>
 80012ce:	2300      	movs	r3, #0
 80012d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012d4:	682f      	ldr	r7, [r5, #0]
 80012d6:	602b      	str	r3, [r5, #0]
 80012d8:	d032      	beq.n	8001340 <__sflush_r+0x98>
 80012da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	075a      	lsls	r2, r3, #29
 80012e0:	d505      	bpl.n	80012ee <__sflush_r+0x46>
 80012e2:	6863      	ldr	r3, [r4, #4]
 80012e4:	1ac0      	subs	r0, r0, r3
 80012e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012e8:	b10b      	cbz	r3, 80012ee <__sflush_r+0x46>
 80012ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ec:	1ac0      	subs	r0, r0, r3
 80012ee:	2300      	movs	r3, #0
 80012f0:	4602      	mov	r2, r0
 80012f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012f4:	6a21      	ldr	r1, [r4, #32]
 80012f6:	4628      	mov	r0, r5
 80012f8:	47b0      	blx	r6
 80012fa:	1c43      	adds	r3, r0, #1
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	d106      	bne.n	800130e <__sflush_r+0x66>
 8001300:	6829      	ldr	r1, [r5, #0]
 8001302:	291d      	cmp	r1, #29
 8001304:	d82c      	bhi.n	8001360 <__sflush_r+0xb8>
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <__sflush_r+0x108>)
 8001308:	40ca      	lsrs	r2, r1
 800130a:	07d6      	lsls	r6, r2, #31
 800130c:	d528      	bpl.n	8001360 <__sflush_r+0xb8>
 800130e:	2200      	movs	r2, #0
 8001310:	6062      	str	r2, [r4, #4]
 8001312:	04d9      	lsls	r1, r3, #19
 8001314:	6922      	ldr	r2, [r4, #16]
 8001316:	6022      	str	r2, [r4, #0]
 8001318:	d504      	bpl.n	8001324 <__sflush_r+0x7c>
 800131a:	1c42      	adds	r2, r0, #1
 800131c:	d101      	bne.n	8001322 <__sflush_r+0x7a>
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	b903      	cbnz	r3, 8001324 <__sflush_r+0x7c>
 8001322:	6560      	str	r0, [r4, #84]	; 0x54
 8001324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001326:	602f      	str	r7, [r5, #0]
 8001328:	2900      	cmp	r1, #0
 800132a:	d0ca      	beq.n	80012c2 <__sflush_r+0x1a>
 800132c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001330:	4299      	cmp	r1, r3
 8001332:	d002      	beq.n	800133a <__sflush_r+0x92>
 8001334:	4628      	mov	r0, r5
 8001336:	f000 f8fd 	bl	8001534 <_free_r>
 800133a:	2000      	movs	r0, #0
 800133c:	6360      	str	r0, [r4, #52]	; 0x34
 800133e:	e7c1      	b.n	80012c4 <__sflush_r+0x1c>
 8001340:	6a21      	ldr	r1, [r4, #32]
 8001342:	2301      	movs	r3, #1
 8001344:	4628      	mov	r0, r5
 8001346:	47b0      	blx	r6
 8001348:	1c41      	adds	r1, r0, #1
 800134a:	d1c7      	bne.n	80012dc <__sflush_r+0x34>
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0c4      	beq.n	80012dc <__sflush_r+0x34>
 8001352:	2b1d      	cmp	r3, #29
 8001354:	d001      	beq.n	800135a <__sflush_r+0xb2>
 8001356:	2b16      	cmp	r3, #22
 8001358:	d101      	bne.n	800135e <__sflush_r+0xb6>
 800135a:	602f      	str	r7, [r5, #0]
 800135c:	e7b1      	b.n	80012c2 <__sflush_r+0x1a>
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001364:	81a3      	strh	r3, [r4, #12]
 8001366:	e7ad      	b.n	80012c4 <__sflush_r+0x1c>
 8001368:	690f      	ldr	r7, [r1, #16]
 800136a:	2f00      	cmp	r7, #0
 800136c:	d0a9      	beq.n	80012c2 <__sflush_r+0x1a>
 800136e:	0793      	lsls	r3, r2, #30
 8001370:	680e      	ldr	r6, [r1, #0]
 8001372:	bf08      	it	eq
 8001374:	694b      	ldreq	r3, [r1, #20]
 8001376:	600f      	str	r7, [r1, #0]
 8001378:	bf18      	it	ne
 800137a:	2300      	movne	r3, #0
 800137c:	eba6 0807 	sub.w	r8, r6, r7
 8001380:	608b      	str	r3, [r1, #8]
 8001382:	f1b8 0f00 	cmp.w	r8, #0
 8001386:	dd9c      	ble.n	80012c2 <__sflush_r+0x1a>
 8001388:	6a21      	ldr	r1, [r4, #32]
 800138a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800138c:	4643      	mov	r3, r8
 800138e:	463a      	mov	r2, r7
 8001390:	4628      	mov	r0, r5
 8001392:	47b0      	blx	r6
 8001394:	2800      	cmp	r0, #0
 8001396:	dc06      	bgt.n	80013a6 <__sflush_r+0xfe>
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139e:	81a3      	strh	r3, [r4, #12]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	e78e      	b.n	80012c4 <__sflush_r+0x1c>
 80013a6:	4407      	add	r7, r0
 80013a8:	eba8 0800 	sub.w	r8, r8, r0
 80013ac:	e7e9      	b.n	8001382 <__sflush_r+0xda>
 80013ae:	bf00      	nop
 80013b0:	20400001 	.word	0x20400001

080013b4 <_fflush_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	690b      	ldr	r3, [r1, #16]
 80013b8:	4605      	mov	r5, r0
 80013ba:	460c      	mov	r4, r1
 80013bc:	b913      	cbnz	r3, 80013c4 <_fflush_r+0x10>
 80013be:	2500      	movs	r5, #0
 80013c0:	4628      	mov	r0, r5
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	b118      	cbz	r0, 80013ce <_fflush_r+0x1a>
 80013c6:	6983      	ldr	r3, [r0, #24]
 80013c8:	b90b      	cbnz	r3, 80013ce <_fflush_r+0x1a>
 80013ca:	f7ff fa15 	bl	80007f8 <__sinit>
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <_fflush_r+0x6c>)
 80013d0:	429c      	cmp	r4, r3
 80013d2:	d11b      	bne.n	800140c <_fflush_r+0x58>
 80013d4:	686c      	ldr	r4, [r5, #4]
 80013d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0ef      	beq.n	80013be <_fflush_r+0xa>
 80013de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013e0:	07d0      	lsls	r0, r2, #31
 80013e2:	d404      	bmi.n	80013ee <_fflush_r+0x3a>
 80013e4:	0599      	lsls	r1, r3, #22
 80013e6:	d402      	bmi.n	80013ee <_fflush_r+0x3a>
 80013e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ea:	f7ff faa3 	bl	8000934 <__retarget_lock_acquire_recursive>
 80013ee:	4628      	mov	r0, r5
 80013f0:	4621      	mov	r1, r4
 80013f2:	f7ff ff59 	bl	80012a8 <__sflush_r>
 80013f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013f8:	07da      	lsls	r2, r3, #31
 80013fa:	4605      	mov	r5, r0
 80013fc:	d4e0      	bmi.n	80013c0 <_fflush_r+0xc>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	059b      	lsls	r3, r3, #22
 8001402:	d4dd      	bmi.n	80013c0 <_fflush_r+0xc>
 8001404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001406:	f7ff fa96 	bl	8000936 <__retarget_lock_release_recursive>
 800140a:	e7d9      	b.n	80013c0 <_fflush_r+0xc>
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <_fflush_r+0x70>)
 800140e:	429c      	cmp	r4, r3
 8001410:	d101      	bne.n	8001416 <_fflush_r+0x62>
 8001412:	68ac      	ldr	r4, [r5, #8]
 8001414:	e7df      	b.n	80013d6 <_fflush_r+0x22>
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <_fflush_r+0x74>)
 8001418:	429c      	cmp	r4, r3
 800141a:	bf08      	it	eq
 800141c:	68ec      	ldreq	r4, [r5, #12]
 800141e:	e7da      	b.n	80013d6 <_fflush_r+0x22>
 8001420:	08001688 	.word	0x08001688
 8001424:	080016a8 	.word	0x080016a8
 8001428:	08001668 	.word	0x08001668

0800142c <_lseek_r>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	4d07      	ldr	r5, [pc, #28]	; (800144c <_lseek_r+0x20>)
 8001430:	4604      	mov	r4, r0
 8001432:	4608      	mov	r0, r1
 8001434:	4611      	mov	r1, r2
 8001436:	2200      	movs	r2, #0
 8001438:	602a      	str	r2, [r5, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	f7ff f836 	bl	80004ac <_lseek>
 8001440:	1c43      	adds	r3, r0, #1
 8001442:	d102      	bne.n	800144a <_lseek_r+0x1e>
 8001444:	682b      	ldr	r3, [r5, #0]
 8001446:	b103      	cbz	r3, 800144a <_lseek_r+0x1e>
 8001448:	6023      	str	r3, [r4, #0]
 800144a:	bd38      	pop	{r3, r4, r5, pc}
 800144c:	20000094 	.word	0x20000094

08001450 <__swhatbuf_r>:
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	460e      	mov	r6, r1
 8001454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001458:	2900      	cmp	r1, #0
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	4614      	mov	r4, r2
 800145e:	461d      	mov	r5, r3
 8001460:	da08      	bge.n	8001474 <__swhatbuf_r+0x24>
 8001462:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	602a      	str	r2, [r5, #0]
 800146a:	061a      	lsls	r2, r3, #24
 800146c:	d410      	bmi.n	8001490 <__swhatbuf_r+0x40>
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	e00e      	b.n	8001492 <__swhatbuf_r+0x42>
 8001474:	466a      	mov	r2, sp
 8001476:	f000 f8bb 	bl	80015f0 <_fstat_r>
 800147a:	2800      	cmp	r0, #0
 800147c:	dbf1      	blt.n	8001462 <__swhatbuf_r+0x12>
 800147e:	9a01      	ldr	r2, [sp, #4]
 8001480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001488:	425a      	negs	r2, r3
 800148a:	415a      	adcs	r2, r3
 800148c:	602a      	str	r2, [r5, #0]
 800148e:	e7ee      	b.n	800146e <__swhatbuf_r+0x1e>
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	2000      	movs	r0, #0
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	b016      	add	sp, #88	; 0x58
 8001498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800149c <__smakebuf_r>:
 800149c:	898b      	ldrh	r3, [r1, #12]
 800149e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014a0:	079d      	lsls	r5, r3, #30
 80014a2:	4606      	mov	r6, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	d507      	bpl.n	80014b8 <__smakebuf_r+0x1c>
 80014a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	6123      	str	r3, [r4, #16]
 80014b0:	2301      	movs	r3, #1
 80014b2:	6163      	str	r3, [r4, #20]
 80014b4:	b002      	add	sp, #8
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	ab01      	add	r3, sp, #4
 80014ba:	466a      	mov	r2, sp
 80014bc:	f7ff ffc8 	bl	8001450 <__swhatbuf_r>
 80014c0:	9900      	ldr	r1, [sp, #0]
 80014c2:	4605      	mov	r5, r0
 80014c4:	4630      	mov	r0, r6
 80014c6:	f7ff fa57 	bl	8000978 <_malloc_r>
 80014ca:	b948      	cbnz	r0, 80014e0 <__smakebuf_r+0x44>
 80014cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d0:	059a      	lsls	r2, r3, #22
 80014d2:	d4ef      	bmi.n	80014b4 <__smakebuf_r+0x18>
 80014d4:	f023 0303 	bic.w	r3, r3, #3
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	81a3      	strh	r3, [r4, #12]
 80014de:	e7e3      	b.n	80014a8 <__smakebuf_r+0xc>
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <__smakebuf_r+0x7c>)
 80014e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80014e4:	89a3      	ldrh	r3, [r4, #12]
 80014e6:	6020      	str	r0, [r4, #0]
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	81a3      	strh	r3, [r4, #12]
 80014ee:	9b00      	ldr	r3, [sp, #0]
 80014f0:	6163      	str	r3, [r4, #20]
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	6120      	str	r0, [r4, #16]
 80014f6:	b15b      	cbz	r3, 8001510 <__smakebuf_r+0x74>
 80014f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014fc:	4630      	mov	r0, r6
 80014fe:	f000 f889 	bl	8001614 <_isatty_r>
 8001502:	b128      	cbz	r0, 8001510 <__smakebuf_r+0x74>
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	89a0      	ldrh	r0, [r4, #12]
 8001512:	4305      	orrs	r5, r0
 8001514:	81a5      	strh	r5, [r4, #12]
 8001516:	e7cd      	b.n	80014b4 <__smakebuf_r+0x18>
 8001518:	08000791 	.word	0x08000791

0800151c <__malloc_lock>:
 800151c:	4801      	ldr	r0, [pc, #4]	; (8001524 <__malloc_lock+0x8>)
 800151e:	f7ff ba09 	b.w	8000934 <__retarget_lock_acquire_recursive>
 8001522:	bf00      	nop
 8001524:	20000088 	.word	0x20000088

08001528 <__malloc_unlock>:
 8001528:	4801      	ldr	r0, [pc, #4]	; (8001530 <__malloc_unlock+0x8>)
 800152a:	f7ff ba04 	b.w	8000936 <__retarget_lock_release_recursive>
 800152e:	bf00      	nop
 8001530:	20000088 	.word	0x20000088

08001534 <_free_r>:
 8001534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001536:	2900      	cmp	r1, #0
 8001538:	d044      	beq.n	80015c4 <_free_r+0x90>
 800153a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800153e:	9001      	str	r0, [sp, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f1a1 0404 	sub.w	r4, r1, #4
 8001546:	bfb8      	it	lt
 8001548:	18e4      	addlt	r4, r4, r3
 800154a:	f7ff ffe7 	bl	800151c <__malloc_lock>
 800154e:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <_free_r+0x94>)
 8001550:	9801      	ldr	r0, [sp, #4]
 8001552:	6813      	ldr	r3, [r2, #0]
 8001554:	b933      	cbnz	r3, 8001564 <_free_r+0x30>
 8001556:	6063      	str	r3, [r4, #4]
 8001558:	6014      	str	r4, [r2, #0]
 800155a:	b003      	add	sp, #12
 800155c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001560:	f7ff bfe2 	b.w	8001528 <__malloc_unlock>
 8001564:	42a3      	cmp	r3, r4
 8001566:	d908      	bls.n	800157a <_free_r+0x46>
 8001568:	6825      	ldr	r5, [r4, #0]
 800156a:	1961      	adds	r1, r4, r5
 800156c:	428b      	cmp	r3, r1
 800156e:	bf01      	itttt	eq
 8001570:	6819      	ldreq	r1, [r3, #0]
 8001572:	685b      	ldreq	r3, [r3, #4]
 8001574:	1949      	addeq	r1, r1, r5
 8001576:	6021      	streq	r1, [r4, #0]
 8001578:	e7ed      	b.n	8001556 <_free_r+0x22>
 800157a:	461a      	mov	r2, r3
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	b10b      	cbz	r3, 8001584 <_free_r+0x50>
 8001580:	42a3      	cmp	r3, r4
 8001582:	d9fa      	bls.n	800157a <_free_r+0x46>
 8001584:	6811      	ldr	r1, [r2, #0]
 8001586:	1855      	adds	r5, r2, r1
 8001588:	42a5      	cmp	r5, r4
 800158a:	d10b      	bne.n	80015a4 <_free_r+0x70>
 800158c:	6824      	ldr	r4, [r4, #0]
 800158e:	4421      	add	r1, r4
 8001590:	1854      	adds	r4, r2, r1
 8001592:	42a3      	cmp	r3, r4
 8001594:	6011      	str	r1, [r2, #0]
 8001596:	d1e0      	bne.n	800155a <_free_r+0x26>
 8001598:	681c      	ldr	r4, [r3, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	6053      	str	r3, [r2, #4]
 800159e:	4421      	add	r1, r4
 80015a0:	6011      	str	r1, [r2, #0]
 80015a2:	e7da      	b.n	800155a <_free_r+0x26>
 80015a4:	d902      	bls.n	80015ac <_free_r+0x78>
 80015a6:	230c      	movs	r3, #12
 80015a8:	6003      	str	r3, [r0, #0]
 80015aa:	e7d6      	b.n	800155a <_free_r+0x26>
 80015ac:	6825      	ldr	r5, [r4, #0]
 80015ae:	1961      	adds	r1, r4, r5
 80015b0:	428b      	cmp	r3, r1
 80015b2:	bf04      	itt	eq
 80015b4:	6819      	ldreq	r1, [r3, #0]
 80015b6:	685b      	ldreq	r3, [r3, #4]
 80015b8:	6063      	str	r3, [r4, #4]
 80015ba:	bf04      	itt	eq
 80015bc:	1949      	addeq	r1, r1, r5
 80015be:	6021      	streq	r1, [r4, #0]
 80015c0:	6054      	str	r4, [r2, #4]
 80015c2:	e7ca      	b.n	800155a <_free_r+0x26>
 80015c4:	b003      	add	sp, #12
 80015c6:	bd30      	pop	{r4, r5, pc}
 80015c8:	2000008c 	.word	0x2000008c

080015cc <_read_r>:
 80015cc:	b538      	push	{r3, r4, r5, lr}
 80015ce:	4d07      	ldr	r5, [pc, #28]	; (80015ec <_read_r+0x20>)
 80015d0:	4604      	mov	r4, r0
 80015d2:	4608      	mov	r0, r1
 80015d4:	4611      	mov	r1, r2
 80015d6:	2200      	movs	r2, #0
 80015d8:	602a      	str	r2, [r5, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	f7fe ff06 	bl	80003ec <_read>
 80015e0:	1c43      	adds	r3, r0, #1
 80015e2:	d102      	bne.n	80015ea <_read_r+0x1e>
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	b103      	cbz	r3, 80015ea <_read_r+0x1e>
 80015e8:	6023      	str	r3, [r4, #0]
 80015ea:	bd38      	pop	{r3, r4, r5, pc}
 80015ec:	20000094 	.word	0x20000094

080015f0 <_fstat_r>:
 80015f0:	b538      	push	{r3, r4, r5, lr}
 80015f2:	4d07      	ldr	r5, [pc, #28]	; (8001610 <_fstat_r+0x20>)
 80015f4:	2300      	movs	r3, #0
 80015f6:	4604      	mov	r4, r0
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	602b      	str	r3, [r5, #0]
 80015fe:	f7fe ff3a 	bl	8000476 <_fstat>
 8001602:	1c43      	adds	r3, r0, #1
 8001604:	d102      	bne.n	800160c <_fstat_r+0x1c>
 8001606:	682b      	ldr	r3, [r5, #0]
 8001608:	b103      	cbz	r3, 800160c <_fstat_r+0x1c>
 800160a:	6023      	str	r3, [r4, #0]
 800160c:	bd38      	pop	{r3, r4, r5, pc}
 800160e:	bf00      	nop
 8001610:	20000094 	.word	0x20000094

08001614 <_isatty_r>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4d06      	ldr	r5, [pc, #24]	; (8001630 <_isatty_r+0x1c>)
 8001618:	2300      	movs	r3, #0
 800161a:	4604      	mov	r4, r0
 800161c:	4608      	mov	r0, r1
 800161e:	602b      	str	r3, [r5, #0]
 8001620:	f7fe ff39 	bl	8000496 <_isatty>
 8001624:	1c43      	adds	r3, r0, #1
 8001626:	d102      	bne.n	800162e <_isatty_r+0x1a>
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	b103      	cbz	r3, 800162e <_isatty_r+0x1a>
 800162c:	6023      	str	r3, [r4, #0]
 800162e:	bd38      	pop	{r3, r4, r5, pc}
 8001630:	20000094 	.word	0x20000094

08001634 <_init>:
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	bf00      	nop
 8001638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163a:	bc08      	pop	{r3}
 800163c:	469e      	mov	lr, r3
 800163e:	4770      	bx	lr

08001640 <_fini>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr
