
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003e4  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  000103e4  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  000103e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003e4  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004bd  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000015a  00000000  00000000  000108d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f2  00000000  00000000  00010ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000627  00000000  00000000  000294da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a93b  00000000  00000000  00029b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b443c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000b448c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003c4 	.word	0x080003c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003c4 	.word	0x080003c4

08000204 <main>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);
void uart2_tx_init(void);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	uart2_tx_init();
 8000208:	f000 f804 	bl	8000214 <uart2_tx_init>

	while(1)
	{
		uart2_write('Y');
 800020c:	2059      	movs	r0, #89	; 0x59
 800020e:	f000 f84d 	bl	80002ac <uart2_write>
 8000212:	e7fb      	b.n	800020c <main+0x8>

08000214 <uart2_tx_init>:
	}
}


void uart2_tx_init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	////////////// Configure uart gpio pin
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000218:	4b20      	ldr	r3, [pc, #128]	; (800029c <uart2_tx_init+0x88>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <uart2_tx_init+0x88>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 to alt func mode
	GPIOA->MODER &= ~(1U<<4);
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <uart2_tx_init+0x8c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1d      	ldr	r2, [pc, #116]	; (80002a0 <uart2_tx_init+0x8c>)
 800022a:	f023 0310 	bic.w	r3, r3, #16
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000230:	4b1b      	ldr	r3, [pc, #108]	; (80002a0 <uart2_tx_init+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <uart2_tx_init+0x8c>)
 8000236:	f043 0320 	orr.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]

	// Set PA2 alt func type to UART_TX( AF07)
	GPIOA->AFR[0] |= (1U<<8);
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <uart2_tx_init+0x8c>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <uart2_tx_init+0x8c>)
 8000242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000246:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000248:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <uart2_tx_init+0x8c>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <uart2_tx_init+0x8c>)
 800024e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <uart2_tx_init+0x8c>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <uart2_tx_init+0x8c>)
 800025a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <uart2_tx_init+0x8c>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <uart2_tx_init+0x8c>)
 8000266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800026a:	6213      	str	r3, [r2, #32]

	///////// Configure uart module
	// Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <uart2_tx_init+0x88>)
 800026e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <uart2_tx_init+0x88>)
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800027c:	4909      	ldr	r1, [pc, #36]	; (80002a4 <uart2_tx_init+0x90>)
 800027e:	480a      	ldr	r0, [pc, #40]	; (80002a8 <uart2_tx_init+0x94>)
 8000280:	f000 f82c 	bl	80002dc <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <uart2_tx_init+0x94>)
 8000286:	2208      	movs	r2, #8
 8000288:	60da      	str	r2, [r3, #12]

	// Enable uart module
	USART2->CR1 |= CR1_UE;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <uart2_tx_init+0x94>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <uart2_tx_init+0x94>)
 8000290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000294:	60d3      	str	r3, [r2, #12]
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000
 80002a4:	00f42400 	.word	0x00f42400
 80002a8:	40004400 	.word	0x40004400

080002ac <uart2_write>:

void uart2_write(int ch)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	// Make sure transmit data register is empty
	while (!(USART2->SR & SR_TXE)){}
 80002b4:	bf00      	nop
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <uart2_write+0x2c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <uart2_write+0xa>

	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <uart2_write+0x2c>)
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	6053      	str	r3, [r2, #4]
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40004400 	.word	0x40004400

080002dc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	68b8      	ldr	r0, [r7, #8]
 80002ec:	f000 f808 	bl	8000300 <compute_uart_bd>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	609a      	str	r2, [r3, #8]
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	085a      	lsrs	r2, r3, #1
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	441a      	add	r2, r3
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	fbb2 f3f3 	udiv	r3, r2, r3
 8000318:	b29b      	uxth	r3, r3
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	; (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	; (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	; (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff53 	bl	8000204 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	2000001c 	.word	0x2000001c

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	; (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	; (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	; (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	; (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
