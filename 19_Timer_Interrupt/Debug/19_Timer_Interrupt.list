
19_Timer_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001624  08001624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d4  080016d4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016d4  080016d4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d4  080016d4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001740  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001740  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a07  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065e  00000000  00000000  00021a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00022100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  000222a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f5f  00000000  00000000  000223e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000025cb  00000000  00000000  00024347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000907fc  00000000  00000000  00026912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b710e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ce0  00000000  00000000  000b7160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800160c 	.word	0x0800160c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800160c 	.word	0x0800160c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
#define LED_PIN		PIN5

static void tim2_callback(void);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |=GPIOAEN;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <main+0x34>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <main+0x34>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PA5 as output pin
	GPIOA->MODER |= (1U<<10);
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <main+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <main+0x38>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <main+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <main+0x38>)
 80002d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002d6:	6013      	str	r3, [r2, #0]

	uart2_tx_init();
 80002d8:	f000 f924 	bl	8000524 <uart2_tx_init>
	tim2_1hz_interrupt_init();
 80002dc:	f000 f8e8 	bl	80004b0 <tim2_1hz_interrupt_init>


	while(1)
 80002e0:	e7fe      	b.n	80002e0 <main+0x30>
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000

080002ec <tim2_callback>:

	}
}

static void tim2_callback(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	printf("A second passed !! \n\r");
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <tim2_callback+0x1c>)
 80002f2:	f000 f9fd 	bl	80006f0 <iprintf>
	GPIOA->ODR ^=LED_PIN;
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <tim2_callback+0x20>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a04      	ldr	r2, [pc, #16]	; (800030c <tim2_callback+0x20>)
 80002fc:	f083 0320 	eor.w	r3, r3, #32
 8000300:	6153      	str	r3, [r2, #20]
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	08001624 	.word	0x08001624
 800030c:	40020000 	.word	0x40020000

08000310 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	//Clear update interrupt flag in SR
	TIM2->SR &= ~SR_UIF;
 8000314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031e:	f023 0301 	bic.w	r3, r3, #1
 8000322:	6113      	str	r3, [r2, #16]

	//Do something
	tim2_callback();
 8000324:	f7ff ffe2 	bl	80002ec <tim2_callback>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	e00a      	b.n	8000354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800033e:	f3af 8000 	nop.w
 8000342:	4601      	mov	r1, r0
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	60ba      	str	r2, [r7, #8]
 800034a:	b2ca      	uxtb	r2, r1
 800034c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	3301      	adds	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	697a      	ldr	r2, [r7, #20]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	dbf0      	blt.n	800033e <_read+0x12>
  }

  return len;
 800035c:	687b      	ldr	r3, [r7, #4]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b086      	sub	sp, #24
 800036a:	af00      	add	r7, sp, #0
 800036c:	60f8      	str	r0, [r7, #12]
 800036e:	60b9      	str	r1, [r7, #8]
 8000370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	e009      	b.n	800038c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	60ba      	str	r2, [r7, #8]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f8c3 	bl	800050c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	3301      	adds	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	697a      	ldr	r2, [r7, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	429a      	cmp	r2, r3
 8000392:	dbf1      	blt.n	8000378 <_write+0x12>
  }
  return len;
 8000394:	687b      	ldr	r3, [r7, #4]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3718      	adds	r7, #24
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}

0800039e <_close>:

int _close(int file)
{
 800039e:	b480      	push	{r7}
 80003a0:	b083      	sub	sp, #12
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003b6:	b480      	push	{r7}
 80003b8:	b083      	sub	sp, #12
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003c6:	605a      	str	r2, [r3, #4]
  return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <_isatty>:

int _isatty(int file)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
	...

08000408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000410:	4a14      	ldr	r2, [pc, #80]	; (8000464 <_sbrk+0x5c>)
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <_sbrk+0x60>)
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <_sbrk+0x64>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d102      	bne.n	800042a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <_sbrk+0x64>)
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <_sbrk+0x68>)
 8000428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <_sbrk+0x64>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	693a      	ldr	r2, [r7, #16]
 8000434:	429a      	cmp	r2, r3
 8000436:	d207      	bcs.n	8000448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000438:	f000 f928 	bl	800068c <__errno>
 800043c:	4603      	mov	r3, r0
 800043e:	220c      	movs	r2, #12
 8000440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000442:	f04f 33ff 	mov.w	r3, #4294967295
 8000446:	e009      	b.n	800045c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <_sbrk+0x64>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <_sbrk+0x64>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <_sbrk+0x64>)
 8000458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800045a:	68fb      	ldr	r3, [r7, #12]
}
 800045c:	4618      	mov	r0, r3
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20020000 	.word	0x20020000
 8000468:	00000400 	.word	0x00000400
 800046c:	20000080 	.word	0x20000080
 8000470:	20000098 	.word	0x20000098

08000474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000482:	2b00      	cmp	r3, #0
 8000484:	db0b      	blt.n	800049e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	f003 021f 	and.w	r2, r3, #31
 800048c:	4907      	ldr	r1, [pc, #28]	; (80004ac <__NVIC_EnableIRQ+0x38>)
 800048e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000492:	095b      	lsrs	r3, r3, #5
 8000494:	2001      	movs	r0, #1
 8000496:	fa00 f202 	lsl.w	r2, r0, r2
 800049a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000e100 	.word	0xe000e100

080004b0 <tim2_1hz_interrupt_init>:
	//Enable timer
	TIM2->CR1 |= CR1_CEN;
}

void tim2_1hz_interrupt_init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	//Enable clock access to Timer 2
	RCC->APB1ENR |= TIM2EN;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <tim2_1hz_interrupt_init+0x58>)
 80004b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b8:	4a13      	ldr	r2, [pc, #76]	; (8000508 <tim2_1hz_interrupt_init+0x58>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6413      	str	r3, [r2, #64]	; 0x40

	//Set prescaler value
	TIM2->PSC = 1600 - 1; 	// 16 000 000 / 1 600 = 10 000
 80004c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c4:	f240 623f 	movw	r2, #1599	; 0x63f
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28

	//Set autoreload value
	TIM2->ARR = 10000 - 1;	// 10 000 / 10 000 = 1
 80004ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c

	//Clear counter
	TIM2->CNT = 0;
 80004d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d8:	2200      	movs	r2, #0
 80004da:	625a      	str	r2, [r3, #36]	; 0x24

	//Enable timer
	TIM2->CR1 |= CR1_CEN;
 80004dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]

	//Enable TIM interrupt
	TIM2->DIER |= DIER_UIE;
 80004ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	60d3      	str	r3, [r2, #12]

	//Enable TIM interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 80004fc:	201c      	movs	r0, #28
 80004fe:	f7ff ffb9 	bl	8000474 <__NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023800 	.word	0x40023800

0800050c <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);


int __io_putchar(int ch)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f851 	bl	80005bc <uart2_write>
	return ch;
 800051a:	687b      	ldr	r3, [r7, #4]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <uart2_tx_init>:

void uart2_tx_init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	////////////// Configure uart gpio pin
	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <uart2_tx_init+0x88>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	4a1f      	ldr	r2, [pc, #124]	; (80005ac <uart2_tx_init+0x88>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA2 to alt func mode
	GPIOA->MODER &= ~(1U<<4);
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <uart2_tx_init+0x8c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <uart2_tx_init+0x8c>)
 800053a:	f023 0310 	bic.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <uart2_tx_init+0x8c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <uart2_tx_init+0x8c>)
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	6013      	str	r3, [r2, #0]

	// Set PA2 alt func type to UART_TX( AF07)
	GPIOA->AFR[0] |= (1U<<8);
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <uart2_tx_init+0x8c>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <uart2_tx_init+0x8c>)
 8000552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000556:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <uart2_tx_init+0x8c>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <uart2_tx_init+0x8c>)
 800055e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000562:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <uart2_tx_init+0x8c>)
 8000566:	6a1b      	ldr	r3, [r3, #32]
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <uart2_tx_init+0x8c>)
 800056a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800056e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <uart2_tx_init+0x8c>)
 8000572:	6a1b      	ldr	r3, [r3, #32]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <uart2_tx_init+0x8c>)
 8000576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800057a:	6213      	str	r3, [r2, #32]

	///////// Configure uart module
	// Enable clock access to uart2
	RCC->APB1ENR |= UART2EN;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <uart2_tx_init+0x88>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <uart2_tx_init+0x88>)
 8000582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800058c:	4909      	ldr	r1, [pc, #36]	; (80005b4 <uart2_tx_init+0x90>)
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <uart2_tx_init+0x94>)
 8000590:	f000 f82c 	bl	80005ec <uart_set_baudrate>

	// Configure transfer direction
	USART2->CR1 = CR1_TE;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <uart2_tx_init+0x94>)
 8000596:	2208      	movs	r2, #8
 8000598:	60da      	str	r2, [r3, #12]

	// Enable uart module
	USART2->CR1 |= CR1_UE;
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <uart2_tx_init+0x94>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <uart2_tx_init+0x94>)
 80005a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005a4:	60d3      	str	r3, [r2, #12]
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000
 80005b4:	00f42400 	.word	0x00f42400
 80005b8:	40004400 	.word	0x40004400

080005bc <uart2_write>:
	// Read data
	return USART2->DR;
}

void uart2_write(int ch)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	// Make sure transmit data register is empty
	while (!(USART2->SR & SR_TXE)){}
 80005c4:	bf00      	nop
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <uart2_write+0x2c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <uart2_write+0xa>

	// Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <uart2_write+0x2c>)
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	6053      	str	r3, [r2, #4]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40004400 	.word	0x40004400

080005ec <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f000 f808 	bl	8000610 <compute_uart_bd>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	609a      	str	r2, [r3, #8]
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	085a      	lsrs	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	441a      	add	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	fbb2 f3f3 	udiv	r3, r2, r3
 8000628:	b29b      	uxth	r3, r3
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800063c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 8000642:	490d      	ldr	r1, [pc, #52]	; (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <LoopForever+0xe>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000658:	4c0a      	ldr	r4, [pc, #40]	; (8000684 <LoopForever+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000666:	f000 f817 	bl	8000698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fe21 	bl	80002b0 <main>

0800066e <LoopForever>:

LoopForever:
  b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800067c:	080016dc 	.word	0x080016dc
  ldr r2, =_sbss
 8000680:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000684:	20000094 	.word	0x20000094

08000688 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC_IRQHandler>
	...

0800068c <__errno>:
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <__errno+0x8>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <__libc_init_array>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	4d0d      	ldr	r5, [pc, #52]	; (80006d0 <__libc_init_array+0x38>)
 800069c:	4c0d      	ldr	r4, [pc, #52]	; (80006d4 <__libc_init_array+0x3c>)
 800069e:	1b64      	subs	r4, r4, r5
 80006a0:	10a4      	asrs	r4, r4, #2
 80006a2:	2600      	movs	r6, #0
 80006a4:	42a6      	cmp	r6, r4
 80006a6:	d109      	bne.n	80006bc <__libc_init_array+0x24>
 80006a8:	4d0b      	ldr	r5, [pc, #44]	; (80006d8 <__libc_init_array+0x40>)
 80006aa:	4c0c      	ldr	r4, [pc, #48]	; (80006dc <__libc_init_array+0x44>)
 80006ac:	f000 ffae 	bl	800160c <_init>
 80006b0:	1b64      	subs	r4, r4, r5
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	2600      	movs	r6, #0
 80006b6:	42a6      	cmp	r6, r4
 80006b8:	d105      	bne.n	80006c6 <__libc_init_array+0x2e>
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c0:	4798      	blx	r3
 80006c2:	3601      	adds	r6, #1
 80006c4:	e7ee      	b.n	80006a4 <__libc_init_array+0xc>
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	4798      	blx	r3
 80006cc:	3601      	adds	r6, #1
 80006ce:	e7f2      	b.n	80006b6 <__libc_init_array+0x1e>
 80006d0:	080016d4 	.word	0x080016d4
 80006d4:	080016d4 	.word	0x080016d4
 80006d8:	080016d4 	.word	0x080016d4
 80006dc:	080016d8 	.word	0x080016d8

080006e0 <memset>:
 80006e0:	4402      	add	r2, r0
 80006e2:	4603      	mov	r3, r0
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d100      	bne.n	80006ea <memset+0xa>
 80006e8:	4770      	bx	lr
 80006ea:	f803 1b01 	strb.w	r1, [r3], #1
 80006ee:	e7f9      	b.n	80006e4 <memset+0x4>

080006f0 <iprintf>:
 80006f0:	b40f      	push	{r0, r1, r2, r3}
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <iprintf+0x2c>)
 80006f4:	b513      	push	{r0, r1, r4, lr}
 80006f6:	681c      	ldr	r4, [r3, #0]
 80006f8:	b124      	cbz	r4, 8000704 <iprintf+0x14>
 80006fa:	69a3      	ldr	r3, [r4, #24]
 80006fc:	b913      	cbnz	r3, 8000704 <iprintf+0x14>
 80006fe:	4620      	mov	r0, r4
 8000700:	f000 f866 	bl	80007d0 <__sinit>
 8000704:	ab05      	add	r3, sp, #20
 8000706:	9a04      	ldr	r2, [sp, #16]
 8000708:	68a1      	ldr	r1, [r4, #8]
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	4620      	mov	r0, r4
 800070e:	f000 f9bd 	bl	8000a8c <_vfiprintf_r>
 8000712:	b002      	add	sp, #8
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	b004      	add	sp, #16
 800071a:	4770      	bx	lr
 800071c:	20000000 	.word	0x20000000

08000720 <std>:
 8000720:	2300      	movs	r3, #0
 8000722:	b510      	push	{r4, lr}
 8000724:	4604      	mov	r4, r0
 8000726:	e9c0 3300 	strd	r3, r3, [r0]
 800072a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800072e:	6083      	str	r3, [r0, #8]
 8000730:	8181      	strh	r1, [r0, #12]
 8000732:	6643      	str	r3, [r0, #100]	; 0x64
 8000734:	81c2      	strh	r2, [r0, #14]
 8000736:	6183      	str	r3, [r0, #24]
 8000738:	4619      	mov	r1, r3
 800073a:	2208      	movs	r2, #8
 800073c:	305c      	adds	r0, #92	; 0x5c
 800073e:	f7ff ffcf 	bl	80006e0 <memset>
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <std+0x38>)
 8000744:	6263      	str	r3, [r4, #36]	; 0x24
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <std+0x3c>)
 8000748:	62a3      	str	r3, [r4, #40]	; 0x28
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <std+0x40>)
 800074c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <std+0x44>)
 8000750:	6224      	str	r4, [r4, #32]
 8000752:	6323      	str	r3, [r4, #48]	; 0x30
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	08001035 	.word	0x08001035
 800075c:	08001057 	.word	0x08001057
 8000760:	0800108f 	.word	0x0800108f
 8000764:	080010b3 	.word	0x080010b3

08000768 <_cleanup_r>:
 8000768:	4901      	ldr	r1, [pc, #4]	; (8000770 <_cleanup_r+0x8>)
 800076a:	f000 b8af 	b.w	80008cc <_fwalk_reent>
 800076e:	bf00      	nop
 8000770:	0800138d 	.word	0x0800138d

08000774 <__sfmoreglue>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	2268      	movs	r2, #104	; 0x68
 8000778:	1e4d      	subs	r5, r1, #1
 800077a:	4355      	muls	r5, r2
 800077c:	460e      	mov	r6, r1
 800077e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000782:	f000 f8e5 	bl	8000950 <_malloc_r>
 8000786:	4604      	mov	r4, r0
 8000788:	b140      	cbz	r0, 800079c <__sfmoreglue+0x28>
 800078a:	2100      	movs	r1, #0
 800078c:	e9c0 1600 	strd	r1, r6, [r0]
 8000790:	300c      	adds	r0, #12
 8000792:	60a0      	str	r0, [r4, #8]
 8000794:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000798:	f7ff ffa2 	bl	80006e0 <memset>
 800079c:	4620      	mov	r0, r4
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__sfp_lock_acquire>:
 80007a0:	4801      	ldr	r0, [pc, #4]	; (80007a8 <__sfp_lock_acquire+0x8>)
 80007a2:	f000 b8b3 	b.w	800090c <__retarget_lock_acquire_recursive>
 80007a6:	bf00      	nop
 80007a8:	20000085 	.word	0x20000085

080007ac <__sfp_lock_release>:
 80007ac:	4801      	ldr	r0, [pc, #4]	; (80007b4 <__sfp_lock_release+0x8>)
 80007ae:	f000 b8ae 	b.w	800090e <__retarget_lock_release_recursive>
 80007b2:	bf00      	nop
 80007b4:	20000085 	.word	0x20000085

080007b8 <__sinit_lock_acquire>:
 80007b8:	4801      	ldr	r0, [pc, #4]	; (80007c0 <__sinit_lock_acquire+0x8>)
 80007ba:	f000 b8a7 	b.w	800090c <__retarget_lock_acquire_recursive>
 80007be:	bf00      	nop
 80007c0:	20000086 	.word	0x20000086

080007c4 <__sinit_lock_release>:
 80007c4:	4801      	ldr	r0, [pc, #4]	; (80007cc <__sinit_lock_release+0x8>)
 80007c6:	f000 b8a2 	b.w	800090e <__retarget_lock_release_recursive>
 80007ca:	bf00      	nop
 80007cc:	20000086 	.word	0x20000086

080007d0 <__sinit>:
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	f7ff fff0 	bl	80007b8 <__sinit_lock_acquire>
 80007d8:	69a3      	ldr	r3, [r4, #24]
 80007da:	b11b      	cbz	r3, 80007e4 <__sinit+0x14>
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e0:	f7ff bff0 	b.w	80007c4 <__sinit_lock_release>
 80007e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007e8:	6523      	str	r3, [r4, #80]	; 0x50
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <__sinit+0x68>)
 80007ec:	4a13      	ldr	r2, [pc, #76]	; (800083c <__sinit+0x6c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80007f2:	42a3      	cmp	r3, r4
 80007f4:	bf04      	itt	eq
 80007f6:	2301      	moveq	r3, #1
 80007f8:	61a3      	streq	r3, [r4, #24]
 80007fa:	4620      	mov	r0, r4
 80007fc:	f000 f820 	bl	8000840 <__sfp>
 8000800:	6060      	str	r0, [r4, #4]
 8000802:	4620      	mov	r0, r4
 8000804:	f000 f81c 	bl	8000840 <__sfp>
 8000808:	60a0      	str	r0, [r4, #8]
 800080a:	4620      	mov	r0, r4
 800080c:	f000 f818 	bl	8000840 <__sfp>
 8000810:	2200      	movs	r2, #0
 8000812:	60e0      	str	r0, [r4, #12]
 8000814:	2104      	movs	r1, #4
 8000816:	6860      	ldr	r0, [r4, #4]
 8000818:	f7ff ff82 	bl	8000720 <std>
 800081c:	68a0      	ldr	r0, [r4, #8]
 800081e:	2201      	movs	r2, #1
 8000820:	2109      	movs	r1, #9
 8000822:	f7ff ff7d 	bl	8000720 <std>
 8000826:	68e0      	ldr	r0, [r4, #12]
 8000828:	2202      	movs	r2, #2
 800082a:	2112      	movs	r1, #18
 800082c:	f7ff ff78 	bl	8000720 <std>
 8000830:	2301      	movs	r3, #1
 8000832:	61a3      	str	r3, [r4, #24]
 8000834:	e7d2      	b.n	80007dc <__sinit+0xc>
 8000836:	bf00      	nop
 8000838:	0800163c 	.word	0x0800163c
 800083c:	08000769 	.word	0x08000769

08000840 <__sfp>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	4607      	mov	r7, r0
 8000844:	f7ff ffac 	bl	80007a0 <__sfp_lock_acquire>
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <__sfp+0x84>)
 800084a:	681e      	ldr	r6, [r3, #0]
 800084c:	69b3      	ldr	r3, [r6, #24]
 800084e:	b913      	cbnz	r3, 8000856 <__sfp+0x16>
 8000850:	4630      	mov	r0, r6
 8000852:	f7ff ffbd 	bl	80007d0 <__sinit>
 8000856:	3648      	adds	r6, #72	; 0x48
 8000858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800085c:	3b01      	subs	r3, #1
 800085e:	d503      	bpl.n	8000868 <__sfp+0x28>
 8000860:	6833      	ldr	r3, [r6, #0]
 8000862:	b30b      	cbz	r3, 80008a8 <__sfp+0x68>
 8000864:	6836      	ldr	r6, [r6, #0]
 8000866:	e7f7      	b.n	8000858 <__sfp+0x18>
 8000868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800086c:	b9d5      	cbnz	r5, 80008a4 <__sfp+0x64>
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <__sfp+0x88>)
 8000870:	60e3      	str	r3, [r4, #12]
 8000872:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000876:	6665      	str	r5, [r4, #100]	; 0x64
 8000878:	f000 f847 	bl	800090a <__retarget_lock_init_recursive>
 800087c:	f7ff ff96 	bl	80007ac <__sfp_lock_release>
 8000880:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000884:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000888:	6025      	str	r5, [r4, #0]
 800088a:	61a5      	str	r5, [r4, #24]
 800088c:	2208      	movs	r2, #8
 800088e:	4629      	mov	r1, r5
 8000890:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000894:	f7ff ff24 	bl	80006e0 <memset>
 8000898:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800089c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008a0:	4620      	mov	r0, r4
 80008a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a4:	3468      	adds	r4, #104	; 0x68
 80008a6:	e7d9      	b.n	800085c <__sfp+0x1c>
 80008a8:	2104      	movs	r1, #4
 80008aa:	4638      	mov	r0, r7
 80008ac:	f7ff ff62 	bl	8000774 <__sfmoreglue>
 80008b0:	4604      	mov	r4, r0
 80008b2:	6030      	str	r0, [r6, #0]
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d1d5      	bne.n	8000864 <__sfp+0x24>
 80008b8:	f7ff ff78 	bl	80007ac <__sfp_lock_release>
 80008bc:	230c      	movs	r3, #12
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	e7ee      	b.n	80008a0 <__sfp+0x60>
 80008c2:	bf00      	nop
 80008c4:	0800163c 	.word	0x0800163c
 80008c8:	ffff0001 	.word	0xffff0001

080008cc <_fwalk_reent>:
 80008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d0:	4606      	mov	r6, r0
 80008d2:	4688      	mov	r8, r1
 80008d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008d8:	2700      	movs	r7, #0
 80008da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008de:	f1b9 0901 	subs.w	r9, r9, #1
 80008e2:	d505      	bpl.n	80008f0 <_fwalk_reent+0x24>
 80008e4:	6824      	ldr	r4, [r4, #0]
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	d1f7      	bne.n	80008da <_fwalk_reent+0xe>
 80008ea:	4638      	mov	r0, r7
 80008ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008f0:	89ab      	ldrh	r3, [r5, #12]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d907      	bls.n	8000906 <_fwalk_reent+0x3a>
 80008f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008fa:	3301      	adds	r3, #1
 80008fc:	d003      	beq.n	8000906 <_fwalk_reent+0x3a>
 80008fe:	4629      	mov	r1, r5
 8000900:	4630      	mov	r0, r6
 8000902:	47c0      	blx	r8
 8000904:	4307      	orrs	r7, r0
 8000906:	3568      	adds	r5, #104	; 0x68
 8000908:	e7e9      	b.n	80008de <_fwalk_reent+0x12>

0800090a <__retarget_lock_init_recursive>:
 800090a:	4770      	bx	lr

0800090c <__retarget_lock_acquire_recursive>:
 800090c:	4770      	bx	lr

0800090e <__retarget_lock_release_recursive>:
 800090e:	4770      	bx	lr

08000910 <sbrk_aligned>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	4e0e      	ldr	r6, [pc, #56]	; (800094c <sbrk_aligned+0x3c>)
 8000914:	460c      	mov	r4, r1
 8000916:	6831      	ldr	r1, [r6, #0]
 8000918:	4605      	mov	r5, r0
 800091a:	b911      	cbnz	r1, 8000922 <sbrk_aligned+0x12>
 800091c:	f000 fb7a 	bl	8001014 <_sbrk_r>
 8000920:	6030      	str	r0, [r6, #0]
 8000922:	4621      	mov	r1, r4
 8000924:	4628      	mov	r0, r5
 8000926:	f000 fb75 	bl	8001014 <_sbrk_r>
 800092a:	1c43      	adds	r3, r0, #1
 800092c:	d00a      	beq.n	8000944 <sbrk_aligned+0x34>
 800092e:	1cc4      	adds	r4, r0, #3
 8000930:	f024 0403 	bic.w	r4, r4, #3
 8000934:	42a0      	cmp	r0, r4
 8000936:	d007      	beq.n	8000948 <sbrk_aligned+0x38>
 8000938:	1a21      	subs	r1, r4, r0
 800093a:	4628      	mov	r0, r5
 800093c:	f000 fb6a 	bl	8001014 <_sbrk_r>
 8000940:	3001      	adds	r0, #1
 8000942:	d101      	bne.n	8000948 <sbrk_aligned+0x38>
 8000944:	f04f 34ff 	mov.w	r4, #4294967295
 8000948:	4620      	mov	r0, r4
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	2000008c 	.word	0x2000008c

08000950 <_malloc_r>:
 8000950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000954:	1ccd      	adds	r5, r1, #3
 8000956:	f025 0503 	bic.w	r5, r5, #3
 800095a:	3508      	adds	r5, #8
 800095c:	2d0c      	cmp	r5, #12
 800095e:	bf38      	it	cc
 8000960:	250c      	movcc	r5, #12
 8000962:	2d00      	cmp	r5, #0
 8000964:	4607      	mov	r7, r0
 8000966:	db01      	blt.n	800096c <_malloc_r+0x1c>
 8000968:	42a9      	cmp	r1, r5
 800096a:	d905      	bls.n	8000978 <_malloc_r+0x28>
 800096c:	230c      	movs	r3, #12
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	2600      	movs	r6, #0
 8000972:	4630      	mov	r0, r6
 8000974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000978:	4e2e      	ldr	r6, [pc, #184]	; (8000a34 <_malloc_r+0xe4>)
 800097a:	f000 fdbb 	bl	80014f4 <__malloc_lock>
 800097e:	6833      	ldr	r3, [r6, #0]
 8000980:	461c      	mov	r4, r3
 8000982:	bb34      	cbnz	r4, 80009d2 <_malloc_r+0x82>
 8000984:	4629      	mov	r1, r5
 8000986:	4638      	mov	r0, r7
 8000988:	f7ff ffc2 	bl	8000910 <sbrk_aligned>
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	4604      	mov	r4, r0
 8000990:	d14d      	bne.n	8000a2e <_malloc_r+0xde>
 8000992:	6834      	ldr	r4, [r6, #0]
 8000994:	4626      	mov	r6, r4
 8000996:	2e00      	cmp	r6, #0
 8000998:	d140      	bne.n	8000a1c <_malloc_r+0xcc>
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	4631      	mov	r1, r6
 800099e:	4638      	mov	r0, r7
 80009a0:	eb04 0803 	add.w	r8, r4, r3
 80009a4:	f000 fb36 	bl	8001014 <_sbrk_r>
 80009a8:	4580      	cmp	r8, r0
 80009aa:	d13a      	bne.n	8000a22 <_malloc_r+0xd2>
 80009ac:	6821      	ldr	r1, [r4, #0]
 80009ae:	3503      	adds	r5, #3
 80009b0:	1a6d      	subs	r5, r5, r1
 80009b2:	f025 0503 	bic.w	r5, r5, #3
 80009b6:	3508      	adds	r5, #8
 80009b8:	2d0c      	cmp	r5, #12
 80009ba:	bf38      	it	cc
 80009bc:	250c      	movcc	r5, #12
 80009be:	4629      	mov	r1, r5
 80009c0:	4638      	mov	r0, r7
 80009c2:	f7ff ffa5 	bl	8000910 <sbrk_aligned>
 80009c6:	3001      	adds	r0, #1
 80009c8:	d02b      	beq.n	8000a22 <_malloc_r+0xd2>
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	442b      	add	r3, r5
 80009ce:	6023      	str	r3, [r4, #0]
 80009d0:	e00e      	b.n	80009f0 <_malloc_r+0xa0>
 80009d2:	6822      	ldr	r2, [r4, #0]
 80009d4:	1b52      	subs	r2, r2, r5
 80009d6:	d41e      	bmi.n	8000a16 <_malloc_r+0xc6>
 80009d8:	2a0b      	cmp	r2, #11
 80009da:	d916      	bls.n	8000a0a <_malloc_r+0xba>
 80009dc:	1961      	adds	r1, r4, r5
 80009de:	42a3      	cmp	r3, r4
 80009e0:	6025      	str	r5, [r4, #0]
 80009e2:	bf18      	it	ne
 80009e4:	6059      	strne	r1, [r3, #4]
 80009e6:	6863      	ldr	r3, [r4, #4]
 80009e8:	bf08      	it	eq
 80009ea:	6031      	streq	r1, [r6, #0]
 80009ec:	5162      	str	r2, [r4, r5]
 80009ee:	604b      	str	r3, [r1, #4]
 80009f0:	4638      	mov	r0, r7
 80009f2:	f104 060b 	add.w	r6, r4, #11
 80009f6:	f000 fd83 	bl	8001500 <__malloc_unlock>
 80009fa:	f026 0607 	bic.w	r6, r6, #7
 80009fe:	1d23      	adds	r3, r4, #4
 8000a00:	1af2      	subs	r2, r6, r3
 8000a02:	d0b6      	beq.n	8000972 <_malloc_r+0x22>
 8000a04:	1b9b      	subs	r3, r3, r6
 8000a06:	50a3      	str	r3, [r4, r2]
 8000a08:	e7b3      	b.n	8000972 <_malloc_r+0x22>
 8000a0a:	6862      	ldr	r2, [r4, #4]
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	bf0c      	ite	eq
 8000a10:	6032      	streq	r2, [r6, #0]
 8000a12:	605a      	strne	r2, [r3, #4]
 8000a14:	e7ec      	b.n	80009f0 <_malloc_r+0xa0>
 8000a16:	4623      	mov	r3, r4
 8000a18:	6864      	ldr	r4, [r4, #4]
 8000a1a:	e7b2      	b.n	8000982 <_malloc_r+0x32>
 8000a1c:	4634      	mov	r4, r6
 8000a1e:	6876      	ldr	r6, [r6, #4]
 8000a20:	e7b9      	b.n	8000996 <_malloc_r+0x46>
 8000a22:	230c      	movs	r3, #12
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4638      	mov	r0, r7
 8000a28:	f000 fd6a 	bl	8001500 <__malloc_unlock>
 8000a2c:	e7a1      	b.n	8000972 <_malloc_r+0x22>
 8000a2e:	6025      	str	r5, [r4, #0]
 8000a30:	e7de      	b.n	80009f0 <_malloc_r+0xa0>
 8000a32:	bf00      	nop
 8000a34:	20000088 	.word	0x20000088

08000a38 <__sfputc_r>:
 8000a38:	6893      	ldr	r3, [r2, #8]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	b410      	push	{r4}
 8000a40:	6093      	str	r3, [r2, #8]
 8000a42:	da08      	bge.n	8000a56 <__sfputc_r+0x1e>
 8000a44:	6994      	ldr	r4, [r2, #24]
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	db01      	blt.n	8000a4e <__sfputc_r+0x16>
 8000a4a:	290a      	cmp	r1, #10
 8000a4c:	d103      	bne.n	8000a56 <__sfputc_r+0x1e>
 8000a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a52:	f000 bb33 	b.w	80010bc <__swbuf_r>
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	1c58      	adds	r0, r3, #1
 8000a5a:	6010      	str	r0, [r2, #0]
 8000a5c:	7019      	strb	r1, [r3, #0]
 8000a5e:	4608      	mov	r0, r1
 8000a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <__sfputs_r>:
 8000a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a68:	4606      	mov	r6, r0
 8000a6a:	460f      	mov	r7, r1
 8000a6c:	4614      	mov	r4, r2
 8000a6e:	18d5      	adds	r5, r2, r3
 8000a70:	42ac      	cmp	r4, r5
 8000a72:	d101      	bne.n	8000a78 <__sfputs_r+0x12>
 8000a74:	2000      	movs	r0, #0
 8000a76:	e007      	b.n	8000a88 <__sfputs_r+0x22>
 8000a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a7c:	463a      	mov	r2, r7
 8000a7e:	4630      	mov	r0, r6
 8000a80:	f7ff ffda 	bl	8000a38 <__sfputc_r>
 8000a84:	1c43      	adds	r3, r0, #1
 8000a86:	d1f3      	bne.n	8000a70 <__sfputs_r+0xa>
 8000a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a8c <_vfiprintf_r>:
 8000a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a90:	460d      	mov	r5, r1
 8000a92:	b09d      	sub	sp, #116	; 0x74
 8000a94:	4614      	mov	r4, r2
 8000a96:	4698      	mov	r8, r3
 8000a98:	4606      	mov	r6, r0
 8000a9a:	b118      	cbz	r0, 8000aa4 <_vfiprintf_r+0x18>
 8000a9c:	6983      	ldr	r3, [r0, #24]
 8000a9e:	b90b      	cbnz	r3, 8000aa4 <_vfiprintf_r+0x18>
 8000aa0:	f7ff fe96 	bl	80007d0 <__sinit>
 8000aa4:	4b89      	ldr	r3, [pc, #548]	; (8000ccc <_vfiprintf_r+0x240>)
 8000aa6:	429d      	cmp	r5, r3
 8000aa8:	d11b      	bne.n	8000ae2 <_vfiprintf_r+0x56>
 8000aaa:	6875      	ldr	r5, [r6, #4]
 8000aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000aae:	07d9      	lsls	r1, r3, #31
 8000ab0:	d405      	bmi.n	8000abe <_vfiprintf_r+0x32>
 8000ab2:	89ab      	ldrh	r3, [r5, #12]
 8000ab4:	059a      	lsls	r2, r3, #22
 8000ab6:	d402      	bmi.n	8000abe <_vfiprintf_r+0x32>
 8000ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000aba:	f7ff ff27 	bl	800090c <__retarget_lock_acquire_recursive>
 8000abe:	89ab      	ldrh	r3, [r5, #12]
 8000ac0:	071b      	lsls	r3, r3, #28
 8000ac2:	d501      	bpl.n	8000ac8 <_vfiprintf_r+0x3c>
 8000ac4:	692b      	ldr	r3, [r5, #16]
 8000ac6:	b9eb      	cbnz	r3, 8000b04 <_vfiprintf_r+0x78>
 8000ac8:	4629      	mov	r1, r5
 8000aca:	4630      	mov	r0, r6
 8000acc:	f000 fb5a 	bl	8001184 <__swsetup_r>
 8000ad0:	b1c0      	cbz	r0, 8000b04 <_vfiprintf_r+0x78>
 8000ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ad4:	07dc      	lsls	r4, r3, #31
 8000ad6:	d50e      	bpl.n	8000af6 <_vfiprintf_r+0x6a>
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	b01d      	add	sp, #116	; 0x74
 8000ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae2:	4b7b      	ldr	r3, [pc, #492]	; (8000cd0 <_vfiprintf_r+0x244>)
 8000ae4:	429d      	cmp	r5, r3
 8000ae6:	d101      	bne.n	8000aec <_vfiprintf_r+0x60>
 8000ae8:	68b5      	ldr	r5, [r6, #8]
 8000aea:	e7df      	b.n	8000aac <_vfiprintf_r+0x20>
 8000aec:	4b79      	ldr	r3, [pc, #484]	; (8000cd4 <_vfiprintf_r+0x248>)
 8000aee:	429d      	cmp	r5, r3
 8000af0:	bf08      	it	eq
 8000af2:	68f5      	ldreq	r5, [r6, #12]
 8000af4:	e7da      	b.n	8000aac <_vfiprintf_r+0x20>
 8000af6:	89ab      	ldrh	r3, [r5, #12]
 8000af8:	0598      	lsls	r0, r3, #22
 8000afa:	d4ed      	bmi.n	8000ad8 <_vfiprintf_r+0x4c>
 8000afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000afe:	f7ff ff06 	bl	800090e <__retarget_lock_release_recursive>
 8000b02:	e7e9      	b.n	8000ad8 <_vfiprintf_r+0x4c>
 8000b04:	2300      	movs	r3, #0
 8000b06:	9309      	str	r3, [sp, #36]	; 0x24
 8000b08:	2320      	movs	r3, #32
 8000b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b12:	2330      	movs	r3, #48	; 0x30
 8000b14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cd8 <_vfiprintf_r+0x24c>
 8000b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b1c:	f04f 0901 	mov.w	r9, #1
 8000b20:	4623      	mov	r3, r4
 8000b22:	469a      	mov	sl, r3
 8000b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b28:	b10a      	cbz	r2, 8000b2e <_vfiprintf_r+0xa2>
 8000b2a:	2a25      	cmp	r2, #37	; 0x25
 8000b2c:	d1f9      	bne.n	8000b22 <_vfiprintf_r+0x96>
 8000b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8000b32:	d00b      	beq.n	8000b4c <_vfiprintf_r+0xc0>
 8000b34:	465b      	mov	r3, fp
 8000b36:	4622      	mov	r2, r4
 8000b38:	4629      	mov	r1, r5
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	f7ff ff93 	bl	8000a66 <__sfputs_r>
 8000b40:	3001      	adds	r0, #1
 8000b42:	f000 80aa 	beq.w	8000c9a <_vfiprintf_r+0x20e>
 8000b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b48:	445a      	add	r2, fp
 8000b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8000b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 80a2 	beq.w	8000c9a <_vfiprintf_r+0x20e>
 8000b56:	2300      	movs	r3, #0
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b60:	f10a 0a01 	add.w	sl, sl, #1
 8000b64:	9304      	str	r3, [sp, #16]
 8000b66:	9307      	str	r3, [sp, #28]
 8000b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8000b6e:	4654      	mov	r4, sl
 8000b70:	2205      	movs	r2, #5
 8000b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b76:	4858      	ldr	r0, [pc, #352]	; (8000cd8 <_vfiprintf_r+0x24c>)
 8000b78:	f7ff fb4a 	bl	8000210 <memchr>
 8000b7c:	9a04      	ldr	r2, [sp, #16]
 8000b7e:	b9d8      	cbnz	r0, 8000bb8 <_vfiprintf_r+0x12c>
 8000b80:	06d1      	lsls	r1, r2, #27
 8000b82:	bf44      	itt	mi
 8000b84:	2320      	movmi	r3, #32
 8000b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b8a:	0713      	lsls	r3, r2, #28
 8000b8c:	bf44      	itt	mi
 8000b8e:	232b      	movmi	r3, #43	; 0x2b
 8000b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b94:	f89a 3000 	ldrb.w	r3, [sl]
 8000b98:	2b2a      	cmp	r3, #42	; 0x2a
 8000b9a:	d015      	beq.n	8000bc8 <_vfiprintf_r+0x13c>
 8000b9c:	9a07      	ldr	r2, [sp, #28]
 8000b9e:	4654      	mov	r4, sl
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f04f 0c0a 	mov.w	ip, #10
 8000ba6:	4621      	mov	r1, r4
 8000ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bac:	3b30      	subs	r3, #48	; 0x30
 8000bae:	2b09      	cmp	r3, #9
 8000bb0:	d94e      	bls.n	8000c50 <_vfiprintf_r+0x1c4>
 8000bb2:	b1b0      	cbz	r0, 8000be2 <_vfiprintf_r+0x156>
 8000bb4:	9207      	str	r2, [sp, #28]
 8000bb6:	e014      	b.n	8000be2 <_vfiprintf_r+0x156>
 8000bb8:	eba0 0308 	sub.w	r3, r0, r8
 8000bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	9304      	str	r3, [sp, #16]
 8000bc4:	46a2      	mov	sl, r4
 8000bc6:	e7d2      	b.n	8000b6e <_vfiprintf_r+0xe2>
 8000bc8:	9b03      	ldr	r3, [sp, #12]
 8000bca:	1d19      	adds	r1, r3, #4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	9103      	str	r1, [sp, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bfbb      	ittet	lt
 8000bd4:	425b      	neglt	r3, r3
 8000bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8000bda:	9307      	strge	r3, [sp, #28]
 8000bdc:	9307      	strlt	r3, [sp, #28]
 8000bde:	bfb8      	it	lt
 8000be0:	9204      	strlt	r2, [sp, #16]
 8000be2:	7823      	ldrb	r3, [r4, #0]
 8000be4:	2b2e      	cmp	r3, #46	; 0x2e
 8000be6:	d10c      	bne.n	8000c02 <_vfiprintf_r+0x176>
 8000be8:	7863      	ldrb	r3, [r4, #1]
 8000bea:	2b2a      	cmp	r3, #42	; 0x2a
 8000bec:	d135      	bne.n	8000c5a <_vfiprintf_r+0x1ce>
 8000bee:	9b03      	ldr	r3, [sp, #12]
 8000bf0:	1d1a      	adds	r2, r3, #4
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	9203      	str	r2, [sp, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bfb8      	it	lt
 8000bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bfe:	3402      	adds	r4, #2
 8000c00:	9305      	str	r3, [sp, #20]
 8000c02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000ce8 <_vfiprintf_r+0x25c>
 8000c06:	7821      	ldrb	r1, [r4, #0]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4650      	mov	r0, sl
 8000c0c:	f7ff fb00 	bl	8000210 <memchr>
 8000c10:	b140      	cbz	r0, 8000c24 <_vfiprintf_r+0x198>
 8000c12:	2340      	movs	r3, #64	; 0x40
 8000c14:	eba0 000a 	sub.w	r0, r0, sl
 8000c18:	fa03 f000 	lsl.w	r0, r3, r0
 8000c1c:	9b04      	ldr	r3, [sp, #16]
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	3401      	adds	r4, #1
 8000c22:	9304      	str	r3, [sp, #16]
 8000c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c28:	482c      	ldr	r0, [pc, #176]	; (8000cdc <_vfiprintf_r+0x250>)
 8000c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c2e:	2206      	movs	r2, #6
 8000c30:	f7ff faee 	bl	8000210 <memchr>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d03f      	beq.n	8000cb8 <_vfiprintf_r+0x22c>
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <_vfiprintf_r+0x254>)
 8000c3a:	bb1b      	cbnz	r3, 8000c84 <_vfiprintf_r+0x1f8>
 8000c3c:	9b03      	ldr	r3, [sp, #12]
 8000c3e:	3307      	adds	r3, #7
 8000c40:	f023 0307 	bic.w	r3, r3, #7
 8000c44:	3308      	adds	r3, #8
 8000c46:	9303      	str	r3, [sp, #12]
 8000c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c4a:	443b      	add	r3, r7
 8000c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000c4e:	e767      	b.n	8000b20 <_vfiprintf_r+0x94>
 8000c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c54:	460c      	mov	r4, r1
 8000c56:	2001      	movs	r0, #1
 8000c58:	e7a5      	b.n	8000ba6 <_vfiprintf_r+0x11a>
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	3401      	adds	r4, #1
 8000c5e:	9305      	str	r3, [sp, #20]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 0c0a 	mov.w	ip, #10
 8000c66:	4620      	mov	r0, r4
 8000c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c6c:	3a30      	subs	r2, #48	; 0x30
 8000c6e:	2a09      	cmp	r2, #9
 8000c70:	d903      	bls.n	8000c7a <_vfiprintf_r+0x1ee>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0c5      	beq.n	8000c02 <_vfiprintf_r+0x176>
 8000c76:	9105      	str	r1, [sp, #20]
 8000c78:	e7c3      	b.n	8000c02 <_vfiprintf_r+0x176>
 8000c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c7e:	4604      	mov	r4, r0
 8000c80:	2301      	movs	r3, #1
 8000c82:	e7f0      	b.n	8000c66 <_vfiprintf_r+0x1da>
 8000c84:	ab03      	add	r3, sp, #12
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	462a      	mov	r2, r5
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <_vfiprintf_r+0x258>)
 8000c8c:	a904      	add	r1, sp, #16
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f3af 8000 	nop.w
 8000c94:	4607      	mov	r7, r0
 8000c96:	1c78      	adds	r0, r7, #1
 8000c98:	d1d6      	bne.n	8000c48 <_vfiprintf_r+0x1bc>
 8000c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c9c:	07d9      	lsls	r1, r3, #31
 8000c9e:	d405      	bmi.n	8000cac <_vfiprintf_r+0x220>
 8000ca0:	89ab      	ldrh	r3, [r5, #12]
 8000ca2:	059a      	lsls	r2, r3, #22
 8000ca4:	d402      	bmi.n	8000cac <_vfiprintf_r+0x220>
 8000ca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ca8:	f7ff fe31 	bl	800090e <__retarget_lock_release_recursive>
 8000cac:	89ab      	ldrh	r3, [r5, #12]
 8000cae:	065b      	lsls	r3, r3, #25
 8000cb0:	f53f af12 	bmi.w	8000ad8 <_vfiprintf_r+0x4c>
 8000cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cb6:	e711      	b.n	8000adc <_vfiprintf_r+0x50>
 8000cb8:	ab03      	add	r3, sp, #12
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <_vfiprintf_r+0x258>)
 8000cc0:	a904      	add	r1, sp, #16
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f000 f880 	bl	8000dc8 <_printf_i>
 8000cc8:	e7e4      	b.n	8000c94 <_vfiprintf_r+0x208>
 8000cca:	bf00      	nop
 8000ccc:	08001660 	.word	0x08001660
 8000cd0:	08001680 	.word	0x08001680
 8000cd4:	08001640 	.word	0x08001640
 8000cd8:	080016a0 	.word	0x080016a0
 8000cdc:	080016aa 	.word	0x080016aa
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	08000a67 	.word	0x08000a67
 8000ce8:	080016a6 	.word	0x080016a6

08000cec <_printf_common>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	4616      	mov	r6, r2
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	688a      	ldr	r2, [r1, #8]
 8000cf6:	690b      	ldr	r3, [r1, #16]
 8000cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	bfb8      	it	lt
 8000d00:	4613      	movlt	r3, r2
 8000d02:	6033      	str	r3, [r6, #0]
 8000d04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d08:	4607      	mov	r7, r0
 8000d0a:	460c      	mov	r4, r1
 8000d0c:	b10a      	cbz	r2, 8000d12 <_printf_common+0x26>
 8000d0e:	3301      	adds	r3, #1
 8000d10:	6033      	str	r3, [r6, #0]
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	0699      	lsls	r1, r3, #26
 8000d16:	bf42      	ittt	mi
 8000d18:	6833      	ldrmi	r3, [r6, #0]
 8000d1a:	3302      	addmi	r3, #2
 8000d1c:	6033      	strmi	r3, [r6, #0]
 8000d1e:	6825      	ldr	r5, [r4, #0]
 8000d20:	f015 0506 	ands.w	r5, r5, #6
 8000d24:	d106      	bne.n	8000d34 <_printf_common+0x48>
 8000d26:	f104 0a19 	add.w	sl, r4, #25
 8000d2a:	68e3      	ldr	r3, [r4, #12]
 8000d2c:	6832      	ldr	r2, [r6, #0]
 8000d2e:	1a9b      	subs	r3, r3, r2
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	dc26      	bgt.n	8000d82 <_printf_common+0x96>
 8000d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d38:	1e13      	subs	r3, r2, #0
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	bf18      	it	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	0692      	lsls	r2, r2, #26
 8000d42:	d42b      	bmi.n	8000d9c <_printf_common+0xb0>
 8000d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d48:	4649      	mov	r1, r9
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	47c0      	blx	r8
 8000d4e:	3001      	adds	r0, #1
 8000d50:	d01e      	beq.n	8000d90 <_printf_common+0xa4>
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	68e5      	ldr	r5, [r4, #12]
 8000d56:	6832      	ldr	r2, [r6, #0]
 8000d58:	f003 0306 	and.w	r3, r3, #6
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	bf08      	it	eq
 8000d60:	1aad      	subeq	r5, r5, r2
 8000d62:	68a3      	ldr	r3, [r4, #8]
 8000d64:	6922      	ldr	r2, [r4, #16]
 8000d66:	bf0c      	ite	eq
 8000d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d6c:	2500      	movne	r5, #0
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	bfc4      	itt	gt
 8000d72:	1a9b      	subgt	r3, r3, r2
 8000d74:	18ed      	addgt	r5, r5, r3
 8000d76:	2600      	movs	r6, #0
 8000d78:	341a      	adds	r4, #26
 8000d7a:	42b5      	cmp	r5, r6
 8000d7c:	d11a      	bne.n	8000db4 <_printf_common+0xc8>
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e008      	b.n	8000d94 <_printf_common+0xa8>
 8000d82:	2301      	movs	r3, #1
 8000d84:	4652      	mov	r2, sl
 8000d86:	4649      	mov	r1, r9
 8000d88:	4638      	mov	r0, r7
 8000d8a:	47c0      	blx	r8
 8000d8c:	3001      	adds	r0, #1
 8000d8e:	d103      	bne.n	8000d98 <_printf_common+0xac>
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	3501      	adds	r5, #1
 8000d9a:	e7c6      	b.n	8000d2a <_printf_common+0x3e>
 8000d9c:	18e1      	adds	r1, r4, r3
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	2030      	movs	r0, #48	; 0x30
 8000da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000da6:	4422      	add	r2, r4
 8000da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000db0:	3302      	adds	r3, #2
 8000db2:	e7c7      	b.n	8000d44 <_printf_common+0x58>
 8000db4:	2301      	movs	r3, #1
 8000db6:	4622      	mov	r2, r4
 8000db8:	4649      	mov	r1, r9
 8000dba:	4638      	mov	r0, r7
 8000dbc:	47c0      	blx	r8
 8000dbe:	3001      	adds	r0, #1
 8000dc0:	d0e6      	beq.n	8000d90 <_printf_common+0xa4>
 8000dc2:	3601      	adds	r6, #1
 8000dc4:	e7d9      	b.n	8000d7a <_printf_common+0x8e>
	...

08000dc8 <_printf_i>:
 8000dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dcc:	7e0f      	ldrb	r7, [r1, #24]
 8000dce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dd0:	2f78      	cmp	r7, #120	; 0x78
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	4680      	mov	r8, r0
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	469a      	mov	sl, r3
 8000dda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dde:	d807      	bhi.n	8000df0 <_printf_i+0x28>
 8000de0:	2f62      	cmp	r7, #98	; 0x62
 8000de2:	d80a      	bhi.n	8000dfa <_printf_i+0x32>
 8000de4:	2f00      	cmp	r7, #0
 8000de6:	f000 80d8 	beq.w	8000f9a <_printf_i+0x1d2>
 8000dea:	2f58      	cmp	r7, #88	; 0x58
 8000dec:	f000 80a3 	beq.w	8000f36 <_printf_i+0x16e>
 8000df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000df8:	e03a      	b.n	8000e70 <_printf_i+0xa8>
 8000dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000dfe:	2b15      	cmp	r3, #21
 8000e00:	d8f6      	bhi.n	8000df0 <_printf_i+0x28>
 8000e02:	a101      	add	r1, pc, #4	; (adr r1, 8000e08 <_printf_i+0x40>)
 8000e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e08:	08000e61 	.word	0x08000e61
 8000e0c:	08000e75 	.word	0x08000e75
 8000e10:	08000df1 	.word	0x08000df1
 8000e14:	08000df1 	.word	0x08000df1
 8000e18:	08000df1 	.word	0x08000df1
 8000e1c:	08000df1 	.word	0x08000df1
 8000e20:	08000e75 	.word	0x08000e75
 8000e24:	08000df1 	.word	0x08000df1
 8000e28:	08000df1 	.word	0x08000df1
 8000e2c:	08000df1 	.word	0x08000df1
 8000e30:	08000df1 	.word	0x08000df1
 8000e34:	08000f81 	.word	0x08000f81
 8000e38:	08000ea5 	.word	0x08000ea5
 8000e3c:	08000f63 	.word	0x08000f63
 8000e40:	08000df1 	.word	0x08000df1
 8000e44:	08000df1 	.word	0x08000df1
 8000e48:	08000fa3 	.word	0x08000fa3
 8000e4c:	08000df1 	.word	0x08000df1
 8000e50:	08000ea5 	.word	0x08000ea5
 8000e54:	08000df1 	.word	0x08000df1
 8000e58:	08000df1 	.word	0x08000df1
 8000e5c:	08000f6b 	.word	0x08000f6b
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	1d1a      	adds	r2, r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	602a      	str	r2, [r5, #0]
 8000e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0a3      	b.n	8000fbc <_printf_i+0x1f4>
 8000e74:	6820      	ldr	r0, [r4, #0]
 8000e76:	6829      	ldr	r1, [r5, #0]
 8000e78:	0606      	lsls	r6, r0, #24
 8000e7a:	f101 0304 	add.w	r3, r1, #4
 8000e7e:	d50a      	bpl.n	8000e96 <_printf_i+0xce>
 8000e80:	680e      	ldr	r6, [r1, #0]
 8000e82:	602b      	str	r3, [r5, #0]
 8000e84:	2e00      	cmp	r6, #0
 8000e86:	da03      	bge.n	8000e90 <_printf_i+0xc8>
 8000e88:	232d      	movs	r3, #45	; 0x2d
 8000e8a:	4276      	negs	r6, r6
 8000e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e90:	485e      	ldr	r0, [pc, #376]	; (800100c <_printf_i+0x244>)
 8000e92:	230a      	movs	r3, #10
 8000e94:	e019      	b.n	8000eca <_printf_i+0x102>
 8000e96:	680e      	ldr	r6, [r1, #0]
 8000e98:	602b      	str	r3, [r5, #0]
 8000e9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e9e:	bf18      	it	ne
 8000ea0:	b236      	sxthne	r6, r6
 8000ea2:	e7ef      	b.n	8000e84 <_printf_i+0xbc>
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	6820      	ldr	r0, [r4, #0]
 8000ea8:	1d19      	adds	r1, r3, #4
 8000eaa:	6029      	str	r1, [r5, #0]
 8000eac:	0601      	lsls	r1, r0, #24
 8000eae:	d501      	bpl.n	8000eb4 <_printf_i+0xec>
 8000eb0:	681e      	ldr	r6, [r3, #0]
 8000eb2:	e002      	b.n	8000eba <_printf_i+0xf2>
 8000eb4:	0646      	lsls	r6, r0, #25
 8000eb6:	d5fb      	bpl.n	8000eb0 <_printf_i+0xe8>
 8000eb8:	881e      	ldrh	r6, [r3, #0]
 8000eba:	4854      	ldr	r0, [pc, #336]	; (800100c <_printf_i+0x244>)
 8000ebc:	2f6f      	cmp	r7, #111	; 0x6f
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2308      	moveq	r3, #8
 8000ec2:	230a      	movne	r3, #10
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000eca:	6865      	ldr	r5, [r4, #4]
 8000ecc:	60a5      	str	r5, [r4, #8]
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	bfa2      	ittt	ge
 8000ed2:	6821      	ldrge	r1, [r4, #0]
 8000ed4:	f021 0104 	bicge.w	r1, r1, #4
 8000ed8:	6021      	strge	r1, [r4, #0]
 8000eda:	b90e      	cbnz	r6, 8000ee0 <_printf_i+0x118>
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d04d      	beq.n	8000f7c <_printf_i+0x1b4>
 8000ee0:	4615      	mov	r5, r2
 8000ee2:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ee6:	fb03 6711 	mls	r7, r3, r1, r6
 8000eea:	5dc7      	ldrb	r7, [r0, r7]
 8000eec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	42bb      	cmp	r3, r7
 8000ef4:	460e      	mov	r6, r1
 8000ef6:	d9f4      	bls.n	8000ee2 <_printf_i+0x11a>
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d10b      	bne.n	8000f14 <_printf_i+0x14c>
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	07de      	lsls	r6, r3, #31
 8000f00:	d508      	bpl.n	8000f14 <_printf_i+0x14c>
 8000f02:	6923      	ldr	r3, [r4, #16]
 8000f04:	6861      	ldr	r1, [r4, #4]
 8000f06:	4299      	cmp	r1, r3
 8000f08:	bfde      	ittt	le
 8000f0a:	2330      	movle	r3, #48	; 0x30
 8000f0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f14:	1b52      	subs	r2, r2, r5
 8000f16:	6122      	str	r2, [r4, #16]
 8000f18:	f8cd a000 	str.w	sl, [sp]
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	aa03      	add	r2, sp, #12
 8000f20:	4621      	mov	r1, r4
 8000f22:	4640      	mov	r0, r8
 8000f24:	f7ff fee2 	bl	8000cec <_printf_common>
 8000f28:	3001      	adds	r0, #1
 8000f2a:	d14c      	bne.n	8000fc6 <_printf_i+0x1fe>
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	b004      	add	sp, #16
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	4835      	ldr	r0, [pc, #212]	; (800100c <_printf_i+0x244>)
 8000f38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f3c:	6829      	ldr	r1, [r5, #0]
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f44:	6029      	str	r1, [r5, #0]
 8000f46:	061d      	lsls	r5, r3, #24
 8000f48:	d514      	bpl.n	8000f74 <_printf_i+0x1ac>
 8000f4a:	07df      	lsls	r7, r3, #31
 8000f4c:	bf44      	itt	mi
 8000f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8000f52:	6023      	strmi	r3, [r4, #0]
 8000f54:	b91e      	cbnz	r6, 8000f5e <_printf_i+0x196>
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f023 0320 	bic.w	r3, r3, #32
 8000f5c:	6023      	str	r3, [r4, #0]
 8000f5e:	2310      	movs	r3, #16
 8000f60:	e7b0      	b.n	8000ec4 <_printf_i+0xfc>
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	6023      	str	r3, [r4, #0]
 8000f6a:	2378      	movs	r3, #120	; 0x78
 8000f6c:	4828      	ldr	r0, [pc, #160]	; (8001010 <_printf_i+0x248>)
 8000f6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f72:	e7e3      	b.n	8000f3c <_printf_i+0x174>
 8000f74:	0659      	lsls	r1, r3, #25
 8000f76:	bf48      	it	mi
 8000f78:	b2b6      	uxthmi	r6, r6
 8000f7a:	e7e6      	b.n	8000f4a <_printf_i+0x182>
 8000f7c:	4615      	mov	r5, r2
 8000f7e:	e7bb      	b.n	8000ef8 <_printf_i+0x130>
 8000f80:	682b      	ldr	r3, [r5, #0]
 8000f82:	6826      	ldr	r6, [r4, #0]
 8000f84:	6961      	ldr	r1, [r4, #20]
 8000f86:	1d18      	adds	r0, r3, #4
 8000f88:	6028      	str	r0, [r5, #0]
 8000f8a:	0635      	lsls	r5, r6, #24
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	d501      	bpl.n	8000f94 <_printf_i+0x1cc>
 8000f90:	6019      	str	r1, [r3, #0]
 8000f92:	e002      	b.n	8000f9a <_printf_i+0x1d2>
 8000f94:	0670      	lsls	r0, r6, #25
 8000f96:	d5fb      	bpl.n	8000f90 <_printf_i+0x1c8>
 8000f98:	8019      	strh	r1, [r3, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	6123      	str	r3, [r4, #16]
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	e7ba      	b.n	8000f18 <_printf_i+0x150>
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	1d1a      	adds	r2, r3, #4
 8000fa6:	602a      	str	r2, [r5, #0]
 8000fa8:	681d      	ldr	r5, [r3, #0]
 8000faa:	6862      	ldr	r2, [r4, #4]
 8000fac:	2100      	movs	r1, #0
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f7ff f92e 	bl	8000210 <memchr>
 8000fb4:	b108      	cbz	r0, 8000fba <_printf_i+0x1f2>
 8000fb6:	1b40      	subs	r0, r0, r5
 8000fb8:	6060      	str	r0, [r4, #4]
 8000fba:	6863      	ldr	r3, [r4, #4]
 8000fbc:	6123      	str	r3, [r4, #16]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fc4:	e7a8      	b.n	8000f18 <_printf_i+0x150>
 8000fc6:	6923      	ldr	r3, [r4, #16]
 8000fc8:	462a      	mov	r2, r5
 8000fca:	4649      	mov	r1, r9
 8000fcc:	4640      	mov	r0, r8
 8000fce:	47d0      	blx	sl
 8000fd0:	3001      	adds	r0, #1
 8000fd2:	d0ab      	beq.n	8000f2c <_printf_i+0x164>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	079b      	lsls	r3, r3, #30
 8000fd8:	d413      	bmi.n	8001002 <_printf_i+0x23a>
 8000fda:	68e0      	ldr	r0, [r4, #12]
 8000fdc:	9b03      	ldr	r3, [sp, #12]
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	bfb8      	it	lt
 8000fe2:	4618      	movlt	r0, r3
 8000fe4:	e7a4      	b.n	8000f30 <_printf_i+0x168>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	4632      	mov	r2, r6
 8000fea:	4649      	mov	r1, r9
 8000fec:	4640      	mov	r0, r8
 8000fee:	47d0      	blx	sl
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	d09b      	beq.n	8000f2c <_printf_i+0x164>
 8000ff4:	3501      	adds	r5, #1
 8000ff6:	68e3      	ldr	r3, [r4, #12]
 8000ff8:	9903      	ldr	r1, [sp, #12]
 8000ffa:	1a5b      	subs	r3, r3, r1
 8000ffc:	42ab      	cmp	r3, r5
 8000ffe:	dcf2      	bgt.n	8000fe6 <_printf_i+0x21e>
 8001000:	e7eb      	b.n	8000fda <_printf_i+0x212>
 8001002:	2500      	movs	r5, #0
 8001004:	f104 0619 	add.w	r6, r4, #25
 8001008:	e7f5      	b.n	8000ff6 <_printf_i+0x22e>
 800100a:	bf00      	nop
 800100c:	080016b1 	.word	0x080016b1
 8001010:	080016c2 	.word	0x080016c2

08001014 <_sbrk_r>:
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4d06      	ldr	r5, [pc, #24]	; (8001030 <_sbrk_r+0x1c>)
 8001018:	2300      	movs	r3, #0
 800101a:	4604      	mov	r4, r0
 800101c:	4608      	mov	r0, r1
 800101e:	602b      	str	r3, [r5, #0]
 8001020:	f7ff f9f2 	bl	8000408 <_sbrk>
 8001024:	1c43      	adds	r3, r0, #1
 8001026:	d102      	bne.n	800102e <_sbrk_r+0x1a>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	b103      	cbz	r3, 800102e <_sbrk_r+0x1a>
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	bd38      	pop	{r3, r4, r5, pc}
 8001030:	20000090 	.word	0x20000090

08001034 <__sread>:
 8001034:	b510      	push	{r4, lr}
 8001036:	460c      	mov	r4, r1
 8001038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800103c:	f000 fab2 	bl	80015a4 <_read_r>
 8001040:	2800      	cmp	r0, #0
 8001042:	bfab      	itete	ge
 8001044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001046:	89a3      	ldrhlt	r3, [r4, #12]
 8001048:	181b      	addge	r3, r3, r0
 800104a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800104e:	bfac      	ite	ge
 8001050:	6563      	strge	r3, [r4, #84]	; 0x54
 8001052:	81a3      	strhlt	r3, [r4, #12]
 8001054:	bd10      	pop	{r4, pc}

08001056 <__swrite>:
 8001056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105a:	461f      	mov	r7, r3
 800105c:	898b      	ldrh	r3, [r1, #12]
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	4605      	mov	r5, r0
 8001062:	460c      	mov	r4, r1
 8001064:	4616      	mov	r6, r2
 8001066:	d505      	bpl.n	8001074 <__swrite+0x1e>
 8001068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800106c:	2302      	movs	r3, #2
 800106e:	2200      	movs	r2, #0
 8001070:	f000 f9c8 	bl	8001404 <_lseek_r>
 8001074:	89a3      	ldrh	r3, [r4, #12]
 8001076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800107e:	81a3      	strh	r3, [r4, #12]
 8001080:	4632      	mov	r2, r6
 8001082:	463b      	mov	r3, r7
 8001084:	4628      	mov	r0, r5
 8001086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108a:	f000 b869 	b.w	8001160 <_write_r>

0800108e <__sseek>:
 800108e:	b510      	push	{r4, lr}
 8001090:	460c      	mov	r4, r1
 8001092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001096:	f000 f9b5 	bl	8001404 <_lseek_r>
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	bf15      	itete	ne
 80010a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80010a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010aa:	81a3      	strheq	r3, [r4, #12]
 80010ac:	bf18      	it	ne
 80010ae:	81a3      	strhne	r3, [r4, #12]
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <__sclose>:
 80010b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b6:	f000 b8d3 	b.w	8001260 <_close_r>
	...

080010bc <__swbuf_r>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	460e      	mov	r6, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	4605      	mov	r5, r0
 80010c4:	b118      	cbz	r0, 80010ce <__swbuf_r+0x12>
 80010c6:	6983      	ldr	r3, [r0, #24]
 80010c8:	b90b      	cbnz	r3, 80010ce <__swbuf_r+0x12>
 80010ca:	f7ff fb81 	bl	80007d0 <__sinit>
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <__swbuf_r+0x98>)
 80010d0:	429c      	cmp	r4, r3
 80010d2:	d12b      	bne.n	800112c <__swbuf_r+0x70>
 80010d4:	686c      	ldr	r4, [r5, #4]
 80010d6:	69a3      	ldr	r3, [r4, #24]
 80010d8:	60a3      	str	r3, [r4, #8]
 80010da:	89a3      	ldrh	r3, [r4, #12]
 80010dc:	071a      	lsls	r2, r3, #28
 80010de:	d52f      	bpl.n	8001140 <__swbuf_r+0x84>
 80010e0:	6923      	ldr	r3, [r4, #16]
 80010e2:	b36b      	cbz	r3, 8001140 <__swbuf_r+0x84>
 80010e4:	6923      	ldr	r3, [r4, #16]
 80010e6:	6820      	ldr	r0, [r4, #0]
 80010e8:	1ac0      	subs	r0, r0, r3
 80010ea:	6963      	ldr	r3, [r4, #20]
 80010ec:	b2f6      	uxtb	r6, r6
 80010ee:	4283      	cmp	r3, r0
 80010f0:	4637      	mov	r7, r6
 80010f2:	dc04      	bgt.n	80010fe <__swbuf_r+0x42>
 80010f4:	4621      	mov	r1, r4
 80010f6:	4628      	mov	r0, r5
 80010f8:	f000 f948 	bl	800138c <_fflush_r>
 80010fc:	bb30      	cbnz	r0, 800114c <__swbuf_r+0x90>
 80010fe:	68a3      	ldr	r3, [r4, #8]
 8001100:	3b01      	subs	r3, #1
 8001102:	60a3      	str	r3, [r4, #8]
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	6022      	str	r2, [r4, #0]
 800110a:	701e      	strb	r6, [r3, #0]
 800110c:	6963      	ldr	r3, [r4, #20]
 800110e:	3001      	adds	r0, #1
 8001110:	4283      	cmp	r3, r0
 8001112:	d004      	beq.n	800111e <__swbuf_r+0x62>
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	07db      	lsls	r3, r3, #31
 8001118:	d506      	bpl.n	8001128 <__swbuf_r+0x6c>
 800111a:	2e0a      	cmp	r6, #10
 800111c:	d104      	bne.n	8001128 <__swbuf_r+0x6c>
 800111e:	4621      	mov	r1, r4
 8001120:	4628      	mov	r0, r5
 8001122:	f000 f933 	bl	800138c <_fflush_r>
 8001126:	b988      	cbnz	r0, 800114c <__swbuf_r+0x90>
 8001128:	4638      	mov	r0, r7
 800112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <__swbuf_r+0x9c>)
 800112e:	429c      	cmp	r4, r3
 8001130:	d101      	bne.n	8001136 <__swbuf_r+0x7a>
 8001132:	68ac      	ldr	r4, [r5, #8]
 8001134:	e7cf      	b.n	80010d6 <__swbuf_r+0x1a>
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <__swbuf_r+0xa0>)
 8001138:	429c      	cmp	r4, r3
 800113a:	bf08      	it	eq
 800113c:	68ec      	ldreq	r4, [r5, #12]
 800113e:	e7ca      	b.n	80010d6 <__swbuf_r+0x1a>
 8001140:	4621      	mov	r1, r4
 8001142:	4628      	mov	r0, r5
 8001144:	f000 f81e 	bl	8001184 <__swsetup_r>
 8001148:	2800      	cmp	r0, #0
 800114a:	d0cb      	beq.n	80010e4 <__swbuf_r+0x28>
 800114c:	f04f 37ff 	mov.w	r7, #4294967295
 8001150:	e7ea      	b.n	8001128 <__swbuf_r+0x6c>
 8001152:	bf00      	nop
 8001154:	08001660 	.word	0x08001660
 8001158:	08001680 	.word	0x08001680
 800115c:	08001640 	.word	0x08001640

08001160 <_write_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4d07      	ldr	r5, [pc, #28]	; (8001180 <_write_r+0x20>)
 8001164:	4604      	mov	r4, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4611      	mov	r1, r2
 800116a:	2200      	movs	r2, #0
 800116c:	602a      	str	r2, [r5, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	f7ff f8f9 	bl	8000366 <_write>
 8001174:	1c43      	adds	r3, r0, #1
 8001176:	d102      	bne.n	800117e <_write_r+0x1e>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	b103      	cbz	r3, 800117e <_write_r+0x1e>
 800117c:	6023      	str	r3, [r4, #0]
 800117e:	bd38      	pop	{r3, r4, r5, pc}
 8001180:	20000090 	.word	0x20000090

08001184 <__swsetup_r>:
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <__swsetup_r+0xcc>)
 8001186:	b570      	push	{r4, r5, r6, lr}
 8001188:	681d      	ldr	r5, [r3, #0]
 800118a:	4606      	mov	r6, r0
 800118c:	460c      	mov	r4, r1
 800118e:	b125      	cbz	r5, 800119a <__swsetup_r+0x16>
 8001190:	69ab      	ldr	r3, [r5, #24]
 8001192:	b913      	cbnz	r3, 800119a <__swsetup_r+0x16>
 8001194:	4628      	mov	r0, r5
 8001196:	f7ff fb1b 	bl	80007d0 <__sinit>
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <__swsetup_r+0xd0>)
 800119c:	429c      	cmp	r4, r3
 800119e:	d10f      	bne.n	80011c0 <__swsetup_r+0x3c>
 80011a0:	686c      	ldr	r4, [r5, #4]
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011a8:	0719      	lsls	r1, r3, #28
 80011aa:	d42c      	bmi.n	8001206 <__swsetup_r+0x82>
 80011ac:	06dd      	lsls	r5, r3, #27
 80011ae:	d411      	bmi.n	80011d4 <__swsetup_r+0x50>
 80011b0:	2309      	movs	r3, #9
 80011b2:	6033      	str	r3, [r6, #0]
 80011b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011b8:	81a3      	strh	r3, [r4, #12]
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	e03e      	b.n	800123e <__swsetup_r+0xba>
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <__swsetup_r+0xd4>)
 80011c2:	429c      	cmp	r4, r3
 80011c4:	d101      	bne.n	80011ca <__swsetup_r+0x46>
 80011c6:	68ac      	ldr	r4, [r5, #8]
 80011c8:	e7eb      	b.n	80011a2 <__swsetup_r+0x1e>
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <__swsetup_r+0xd8>)
 80011cc:	429c      	cmp	r4, r3
 80011ce:	bf08      	it	eq
 80011d0:	68ec      	ldreq	r4, [r5, #12]
 80011d2:	e7e6      	b.n	80011a2 <__swsetup_r+0x1e>
 80011d4:	0758      	lsls	r0, r3, #29
 80011d6:	d512      	bpl.n	80011fe <__swsetup_r+0x7a>
 80011d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011da:	b141      	cbz	r1, 80011ee <__swsetup_r+0x6a>
 80011dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d002      	beq.n	80011ea <__swsetup_r+0x66>
 80011e4:	4630      	mov	r0, r6
 80011e6:	f000 f991 	bl	800150c <_free_r>
 80011ea:	2300      	movs	r3, #0
 80011ec:	6363      	str	r3, [r4, #52]	; 0x34
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011f4:	81a3      	strh	r3, [r4, #12]
 80011f6:	2300      	movs	r3, #0
 80011f8:	6063      	str	r3, [r4, #4]
 80011fa:	6923      	ldr	r3, [r4, #16]
 80011fc:	6023      	str	r3, [r4, #0]
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	81a3      	strh	r3, [r4, #12]
 8001206:	6923      	ldr	r3, [r4, #16]
 8001208:	b94b      	cbnz	r3, 800121e <__swsetup_r+0x9a>
 800120a:	89a3      	ldrh	r3, [r4, #12]
 800120c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001214:	d003      	beq.n	800121e <__swsetup_r+0x9a>
 8001216:	4621      	mov	r1, r4
 8001218:	4630      	mov	r0, r6
 800121a:	f000 f92b 	bl	8001474 <__smakebuf_r>
 800121e:	89a0      	ldrh	r0, [r4, #12]
 8001220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001224:	f010 0301 	ands.w	r3, r0, #1
 8001228:	d00a      	beq.n	8001240 <__swsetup_r+0xbc>
 800122a:	2300      	movs	r3, #0
 800122c:	60a3      	str	r3, [r4, #8]
 800122e:	6963      	ldr	r3, [r4, #20]
 8001230:	425b      	negs	r3, r3
 8001232:	61a3      	str	r3, [r4, #24]
 8001234:	6923      	ldr	r3, [r4, #16]
 8001236:	b943      	cbnz	r3, 800124a <__swsetup_r+0xc6>
 8001238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800123c:	d1ba      	bne.n	80011b4 <__swsetup_r+0x30>
 800123e:	bd70      	pop	{r4, r5, r6, pc}
 8001240:	0781      	lsls	r1, r0, #30
 8001242:	bf58      	it	pl
 8001244:	6963      	ldrpl	r3, [r4, #20]
 8001246:	60a3      	str	r3, [r4, #8]
 8001248:	e7f4      	b.n	8001234 <__swsetup_r+0xb0>
 800124a:	2000      	movs	r0, #0
 800124c:	e7f7      	b.n	800123e <__swsetup_r+0xba>
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000
 8001254:	08001660 	.word	0x08001660
 8001258:	08001680 	.word	0x08001680
 800125c:	08001640 	.word	0x08001640

08001260 <_close_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4d06      	ldr	r5, [pc, #24]	; (800127c <_close_r+0x1c>)
 8001264:	2300      	movs	r3, #0
 8001266:	4604      	mov	r4, r0
 8001268:	4608      	mov	r0, r1
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	f7ff f897 	bl	800039e <_close>
 8001270:	1c43      	adds	r3, r0, #1
 8001272:	d102      	bne.n	800127a <_close_r+0x1a>
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	b103      	cbz	r3, 800127a <_close_r+0x1a>
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	20000090 	.word	0x20000090

08001280 <__sflush_r>:
 8001280:	898a      	ldrh	r2, [r1, #12]
 8001282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001286:	4605      	mov	r5, r0
 8001288:	0710      	lsls	r0, r2, #28
 800128a:	460c      	mov	r4, r1
 800128c:	d458      	bmi.n	8001340 <__sflush_r+0xc0>
 800128e:	684b      	ldr	r3, [r1, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	dc05      	bgt.n	80012a0 <__sflush_r+0x20>
 8001294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc02      	bgt.n	80012a0 <__sflush_r+0x20>
 800129a:	2000      	movs	r0, #0
 800129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d0f9      	beq.n	800129a <__sflush_r+0x1a>
 80012a6:	2300      	movs	r3, #0
 80012a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012ac:	682f      	ldr	r7, [r5, #0]
 80012ae:	602b      	str	r3, [r5, #0]
 80012b0:	d032      	beq.n	8001318 <__sflush_r+0x98>
 80012b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012b4:	89a3      	ldrh	r3, [r4, #12]
 80012b6:	075a      	lsls	r2, r3, #29
 80012b8:	d505      	bpl.n	80012c6 <__sflush_r+0x46>
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	1ac0      	subs	r0, r0, r3
 80012be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012c0:	b10b      	cbz	r3, 80012c6 <__sflush_r+0x46>
 80012c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012c4:	1ac0      	subs	r0, r0, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	4602      	mov	r2, r0
 80012ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012cc:	6a21      	ldr	r1, [r4, #32]
 80012ce:	4628      	mov	r0, r5
 80012d0:	47b0      	blx	r6
 80012d2:	1c43      	adds	r3, r0, #1
 80012d4:	89a3      	ldrh	r3, [r4, #12]
 80012d6:	d106      	bne.n	80012e6 <__sflush_r+0x66>
 80012d8:	6829      	ldr	r1, [r5, #0]
 80012da:	291d      	cmp	r1, #29
 80012dc:	d82c      	bhi.n	8001338 <__sflush_r+0xb8>
 80012de:	4a2a      	ldr	r2, [pc, #168]	; (8001388 <__sflush_r+0x108>)
 80012e0:	40ca      	lsrs	r2, r1
 80012e2:	07d6      	lsls	r6, r2, #31
 80012e4:	d528      	bpl.n	8001338 <__sflush_r+0xb8>
 80012e6:	2200      	movs	r2, #0
 80012e8:	6062      	str	r2, [r4, #4]
 80012ea:	04d9      	lsls	r1, r3, #19
 80012ec:	6922      	ldr	r2, [r4, #16]
 80012ee:	6022      	str	r2, [r4, #0]
 80012f0:	d504      	bpl.n	80012fc <__sflush_r+0x7c>
 80012f2:	1c42      	adds	r2, r0, #1
 80012f4:	d101      	bne.n	80012fa <__sflush_r+0x7a>
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	b903      	cbnz	r3, 80012fc <__sflush_r+0x7c>
 80012fa:	6560      	str	r0, [r4, #84]	; 0x54
 80012fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012fe:	602f      	str	r7, [r5, #0]
 8001300:	2900      	cmp	r1, #0
 8001302:	d0ca      	beq.n	800129a <__sflush_r+0x1a>
 8001304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001308:	4299      	cmp	r1, r3
 800130a:	d002      	beq.n	8001312 <__sflush_r+0x92>
 800130c:	4628      	mov	r0, r5
 800130e:	f000 f8fd 	bl	800150c <_free_r>
 8001312:	2000      	movs	r0, #0
 8001314:	6360      	str	r0, [r4, #52]	; 0x34
 8001316:	e7c1      	b.n	800129c <__sflush_r+0x1c>
 8001318:	6a21      	ldr	r1, [r4, #32]
 800131a:	2301      	movs	r3, #1
 800131c:	4628      	mov	r0, r5
 800131e:	47b0      	blx	r6
 8001320:	1c41      	adds	r1, r0, #1
 8001322:	d1c7      	bne.n	80012b4 <__sflush_r+0x34>
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0c4      	beq.n	80012b4 <__sflush_r+0x34>
 800132a:	2b1d      	cmp	r3, #29
 800132c:	d001      	beq.n	8001332 <__sflush_r+0xb2>
 800132e:	2b16      	cmp	r3, #22
 8001330:	d101      	bne.n	8001336 <__sflush_r+0xb6>
 8001332:	602f      	str	r7, [r5, #0]
 8001334:	e7b1      	b.n	800129a <__sflush_r+0x1a>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	e7ad      	b.n	800129c <__sflush_r+0x1c>
 8001340:	690f      	ldr	r7, [r1, #16]
 8001342:	2f00      	cmp	r7, #0
 8001344:	d0a9      	beq.n	800129a <__sflush_r+0x1a>
 8001346:	0793      	lsls	r3, r2, #30
 8001348:	680e      	ldr	r6, [r1, #0]
 800134a:	bf08      	it	eq
 800134c:	694b      	ldreq	r3, [r1, #20]
 800134e:	600f      	str	r7, [r1, #0]
 8001350:	bf18      	it	ne
 8001352:	2300      	movne	r3, #0
 8001354:	eba6 0807 	sub.w	r8, r6, r7
 8001358:	608b      	str	r3, [r1, #8]
 800135a:	f1b8 0f00 	cmp.w	r8, #0
 800135e:	dd9c      	ble.n	800129a <__sflush_r+0x1a>
 8001360:	6a21      	ldr	r1, [r4, #32]
 8001362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001364:	4643      	mov	r3, r8
 8001366:	463a      	mov	r2, r7
 8001368:	4628      	mov	r0, r5
 800136a:	47b0      	blx	r6
 800136c:	2800      	cmp	r0, #0
 800136e:	dc06      	bgt.n	800137e <__sflush_r+0xfe>
 8001370:	89a3      	ldrh	r3, [r4, #12]
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	e78e      	b.n	800129c <__sflush_r+0x1c>
 800137e:	4407      	add	r7, r0
 8001380:	eba8 0800 	sub.w	r8, r8, r0
 8001384:	e7e9      	b.n	800135a <__sflush_r+0xda>
 8001386:	bf00      	nop
 8001388:	20400001 	.word	0x20400001

0800138c <_fflush_r>:
 800138c:	b538      	push	{r3, r4, r5, lr}
 800138e:	690b      	ldr	r3, [r1, #16]
 8001390:	4605      	mov	r5, r0
 8001392:	460c      	mov	r4, r1
 8001394:	b913      	cbnz	r3, 800139c <_fflush_r+0x10>
 8001396:	2500      	movs	r5, #0
 8001398:	4628      	mov	r0, r5
 800139a:	bd38      	pop	{r3, r4, r5, pc}
 800139c:	b118      	cbz	r0, 80013a6 <_fflush_r+0x1a>
 800139e:	6983      	ldr	r3, [r0, #24]
 80013a0:	b90b      	cbnz	r3, 80013a6 <_fflush_r+0x1a>
 80013a2:	f7ff fa15 	bl	80007d0 <__sinit>
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <_fflush_r+0x6c>)
 80013a8:	429c      	cmp	r4, r3
 80013aa:	d11b      	bne.n	80013e4 <_fflush_r+0x58>
 80013ac:	686c      	ldr	r4, [r5, #4]
 80013ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0ef      	beq.n	8001396 <_fflush_r+0xa>
 80013b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b8:	07d0      	lsls	r0, r2, #31
 80013ba:	d404      	bmi.n	80013c6 <_fflush_r+0x3a>
 80013bc:	0599      	lsls	r1, r3, #22
 80013be:	d402      	bmi.n	80013c6 <_fflush_r+0x3a>
 80013c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013c2:	f7ff faa3 	bl	800090c <__retarget_lock_acquire_recursive>
 80013c6:	4628      	mov	r0, r5
 80013c8:	4621      	mov	r1, r4
 80013ca:	f7ff ff59 	bl	8001280 <__sflush_r>
 80013ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013d0:	07da      	lsls	r2, r3, #31
 80013d2:	4605      	mov	r5, r0
 80013d4:	d4e0      	bmi.n	8001398 <_fflush_r+0xc>
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	059b      	lsls	r3, r3, #22
 80013da:	d4dd      	bmi.n	8001398 <_fflush_r+0xc>
 80013dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013de:	f7ff fa96 	bl	800090e <__retarget_lock_release_recursive>
 80013e2:	e7d9      	b.n	8001398 <_fflush_r+0xc>
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <_fflush_r+0x70>)
 80013e6:	429c      	cmp	r4, r3
 80013e8:	d101      	bne.n	80013ee <_fflush_r+0x62>
 80013ea:	68ac      	ldr	r4, [r5, #8]
 80013ec:	e7df      	b.n	80013ae <_fflush_r+0x22>
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <_fflush_r+0x74>)
 80013f0:	429c      	cmp	r4, r3
 80013f2:	bf08      	it	eq
 80013f4:	68ec      	ldreq	r4, [r5, #12]
 80013f6:	e7da      	b.n	80013ae <_fflush_r+0x22>
 80013f8:	08001660 	.word	0x08001660
 80013fc:	08001680 	.word	0x08001680
 8001400:	08001640 	.word	0x08001640

08001404 <_lseek_r>:
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4d07      	ldr	r5, [pc, #28]	; (8001424 <_lseek_r+0x20>)
 8001408:	4604      	mov	r4, r0
 800140a:	4608      	mov	r0, r1
 800140c:	4611      	mov	r1, r2
 800140e:	2200      	movs	r2, #0
 8001410:	602a      	str	r2, [r5, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	f7fe ffea 	bl	80003ec <_lseek>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_lseek_r+0x1e>
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	b103      	cbz	r3, 8001422 <_lseek_r+0x1e>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	20000090 	.word	0x20000090

08001428 <__swhatbuf_r>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	460e      	mov	r6, r1
 800142c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001430:	2900      	cmp	r1, #0
 8001432:	b096      	sub	sp, #88	; 0x58
 8001434:	4614      	mov	r4, r2
 8001436:	461d      	mov	r5, r3
 8001438:	da08      	bge.n	800144c <__swhatbuf_r+0x24>
 800143a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	602a      	str	r2, [r5, #0]
 8001442:	061a      	lsls	r2, r3, #24
 8001444:	d410      	bmi.n	8001468 <__swhatbuf_r+0x40>
 8001446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144a:	e00e      	b.n	800146a <__swhatbuf_r+0x42>
 800144c:	466a      	mov	r2, sp
 800144e:	f000 f8bb 	bl	80015c8 <_fstat_r>
 8001452:	2800      	cmp	r0, #0
 8001454:	dbf1      	blt.n	800143a <__swhatbuf_r+0x12>
 8001456:	9a01      	ldr	r2, [sp, #4]
 8001458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800145c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001460:	425a      	negs	r2, r3
 8001462:	415a      	adcs	r2, r3
 8001464:	602a      	str	r2, [r5, #0]
 8001466:	e7ee      	b.n	8001446 <__swhatbuf_r+0x1e>
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	2000      	movs	r0, #0
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	b016      	add	sp, #88	; 0x58
 8001470:	bd70      	pop	{r4, r5, r6, pc}
	...

08001474 <__smakebuf_r>:
 8001474:	898b      	ldrh	r3, [r1, #12]
 8001476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001478:	079d      	lsls	r5, r3, #30
 800147a:	4606      	mov	r6, r0
 800147c:	460c      	mov	r4, r1
 800147e:	d507      	bpl.n	8001490 <__smakebuf_r+0x1c>
 8001480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	6123      	str	r3, [r4, #16]
 8001488:	2301      	movs	r3, #1
 800148a:	6163      	str	r3, [r4, #20]
 800148c:	b002      	add	sp, #8
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	ab01      	add	r3, sp, #4
 8001492:	466a      	mov	r2, sp
 8001494:	f7ff ffc8 	bl	8001428 <__swhatbuf_r>
 8001498:	9900      	ldr	r1, [sp, #0]
 800149a:	4605      	mov	r5, r0
 800149c:	4630      	mov	r0, r6
 800149e:	f7ff fa57 	bl	8000950 <_malloc_r>
 80014a2:	b948      	cbnz	r0, 80014b8 <__smakebuf_r+0x44>
 80014a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a8:	059a      	lsls	r2, r3, #22
 80014aa:	d4ef      	bmi.n	800148c <__smakebuf_r+0x18>
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	81a3      	strh	r3, [r4, #12]
 80014b6:	e7e3      	b.n	8001480 <__smakebuf_r+0xc>
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <__smakebuf_r+0x7c>)
 80014ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	6020      	str	r0, [r4, #0]
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	81a3      	strh	r3, [r4, #12]
 80014c6:	9b00      	ldr	r3, [sp, #0]
 80014c8:	6163      	str	r3, [r4, #20]
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	6120      	str	r0, [r4, #16]
 80014ce:	b15b      	cbz	r3, 80014e8 <__smakebuf_r+0x74>
 80014d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d4:	4630      	mov	r0, r6
 80014d6:	f000 f889 	bl	80015ec <_isatty_r>
 80014da:	b128      	cbz	r0, 80014e8 <__smakebuf_r+0x74>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	89a0      	ldrh	r0, [r4, #12]
 80014ea:	4305      	orrs	r5, r0
 80014ec:	81a5      	strh	r5, [r4, #12]
 80014ee:	e7cd      	b.n	800148c <__smakebuf_r+0x18>
 80014f0:	08000769 	.word	0x08000769

080014f4 <__malloc_lock>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__malloc_lock+0x8>)
 80014f6:	f7ff ba09 	b.w	800090c <__retarget_lock_acquire_recursive>
 80014fa:	bf00      	nop
 80014fc:	20000084 	.word	0x20000084

08001500 <__malloc_unlock>:
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <__malloc_unlock+0x8>)
 8001502:	f7ff ba04 	b.w	800090e <__retarget_lock_release_recursive>
 8001506:	bf00      	nop
 8001508:	20000084 	.word	0x20000084

0800150c <_free_r>:
 800150c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800150e:	2900      	cmp	r1, #0
 8001510:	d044      	beq.n	800159c <_free_r+0x90>
 8001512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001516:	9001      	str	r0, [sp, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f1a1 0404 	sub.w	r4, r1, #4
 800151e:	bfb8      	it	lt
 8001520:	18e4      	addlt	r4, r4, r3
 8001522:	f7ff ffe7 	bl	80014f4 <__malloc_lock>
 8001526:	4a1e      	ldr	r2, [pc, #120]	; (80015a0 <_free_r+0x94>)
 8001528:	9801      	ldr	r0, [sp, #4]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	b933      	cbnz	r3, 800153c <_free_r+0x30>
 800152e:	6063      	str	r3, [r4, #4]
 8001530:	6014      	str	r4, [r2, #0]
 8001532:	b003      	add	sp, #12
 8001534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001538:	f7ff bfe2 	b.w	8001500 <__malloc_unlock>
 800153c:	42a3      	cmp	r3, r4
 800153e:	d908      	bls.n	8001552 <_free_r+0x46>
 8001540:	6825      	ldr	r5, [r4, #0]
 8001542:	1961      	adds	r1, r4, r5
 8001544:	428b      	cmp	r3, r1
 8001546:	bf01      	itttt	eq
 8001548:	6819      	ldreq	r1, [r3, #0]
 800154a:	685b      	ldreq	r3, [r3, #4]
 800154c:	1949      	addeq	r1, r1, r5
 800154e:	6021      	streq	r1, [r4, #0]
 8001550:	e7ed      	b.n	800152e <_free_r+0x22>
 8001552:	461a      	mov	r2, r3
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	b10b      	cbz	r3, 800155c <_free_r+0x50>
 8001558:	42a3      	cmp	r3, r4
 800155a:	d9fa      	bls.n	8001552 <_free_r+0x46>
 800155c:	6811      	ldr	r1, [r2, #0]
 800155e:	1855      	adds	r5, r2, r1
 8001560:	42a5      	cmp	r5, r4
 8001562:	d10b      	bne.n	800157c <_free_r+0x70>
 8001564:	6824      	ldr	r4, [r4, #0]
 8001566:	4421      	add	r1, r4
 8001568:	1854      	adds	r4, r2, r1
 800156a:	42a3      	cmp	r3, r4
 800156c:	6011      	str	r1, [r2, #0]
 800156e:	d1e0      	bne.n	8001532 <_free_r+0x26>
 8001570:	681c      	ldr	r4, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	6053      	str	r3, [r2, #4]
 8001576:	4421      	add	r1, r4
 8001578:	6011      	str	r1, [r2, #0]
 800157a:	e7da      	b.n	8001532 <_free_r+0x26>
 800157c:	d902      	bls.n	8001584 <_free_r+0x78>
 800157e:	230c      	movs	r3, #12
 8001580:	6003      	str	r3, [r0, #0]
 8001582:	e7d6      	b.n	8001532 <_free_r+0x26>
 8001584:	6825      	ldr	r5, [r4, #0]
 8001586:	1961      	adds	r1, r4, r5
 8001588:	428b      	cmp	r3, r1
 800158a:	bf04      	itt	eq
 800158c:	6819      	ldreq	r1, [r3, #0]
 800158e:	685b      	ldreq	r3, [r3, #4]
 8001590:	6063      	str	r3, [r4, #4]
 8001592:	bf04      	itt	eq
 8001594:	1949      	addeq	r1, r1, r5
 8001596:	6021      	streq	r1, [r4, #0]
 8001598:	6054      	str	r4, [r2, #4]
 800159a:	e7ca      	b.n	8001532 <_free_r+0x26>
 800159c:	b003      	add	sp, #12
 800159e:	bd30      	pop	{r4, r5, pc}
 80015a0:	20000088 	.word	0x20000088

080015a4 <_read_r>:
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	4d07      	ldr	r5, [pc, #28]	; (80015c4 <_read_r+0x20>)
 80015a8:	4604      	mov	r4, r0
 80015aa:	4608      	mov	r0, r1
 80015ac:	4611      	mov	r1, r2
 80015ae:	2200      	movs	r2, #0
 80015b0:	602a      	str	r2, [r5, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	f7fe feba 	bl	800032c <_read>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d102      	bne.n	80015c2 <_read_r+0x1e>
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	b103      	cbz	r3, 80015c2 <_read_r+0x1e>
 80015c0:	6023      	str	r3, [r4, #0]
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	20000090 	.word	0x20000090

080015c8 <_fstat_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d07      	ldr	r5, [pc, #28]	; (80015e8 <_fstat_r+0x20>)
 80015cc:	2300      	movs	r3, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	602b      	str	r3, [r5, #0]
 80015d6:	f7fe feee 	bl	80003b6 <_fstat>
 80015da:	1c43      	adds	r3, r0, #1
 80015dc:	d102      	bne.n	80015e4 <_fstat_r+0x1c>
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	b103      	cbz	r3, 80015e4 <_fstat_r+0x1c>
 80015e2:	6023      	str	r3, [r4, #0]
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
 80015e6:	bf00      	nop
 80015e8:	20000090 	.word	0x20000090

080015ec <_isatty_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4d06      	ldr	r5, [pc, #24]	; (8001608 <_isatty_r+0x1c>)
 80015f0:	2300      	movs	r3, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	f7fe feed 	bl	80003d6 <_isatty>
 80015fc:	1c43      	adds	r3, r0, #1
 80015fe:	d102      	bne.n	8001606 <_isatty_r+0x1a>
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	b103      	cbz	r3, 8001606 <_isatty_r+0x1a>
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	bd38      	pop	{r3, r4, r5, pc}
 8001608:	20000090 	.word	0x20000090

0800160c <_init>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	bf00      	nop
 8001610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001612:	bc08      	pop	{r3}
 8001614:	469e      	mov	lr, r3
 8001616:	4770      	bx	lr

08001618 <_fini>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	bf00      	nop
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr
